<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Hexo发布博客方法</title>
      <link href="/2019/12/19/2019-12-19-Hexo%E5%8F%91%E5%B8%83%E5%8D%9A%E5%AE%A2%E6%96%B9%E6%B3%95/"/>
      <url>/2019/12/19/2019-12-19-Hexo%E5%8F%91%E5%B8%83%E5%8D%9A%E5%AE%A2%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h2 id="一、创建博客"><a href="#一、创建博客" class="headerlink" title="一、创建博客"></a>一、创建博客</h2><p>你可以执行下列命令来创建一篇新文章或者新的页面。</p><figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new [layout] &lt;title&gt;</span><br></pre></td></tr></table></figure><p>您可以在命令中指定文章的布局（layout），默认为 <code>post</code>，可以通过修改 <code>_config.yml</code> 中的 <code>default_layout</code> 参数来指定默认布局。</p><h3 id="布局（Layout）"><a href="#布局（Layout）" class="headerlink" title="布局（Layout）"></a>布局（Layout）</h3><p>Hexo 有三种默认布局：<code>post</code>、<code>page</code> 和 <code>draft</code>。在创建者三种不同类型的文件时，它们将会被保存到不同的路径；而您自定义的其他布局和 <code>post</code> 相同，都将储存到 <code>source/_posts</code> 文件夹。</p><table><thead><tr><th>布局</th><th>路径</th></tr></thead><tbody><tr><td><code>post</code></td><td><code>source/_posts</code></td></tr><tr><td><code>page</code></td><td><code>source</code></td></tr><tr><td><code>draft</code></td><td><code>source/_drafts</code></td></tr></tbody></table><blockquote><h3 id="不要处理我的文章"><a href="#不要处理我的文章" class="headerlink" title="不要处理我的文章"></a>不要处理我的文章</h3><p>如果你不想你的文章被处理，你可以将 Front-Matter 中的<code>layout:</code> 设为 <code>false</code> 。</p></blockquote><h3 id="文件名称"><a href="#文件名称" class="headerlink" title="文件名称"></a>文件名称</h3><p>Hexo 默认以标题做为文件名称，但您可编辑 <code>new_post_name</code> 参数来改变默认的文件名称，举例来说，设为 <code>:year-:month-:day-:title.md</code> 可让您更方便的通过日期来管理文章。</p><table><thead><tr><th>变量</th><th>描述</th></tr></thead><tbody><tr><td><code>:title</code></td><td>标题（小写，空格将会被替换为短杠）</td></tr><tr><td><code>:year</code></td><td>建立的年份，比如， 2015</td></tr><tr><td><code>:month</code></td><td>建立的月份（有前导零），比如， <code>04</code></td></tr><tr><td><code>:i_month</code></td><td>建立的月份（无前导零），比如， <code>4</code></td></tr><tr><td><code>:day</code></td><td>建立的日期（有前导零），比如， <code>07</code></td></tr><tr><td><code>:i_day</code></td><td>建立的日期（无前导零），比如， <code>7</code></td></tr></tbody></table><h3 id="草稿"><a href="#草稿" class="headerlink" title="草稿"></a>草稿</h3><p>刚刚提到了 Hexo 的一种特殊布局：<code>draft</code>，这种布局在建立时会被保存到 <code>source/_drafts</code> 文件夹，您可通过 <code>publish</code> 命令将草稿移动到 <code>source/_posts</code> 文件夹，该命令的使用方式与 <code>new</code> 十分类似，您也可在命令中指定 <code>layout</code> 来指定布局。</p><figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo publish [layout] &lt;title&gt;</span><br></pre></td></tr></table></figure><p>草稿默认不会显示在页面中，您可在执行时加上 <code>--draft</code> 参数，或是把 <code>render_drafts</code> 参数设为 <code>true</code> 来预览草稿。</p><h3 id="模版（Scaffold）"><a href="#模版（Scaffold）" class="headerlink" title="模版（Scaffold）"></a>模版（Scaffold）</h3><p>在新建文章时，Hexo 会根据 <code>scaffolds</code> 文件夹内相对应的文件来建立文件，例如：</p><figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new photo "My Gallery"</span><br></pre></td></tr></table></figure><p>在执行这行指令时，Hexo 会尝试在 <code>scaffolds</code> 文件夹中寻找 <code>photo.md</code>，并根据其内容建立文章，以下是您可以在模版中使用的变量：</p><table><thead><tr><th>变量</th><th>描述</th></tr></thead><tbody><tr><td>layout</td><td>布局</td></tr><tr><td>title</td><td>标题</td></tr><tr><td>date</td><td>文件建立日期</td></tr></tbody></table><h2 id="二、Front-matter"><a href="#二、Front-matter" class="headerlink" title="二、Front-matter"></a>二、Front-matter</h2><p>Front-matter 是文件最上方以 <code>---</code> 分隔的区域，用于指定个别文件的变量，举例来说：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">Hello</span> <span class="string">World</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2013</span><span class="string">/7/13</span> <span class="number">20</span><span class="string">:46:25</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure><p>以下是预先定义的参数，您可在模板中使用这些参数值并加以利用。</p><table><thead><tr><th>参数</th><th>描述</th><th>默认值</th></tr></thead><tbody><tr><td>layout</td><td>布局</td><td></td></tr><tr><td>title</td><td>标题</td><td>文章的文件名</td></tr><tr><td>date</td><td>建立日期</td><td>文件建立日期</td></tr><tr><td>updated</td><td>更新日期</td><td>文件更新日期</td></tr><tr><td>comments</td><td>开启文章的评论功能</td><td>true</td></tr><tr><td>tags</td><td>标签（不适用于分页）</td><td></td></tr><tr><td>categories</td><td>分类（不适用于分页）</td><td></td></tr><tr><td>permalink</td><td>覆盖文章网址</td><td></td></tr><tr><td>keywords</td><td>仅用于 meta 标签和 Open Graph 的关键词（不推荐使用）</td><td></td></tr></tbody></table><h3 id="分类和标签"><a href="#分类和标签" class="headerlink" title="分类和标签"></a>分类和标签</h3><p>只有文章支持分类和标签，您可以在 Front-matter 中设置。在其他系统中，分类和标签听起来很接近，但是在 Hexo 中两者有着明显的差别：分类具有顺序性和层次性，也就是说 <code>Foo, Bar</code> 不等于 <code>Bar, Foo</code>；而标签没有顺序和层次。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">categories:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">Diary</span></span><br><span class="line"><span class="attr">tags:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">PS3</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">Games</span></span><br></pre></td></tr></table></figure><blockquote><h3 id="分类方法的分歧"><a href="#分类方法的分歧" class="headerlink" title="分类方法的分歧"></a>分类方法的分歧</h3><p>如果您有过使用 WordPress 的经验，就很容易误解 Hexo 的分类方式。WordPress 支持对一篇文章设置多个分类，而且这些分类可以是同级的，也可以是父子分类。但是 Hexo 不支持指定多个同级分类。下面的指定方法：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">categories:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">Diary</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">Life</span></span><br></pre></td></tr></table></figure><p>会使分类 <code>Life</code> 成为 <code>Diary</code> 的子分类，而不是并列分类。因此，有必要为您的文章选择尽可能准确的分类。</p><p>如果你需要为文章添加多个分类，可以尝试以下 list 中的方法。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">categories:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">[Diary,</span> <span class="string">PlayStation]</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">[Diary,</span> <span class="string">Games]</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">[Life]</span></span><br></pre></td></tr></table></figure><p>此时这篇文章同时包括三个分类： <code>PlayStation</code> 和 <code>Games</code> 分别都是父分类 <code>Diary</code> 的子分类，同时 <code>Life</code> 是一个没有子分类的分类。</p></blockquote><h3 id="JSON-Front-matter"><a href="#JSON-Front-matter" class="headerlink" title="JSON Front-matter"></a>JSON Front-matter</h3><p>除了 YAML 外，你也可以使用 JSON 来编写 Front-matter，只要将 — 代换成 ;;; 即可。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">"title": "Hello World",</span><br><span class="line">"date": "2013/7/13 20:46:25"</span><br><span class="line">;;;</span><br></pre></td></tr></table></figure><h2 id="三、本地启动预览"><a href="#三、本地启动预览" class="headerlink" title="三、本地启动预览"></a>三、本地启动预览</h2><h3 id="hexo-server"><a href="#hexo-server" class="headerlink" title="hexo-server"></a>hexo-server</h3><p>Hexo 3.0 把服务器独立成了个别模块，您必须先安装 <a href="https://github.com/hexojs/hexo-server" target="_blank" rel="noopener">hexo-server</a> 才能使用。</p><figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-server --save</span><br></pre></td></tr></table></figure><p>安装完成后，输入以下命令以启动服务器，您的网站会在 <code>http://localhost:4000</code> 下启动。在服务器启动期间，Hexo 会监视文件变动并自动更新，您无须重启服务器。</p><figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo server</span><br></pre></td></tr></table></figure><p>如果您想要更改端口，或是在执行时遇到了 <code>EADDRINUSE</code> 错误，可以在执行时使用 -p 选项指定其他端口，如下：</p><figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo server -p 5000</span><br></pre></td></tr></table></figure><h4 id="静态模式"><a href="#静态模式" class="headerlink" title="静态模式"></a>静态模式</h4><p>在静态模式下，服务器只处理 <code>public</code> 文件夹内的文件，而不会处理文件变动，在执行时，您应该先自行执行 <code>hexo generate</code>，此模式通常用于生产环境（production mode）下。</p><figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo server -s</span><br></pre></td></tr></table></figure><h4 id="自定义-IP"><a href="#自定义-IP" class="headerlink" title="自定义 IP"></a>自定义 IP</h4><p>服务器默认运行在 <code>0.0.0.0</code>，您可以覆盖默认的 IP 设置，如下：</p><figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo server -i 192.168.1.1</span><br></pre></td></tr></table></figure><p>指定这个参数后，您就只能通过该IP才能访问站点。例如，对于一台使用无线网络的笔记本电脑，除了指向本机的<code>127.0.0.1</code>外，通常还有一个<code>192.168.*.*</code>的局域网IP，如果像上面那样使用<code>-i</code>参数，就不能用<code>127.0.0.1</code>来访问站点了。对于有公网IP的主机，如果您指定一个局域网IP作为<code>-i</code>参数的值，那么就无法通过公网来访问站点。</p><h3 id="生成文件"><a href="#生成文件" class="headerlink" title="生成文件"></a>生成文件</h3><p>使用 Hexo 生成静态文件快速而且简单。</p><figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo generate</span><br></pre></td></tr></table></figure><h4 id="监视文件变动"><a href="#监视文件变动" class="headerlink" title="监视文件变动"></a>监视文件变动</h4><p>Hexo 能够监视文件变动并立即重新生成静态文件，在生成时会比对文件的 SHA1 checksum，只有变动的文件才会写入。</p><figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo generate --watch</span><br></pre></td></tr></table></figure><h4 id="完成后部署"><a href="#完成后部署" class="headerlink" title="完成后部署"></a>完成后部署</h4><p>您可执行下列的其中一个命令，让 Hexo 在生成完毕后自动部署网站，两个命令的作用是相同的。</p><figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo generate --deploy</span><br><span class="line">hexo deploy --generate</span><br></pre></td></tr></table></figure><blockquote><h4 id="简写"><a href="#简写" class="headerlink" title="简写"></a>简写</h4><p>上面两个命令可以简写为</p><figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo g -d</span><br><span class="line">hexo d -g</span><br></pre></td></tr></table></figure></blockquote><h2 id="四、部署到GitHub-码云等Git开源平台"><a href="#四、部署到GitHub-码云等Git开源平台" class="headerlink" title="四、部署到GitHub/码云等Git开源平台"></a>四、部署到GitHub/码云等Git开源平台</h2><p>Hexo 提供了快速方便的一键部署功能，让您只需一条命令就能将网站部署到服务器上。</p><figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo deploy</span><br></pre></td></tr></table></figure><p>在开始之前，您必须先在 <code>_config.yml</code> 中修改参数，一个正确的部署配置中至少要有 <code>type</code> 参数，例如：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br></pre></td></tr></table></figure><p>您可同时使用多个 deployer，Hexo 会依照顺序执行每个 deployer。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">type:</span> <span class="string">heroku</span></span><br><span class="line">  <span class="attr">repo:</span></span><br></pre></td></tr></table></figure><p>请参阅<a href="https://hexo.io/plugins/" target="_blank" rel="noopener">插件</a>列表以获取更多部署插件。</p><ol><li>安装 hexo-deployer-git。 <figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure></li><li>修改配置。 <figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">&lt;repository</span> <span class="string">url&gt;</span> <span class="comment">#https://bitbucket.org/JohnSmith/johnsmith.bitbucket.io</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">[branch]</span></span><br><span class="line">  <span class="attr">message:</span> <span class="string">[message]</span></span><br></pre></td></tr></table></figure><table><thead><tr><th>参数</th><th>描述</th><th>默认</th></tr></thead><tbody><tr><td><code>repo</code></td><td>库（Repository）地址</td><td></td></tr><tr><td><code>branch</code></td><td>分支名称</td><td>gh-pages (GitHub)、coding-pages (Coding.net)、master (others)</td></tr><tr><td><code>message</code></td><td>自定义提交信息</td><td>Site updated: {{ now('YYYY-MM-DD HH:mm:ss') }})</td></tr><tr><td><code>token</code></td><td>用于与仓库进行身份验证的可选令牌值。 带$的前缀以从环境变量读取令牌</td><td></td></tr></tbody></table></li></ol><blockquote><h3 id="碰到一些问题的解决办法"><a href="#碰到一些问题的解决办法" class="headerlink" title="碰到一些问题的解决办法"></a>碰到一些问题的解决办法</h3><p><a href="https://hexo.io/zh-cn/docs/troubleshooting.html" target="_blank" rel="noopener">https://hexo.io/zh-cn/docs/troubleshooting.html</a></p></blockquote><h2 id="五、结束"><a href="#五、结束" class="headerlink" title="五、结束"></a>五、结束</h2><p>学习了Github Pages的使用，通过Hexo部署的方法学习</p><blockquote><p>主要参考<a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">https://hexo.io/zh-cn/docs/</a>来写的</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 自建博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用Spring Cache + Redis + Jackson Serializer缓存数据库查询结果中序列化问题的处理</title>
      <link href="/2019/04/11/2019-04-11-%E4%BD%BF%E7%94%A8Spring-Cache-Redis-Jackson-Serializer%E7%BC%93%E5%AD%98%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9F%A5%E8%AF%A2%E7%BB%93%E6%9E%9C%E4%B8%AD%E5%BA%8F%E5%88%97%E5%8C%96%E9%97%AE%E9%A2%98%E7%9A%84%E5%A4%84%E7%90%86/"/>
      <url>/2019/04/11/2019-04-11-%E4%BD%BF%E7%94%A8Spring-Cache-Redis-Jackson-Serializer%E7%BC%93%E5%AD%98%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9F%A5%E8%AF%A2%E7%BB%93%E6%9E%9C%E4%B8%AD%E5%BA%8F%E5%88%97%E5%8C%96%E9%97%AE%E9%A2%98%E7%9A%84%E5%A4%84%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><p>我们希望通过缓存来减少对关系型数据库的查询次数，减轻数据库压力。在执行DAO类的<code>select***()</code>, <code>query***()</code>方法时，先从Redis中查询有没有缓存数据，如果有则直接从Redis拿到结果，如果没有再向数据库发起查询请求取数据。</p><h2 id="序列化问题"><a href="#序列化问题" class="headerlink" title="序列化问题"></a>序列化问题</h2><p>要把<code>对象</code>做为<code>key-value</code>对保存在redis中，就必须要解决对象的序列化问题。Spring Data Redis给我们提供了一些现成的方案：</p><ul><li><p><code>JdkSerializationRedisSerializer</code>. 使用JDK提供的序列化功能。 优点是反序列化时不需要提供类型信息(class)，但缺点是序列化后的结果非常庞大，是JSON格式的5倍左右，这样就会消耗redis服务器的大量内存。</p></li><li><p><code>Jackson2JsonRedisSerializer</code>. 使用Jackson库将对象序列化为JSON字符串。优点是速度快，序列化后的字符串短小精悍。但缺点也非常致命，那就是此类的构造函数中有一个类型参数，必须提供要序列化对象的类型信息(.class对象)。 通过查看源代码，发现其只在反序列化过程中用到了类型信息。</p></li><li><p><code>GenericJackson2JsonRedisSerializer</code>. 和 <code>Jackson2JsonRedisSerializer</code> 类似。但是它不需要提供序列化对象的类型信息。</p></li></ul><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>如果用方案一，就必须付出缓存多占用4倍内存的代价，实在承受不起。  </p><p>如果用方案二，则必须给每一种domain对象都配置一个Serializer，即如果我的应用里有100种domain对象，那就必须在spring配置文件中配置100个Jackson2JsonRedisSerializer，这显然也是不现实的。</p><p>如果用方案三，就是为了解决Jackson必须提供类型信息的问题，可以同时支持多种不同类型的domain对象。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>所以选择使用<code>GenericJackson2JsonRedisSerializer</code>来配置序列化。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> RedisCacheManager <span class="title">jsonCacheManager</span><span class="params">(RedisConnectionFactory factory)</span> </span>&#123;</span><br><span class="line">    RedisCacheConfiguration config = RedisCacheConfiguration.defaultCacheConfig()</span><br><span class="line">            .serializeValuesWith(RedisSerializationContext.SerializationPair</span><br><span class="line">                .fromSerializer(<span class="keyword">new</span> GenericJackson2JsonRedisSerializer()));</span><br><span class="line">    <span class="keyword">return</span> RedisCacheManager.builder(factory)</span><br><span class="line">            .cacheDefaults(config)</span><br><span class="line">            .build();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Jackson2JsonRedisSerializer和GenericJackson2JsonRedisSerializer的区别"><a href="#Jackson2JsonRedisSerializer和GenericJackson2JsonRedisSerializer的区别" class="headerlink" title="Jackson2JsonRedisSerializer和GenericJackson2JsonRedisSerializer的区别"></a>Jackson2JsonRedisSerializer和GenericJackson2JsonRedisSerializer的区别</h2><h3 id="一、使用Jackson2JsonRedisSerializer序列化反序列化带泛型的List数据"><a href="#一、使用Jackson2JsonRedisSerializer序列化反序列化带泛型的List数据" class="headerlink" title="一、使用Jackson2JsonRedisSerializer序列化反序列化带泛型的List数据"></a>一、使用Jackson2JsonRedisSerializer序列化反序列化带泛型的List数据</h3><p>1、使用Jackson2JsonRedisSerializer序列化value的代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">redisTemplate.setKeySerializer(<span class="keyword">new</span> StringRedisSerializer());</span><br><span class="line">redisTemplate.setValueSerializer(<span class="keyword">new</span> Jackson2JsonRedisSerializer(Object<span class="class">.<span class="keyword">class</span>))</span>;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">User user = <span class="keyword">new</span> User();</span><br><span class="line">user.setUserId(<span class="number">1</span>);</span><br><span class="line">user.setUsername(<span class="string">"张三"</span>);</span><br><span class="line">List&lt;User&gt; userList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">userList.add(user);</span><br><span class="line"><span class="comment">//不能直接将对象存储进redis中否则在进行反序列化的时候会报</span></span><br><span class="line"><span class="comment">// java.lang.ClassCastException: java.util.LinkedHashMap cannot be cast to com.lx.entity.User错误</span></span><br><span class="line"><span class="comment">//可以先转为json字符串再进行存储</span></span><br><span class="line">String value = JSON.toJSONString(userList);</span><br><span class="line">redisTemplate.opsForValue().set(<span class="string">"jackson2JsonRedisSerializer"</span>, value, <span class="number">5</span>,</span><br><span class="line">        TimeUnit.MINUTES);</span><br></pre></td></tr></table></figure><p>2、使用Jackson2JsonRedisSerializer序列化后的数据形式</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">"userId"</span>:<span class="number">1</span>,</span><br><span class="line">    <span class="attr">"username"</span>:<span class="string">"张三"</span></span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>3、使用Jackson2JsonRedisSerializer反序列化时报错</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">List&lt;User&gt; userListRedis = redisTemplate.opsForValue().get(<span class="string">"jackson2JsonRedisSerializer"</span>);</span><br><span class="line">userListRedis.forEach(u -&gt; System.out.println(JSON.toJSONString(u)));</span><br></pre></td></tr></table></figure><p>错误信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java.lang.ClassCastException: java.util.LinkedHashMap cannot be cast to com.lx.entity.User</span><br></pre></td></tr></table></figure><ul><li>原因: <strong>序列化带泛型的数据时，会以map的结构进行存储，反序列化时不能将map解析成对象。</strong></li></ul><p>4、解决方案：序列化存储时，转成JSON字符串<br>使用<code>jackson</code>或者<code>fastjson</code>都可以，我这里使用的是<code>fastjson</code>,<br>需要的依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.47<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">User user = <span class="keyword">new</span> User();</span><br><span class="line">user.setUserId(<span class="number">1</span>);</span><br><span class="line">user.setUsername(<span class="string">"张三"</span>);</span><br><span class="line">List&lt;User&gt; userList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">userList.add(user);</span><br><span class="line"></span><br><span class="line">redisTemplate.opsForValue().set(<span class="string">"jackson2JsonRedisSerializer"</span>, JSON.toJSONString(userList), <span class="number">5</span>, TimeUnit.MINUTES);</span><br><span class="line"></span><br><span class="line">String res = (String) redisTemplate.opsForValue().get(<span class="string">"jackson2JsonRedisSerializer"</span>);</span><br><span class="line">JSON.parseArray(res, User<span class="class">.<span class="keyword">class</span>).<span class="title">forEach</span>(<span class="title">u</span> -&gt; <span class="title">System</span>.<span class="title">out</span>.<span class="title">println</span>(<span class="title">JSON</span>.<span class="title">toJSONString</span>(<span class="title">u</span>)))</span>;</span><br></pre></td></tr></table></figure><h3 id="二、使用GenericJackson2JsonRedisSerializer序列化反序列化带泛型的List数据"><a href="#二、使用GenericJackson2JsonRedisSerializer序列化反序列化带泛型的List数据" class="headerlink" title="二、使用GenericJackson2JsonRedisSerializer序列化反序列化带泛型的List数据"></a>二、使用GenericJackson2JsonRedisSerializer序列化反序列化带泛型的List数据</h3><p>1、使用GenericJackson2JsonRedisSerializer序列化value的代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">redisTemplate.setKeySerializer(<span class="keyword">new</span> StringRedisSerializer());</span><br><span class="line">redisTemplate.setValueSerializer(<span class="keyword">new</span> GenericJackson2JsonRedisSerializer());</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">User user = <span class="keyword">new</span> User();</span><br><span class="line">user.setUserId(<span class="number">1</span>);</span><br><span class="line">user.setUsername(<span class="string">"李四"</span>);</span><br><span class="line">List&lt;User&gt; userList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">userList.add(user);</span><br><span class="line">redisTemplate.opsForValue().set(<span class="string">"genericJackson2JsonRedisSerializer"</span>,userList,<span class="number">5</span>,TimeUnit.MINUTES);</span><br></pre></td></tr></table></figure><p>2、使用GenericJackson2JsonRedisSerializer序列化后的数据形式</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">    <span class="string">"java.util.ArrayList"</span>,</span><br><span class="line">    [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"@class"</span>: <span class="string">"com.lx.entity.User"</span>,</span><br><span class="line">            <span class="attr">"userId"</span>: <span class="number">1</span>,</span><br><span class="line">            <span class="attr">"username"</span>: <span class="string">"李四"</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>3、使用GenericJackson2JsonRedisSerializer可以正常反序列化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">List&lt;User&gt; userListRedis = (List&lt;User&gt;) redisTemplate.opsForValue().get(<span class="string">"genericJackson2JsonRedisSerializer"</span>);</span><br><span class="line">userListRedis.forEach(u -&gt; System.out.println(JSON.toJSONString(u)));</span><br></pre></td></tr></table></figure><p>4、可以正常反序列化的原因<br>使用<code>GenericJackson2JsonRedisSerializer</code>序列化时，会保存序列化的对象的包名和类名，反序列化时以这个作为标示就可以反序列化成指定的对象。</p><p>5、也可以以JSON字符串保存</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">redisTemplate.opsForValue().set(<span class="string">"genericJackson2JsonRedisSerializer"</span>,JSON.toJSONString(userList),<span class="number">5</span>,TimeUnit.MINUTES);</span><br><span class="line"></span><br><span class="line">List&lt;User&gt; userListRedis = (List&lt;User&gt;) redisTemplate.opsForValue().get(<span class="string">"genericJackson2JsonRedisSerializer"</span>);</span><br><span class="line">userListRedis.forEach(u -&gt; System.out.println(JSON.toJSONString(u)));</span><br></pre></td></tr></table></figure><h3 id="四、GenericJackson2JsonRedisSerializer和Jackson2JsonRedisSerializerdo效率"><a href="#四、GenericJackson2JsonRedisSerializer和Jackson2JsonRedisSerializerdo效率" class="headerlink" title="四、GenericJackson2JsonRedisSerializer和Jackson2JsonRedisSerializerdo效率"></a>四、GenericJackson2JsonRedisSerializer和Jackson2JsonRedisSerializerdo效率</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">User user = <span class="keyword">new</span> User();</span><br><span class="line">user.setUserId(<span class="number">1</span>);</span><br><span class="line">user.setUsername(<span class="string">"李四"</span>);</span><br><span class="line">List&lt;User&gt; userList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++) &#123;</span><br><span class="line">  userList.add(user);</span><br><span class="line">&#125;</span><br><span class="line">redisTemplate.opsForValue().set(<span class="string">"serializer"</span>, JSON.toJSONString(userList),<span class="number">5</span>,TimeUnit.MINUTES);</span><br><span class="line"><span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">System.out.println(<span class="string">"Serializer序列化需要的时间:"</span> + (end - start));</span><br></pre></td></tr></table></figure><p>测试后:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">jackson2JsonRedisSerializer序列化需要的时间:687</span><br><span class="line">genericJackson2JsonRedisSerializer序列化需要的时间:22</span><br></pre></td></tr></table></figure><h3 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h3><ul><li><p>使用<code>Jackson2JsonRedisSerializer</code>需要指明序列化的类Class，可以使用<code>Obejct.class</code></p></li><li><p>使用<code>GenericJackson2JsonRedisSerializer</code>和<code>Jackson2JsonRedisSerializerdo</code>都可以正常序列化非泛型数组对象。<code>GenericJackson2JsonRedisSerializer</code>也可以正常反序列化非泛型数组对象，但是<code>Jackson2JsonRedisSerializerdo</code>因为“序列化带泛型的数据时，会以map的结构进行存储，反序列化时不能将map解析成对象”，所以不能反序列化，解决办法: 存储以JSON字符串存储</p></li><li><p>使用<code>GenericJacksonRedisSerializer</code>比<code>Jackson2JsonRedisSerializer</code>效率高</p></li><li><p><code>GenericJacksonRedisSerializer</code>和<code>Jackson2JsonRedisSerializer</code>都是以JSON格式去存储数据，都可以作为Redis的序列化方式</p></li></ul><h2 id="demo测试地址"><a href="#demo测试地址" class="headerlink" title="demo测试地址"></a>demo测试地址</h2><blockquote><p><a href="https://gitee.com/fengzxia/spring-boot-redis-cache/blob/master/src/test/java/com/lx/TestSerializer.java" target="_blank" rel="noopener">https://gitee.com/fengzxia/spring-boot-redis-cache/blob/master/src/test/java/com/lx/TestSerializer.java</a></p></blockquote><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><blockquote><p><a href="https://blog.csdn.net/neosmith/article/details/46800235" target="_blank" rel="noopener">https://blog.csdn.net/neosmith/article/details/46800235</a><br><a href="https://blog.csdn.net/bai_bug/article/details/81222519" target="_blank" rel="noopener">https://blog.csdn.net/bai_bug/article/details/81222519</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> Spring </category>
          
          <category> Redis </category>
          
          <category> Jackson </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 序列化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot+Redis作为二级缓存整合</title>
      <link href="/2019/04/11/2019-04-11-SpringBoot-Redis%E4%BD%9C%E4%B8%BA%E4%BA%8C%E7%BA%A7%E7%BC%93%E5%AD%98%E6%95%B4%E5%90%88/"/>
      <url>/2019/04/11/2019-04-11-SpringBoot-Redis%E4%BD%9C%E4%B8%BA%E4%BA%8C%E7%BA%A7%E7%BC%93%E5%AD%98%E6%95%B4%E5%90%88/</url>
      
        <content type="html"><![CDATA[<h2 id="一、redis简介"><a href="#一、redis简介" class="headerlink" title="一、redis简介"></a>一、redis简介</h2><h3 id="1、概述"><a href="#1、概述" class="headerlink" title="1、概述"></a>1、概述</h3><p>  Redis 是一个高性能的key-value数据库。 redis的出现，很大程度补偿了memcached这类key/value存储的不足，在部 分场合可以对关系数据库起到很好的补充作用。它提供了Java，C/C++，C#，PHP，JavaScript，Perl，Object-C，Python，Ruby，Erlang等客户端，使用很方便。</p><h3 id="2、优点"><a href="#2、优点" class="headerlink" title="2、优点"></a>2、优点</h3><ol><li>数据操作全在内存，读写性能强。</li><li>数据结构丰富，支持string，hash，list，set及zset(sorted set)。</li><li>支持主从复制，以及数据持久化等<h2 id="二、redis的搭建"><a href="#二、redis的搭建" class="headerlink" title="二、redis的搭建"></a>二、redis的搭建</h2><h3 id="1、安装"><a href="#1、安装" class="headerlink" title="1、安装"></a>1、安装</h3>按顺序执行如下命令:<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">wget http:&#x2F;&#x2F;download.redis.io&#x2F;releases&#x2F;redis-5.0.4.tar.gz</span><br><span class="line">tar xzf redis-5.0.4.tar.gz</span><br><span class="line">cd redis-5.0.4</span><br><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure><h3 id="2、测试"><a href="#2、测试" class="headerlink" title="2、测试"></a>2、测试</h3>开启服务<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-server</span><br></pre></td></tr></table></figure>启动客户机交互测试，默认6379端口，没有密码<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">redis-cli -p 6379</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; set k1 k2</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; get k1</span><br><span class="line">&quot;k2&quot;</span><br><span class="line">127.0.0.1:6379&gt;</span><br></pre></td></tr></table></figure></li></ol><h2 id="三、基本环境配置"><a href="#三、基本环境配置" class="headerlink" title="三、基本环境配置"></a>三、基本环境配置</h2><h4 id="1、pom依赖"><a href="#1、pom依赖" class="headerlink" title="1、pom依赖"></a>1、pom依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--指定jdk版本--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--统一编码格式--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">mybatis.version</span>&gt;</span>2.0.0<span class="tag">&lt;/<span class="name">mybatis.version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-cache<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mybatis.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2、yml配置"><a href="#2、yml配置" class="headerlink" title="2、yml配置"></a>2、yml配置</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">server:</span><br><span class="line">  port: 80</span><br><span class="line">spring:</span><br><span class="line">  http:</span><br><span class="line">    encoding:</span><br><span class="line">      charset: UTF-8</span><br><span class="line">  cache:</span><br><span class="line">    type: redis</span><br><span class="line">  redis:</span><br><span class="line">    host: 127.0.0.1</span><br><span class="line">    port: 9455</span><br><span class="line">    password: 123456</span><br><span class="line">  datasource:</span><br><span class="line">    driver-class-name: com.mysql.jdbc.Driver</span><br><span class="line">    username: root</span><br><span class="line">    password: root</span><br><span class="line">    url: jdbc:mysql:&#x2F;&#x2F;127.0.0.1:3306&#x2F;redis-cache?useSSL&#x3D;false</span><br><span class="line">logging:</span><br><span class="line">  level:</span><br><span class="line">    com.lx: debug</span><br></pre></td></tr></table></figure><h4 id="3、测试连接"><a href="#3、测试连接" class="headerlink" title="3、测试连接"></a>3、测试连接</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lx;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.StringRedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringRunner;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RunWith</span>(SpringRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">SpringBootTest</span></span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">RediscacheApplicationTest</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Autowired</span></span><br><span class="line">  <span class="keyword">private</span> StringRedisTemplate stringRedisTemplate;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Test</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    stringRedisTemplate.opsForValue().set(<span class="string">"k1"</span>, <span class="string">"v1"</span>);</span><br><span class="line">    System.out.println(stringRedisTemplate.opsForValue().get(<span class="string">"k1"</span>));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="四、三个基本缓存注解"><a href="#四、三个基本缓存注解" class="headerlink" title="四、三个基本缓存注解"></a>四、三个基本缓存注解</h2><h4 id="1、-Cacheable"><a href="#1、-Cacheable" class="headerlink" title="1、@Cacheable"></a>1、@Cacheable</h4><ul><li><p><code>@Cacheable</code>可以标记在一个方法上，也可以标记在一个类上。当标记在一个方法上时表示该方法是支持缓存的，当标记在一个类上时则表示该类所有的方法都是支持缓存的。对于一个支持缓存的方法，Spring会在其被调用后将其返回值缓存起来，以保证下次利用同样的参数来执行该方法时可以直接从缓存中获取结果，而不需要再次执行该方法。</p></li><li><p>判断缓存中如果存在则直接获取，不存在则新增</p><h4 id="2、-CachePut"><a href="#2、-CachePut" class="headerlink" title="2、@CachePut"></a>2、@CachePut</h4></li><li><p><code>@CachePut</code>可以声明一个方法支持缓存功能。与<code>@Cacheable</code>不同的是使用<code>@CachePut</code>标注的方法在执行前不会去检查缓存中是否存在之前执行过的结果，而是每次都会执行该方法，并将执行结果以键值对的形式存入指定的缓存中。</p></li><li><p>不判断是否新增，每次都将查询到的数据存入缓存中 </p></li></ul><h4 id="3、-CacheEvict"><a href="#3、-CacheEvict" class="headerlink" title="3、@CacheEvict"></a>3、@CacheEvict</h4><ul><li><p><code>@CacheEvict</code>是用来标注在需要清除缓存元素的方法或类上的。当标记在一个类上时表示其中所有的方法的执行都会触发缓存的清除操作。<code>@CacheEvict</code>可以指定的属性有<code>value、key、condition、allEntries和beforeInvocation</code>。</p></li><li><p>每次执行都会删除指定的缓存</p><h4 id="三者共有属性"><a href="#三者共有属性" class="headerlink" title="三者共有属性"></a>三者共有属性</h4></li><li><p><strong>value(cacheName)</strong><br><code>@Cacheable、@CachePut</code>标注时表示生成的缓存的名称，<code>@CacheEvict</code>标注时表示将要清空的缓存的名称。</p></li><li><p><strong>key</strong><br>在同一名称（类别）下的缓存，需要唯一的key值来标识唯一的缓存，如未指定则会使用默认策略生成的key。</p></li><li><p><strong>condition</strong><br>表示缓存操作发生的条件。</p></li></ul><h4 id="CacheEvict的allEntries和beforeInvocation属性"><a href="#CacheEvict的allEntries和beforeInvocation属性" class="headerlink" title="@CacheEvict的allEntries和beforeInvocation属性"></a>@CacheEvict的allEntries和beforeInvocation属性</h4><ul><li><p><strong>allEntries</strong><br>  allEntries是boolean类型，表示是否需要清除同一名称的缓存中的所有元素。默认为false，表示不需要。当指定了allEntries为true时，Spring Cache将忽略指定的key，清除所有同一名称的缓存。</p></li><li><p><strong>beforeInvocation</strong><br>  清除操作默认是在对应方法成功执行之后触发的，即方法如果因为抛出异常而未能成功返回时也不会触发清除操作。使用beforeInvocation可以改变触发清除操作的时间，当我们指定该属性值为true时，Spring会在调用该方法之前清除缓存中的指定元素。</p></li></ul><h4 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Cacheable</span>(cacheNames = <span class="string">"User"</span>, key = <span class="string">"#userId"</span>)</span><br><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/testCacheable/&#123;userId&#125;"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">testCacheable</span><span class="params">(@PathVariable(<span class="string">"userId"</span>)</span> Integer userId) </span>&#123;</span><br><span class="line">  <span class="comment">//方法体</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="五、demo地址"><a href="#五、demo地址" class="headerlink" title="五、demo地址"></a>五、demo地址</h2><blockquote><p><a href="https://gitee.com/fengzxia/spring-boot-redis-cache" target="_blank" rel="noopener">https://gitee.com/fengzxia/spring-boot-redis-cache</a>  </p></blockquote><p>实体类等内容不再展示， 这里只展示使用缓存注解的controller代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lx.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.lx.dao.UserDao;</span><br><span class="line"><span class="keyword">import</span> com.lx.entity.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cache.annotation.CacheEvict;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cache.annotation.CachePut;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cache.annotation.Cacheable;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PathVariable;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PostMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用户操作</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 段誉</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2019-04-11 9:52</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Autowired</span></span><br><span class="line">  <span class="keyword">private</span> UserDao userDao;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@PostMapping</span>(<span class="string">"user"</span>)</span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">userAdd</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> userDao.userInsert(user) != <span class="number">0</span> ? <span class="string">"success"</span> : <span class="string">"fail"</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@desc</span> 测试CachePut注解</span></span><br><span class="line"><span class="comment">   * 缓存名字为"User","userId"作为key</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@Author</span> 段誉</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@Date</span> 2019/4/11 9:56</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@method</span></span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="meta">@Cacheable</span>(cacheNames = <span class="string">"User"</span>, key = <span class="string">"#userId"</span>)</span><br><span class="line">  <span class="meta">@GetMapping</span>(<span class="string">"/testCacheable/&#123;userId&#125;"</span>)</span><br><span class="line">  <span class="function"><span class="keyword">public</span> User <span class="title">testCacheable</span><span class="params">(@PathVariable(<span class="string">"userId"</span>)</span> Integer userId) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> userDao.userQuery(userId);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@desc</span> 缓存名字为"User","userId"作为key</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@Author</span> 段誉</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@Date</span> 2019/4/11 9:56</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@method</span></span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="meta">@CachePut</span>(cacheNames = <span class="string">"User"</span>, key = <span class="string">"#userId"</span>)</span><br><span class="line">  <span class="meta">@GetMapping</span>(<span class="string">"/testCachePut/&#123;userId&#125;"</span>)</span><br><span class="line">  <span class="function"><span class="keyword">public</span> User <span class="title">testCachePut</span><span class="params">(@PathVariable(<span class="string">"userId"</span>)</span> Integer userId) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> userDao.userQuery(userId);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@desc</span> 测试CacheEvict注解清空指定用户缓存</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@Author</span> 段誉</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@Date</span> 2019/4/11 9:56</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@method</span></span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="meta">@CacheEvict</span>(cacheNames = <span class="string">"User"</span>, key = <span class="string">"#userId"</span>)</span><br><span class="line">  <span class="meta">@GetMapping</span>(<span class="string">"/testCacheEvict/&#123;userId&#125;"</span>)</span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">testCacheEvict</span><span class="params">(@PathVariable(<span class="string">"userId"</span>)</span> Integer userId) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"cache for "</span> + userId + <span class="string">" has been flushed"</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@desc</span> 测试CacheEvict注解的allEntries属性清空所有用户缓存</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@Author</span> 段誉</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@Date</span> 2019/4/11 9:56</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@method</span></span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="meta">@CacheEvict</span>(cacheNames = <span class="string">"User"</span>, allEntries = <span class="keyword">true</span>)</span><br><span class="line">  <span class="meta">@GetMapping</span>(<span class="string">"/testAllEntries"</span>)</span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">testAllEntries</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"All caches have been flushed"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>需要在<code>Application.class</code>类上添加<code>@EnableCaching</code>注解后才能使配置的缓存生效</strong></li></ul><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p><strong>返回的对象必须要有一个无参构造函数才能正常返回结果否则报如下错误</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[&#x2F;].[dispatcherServlet]:</span><br><span class="line">175 - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; </span><br><span class="line">nested exception is org.springframework.data.redis.serializer.SerializationException: Could not read JSON: </span><br><span class="line">Cannot construct instance of &#96;com.leimo.response.Result&#96; (no Creators, like default construct, exist): </span><br><span class="line">cannot deserialize from Object value (no delegate- or property-based Creator)</span><br></pre></td></tr></table></figure><h2 id="六、CacheManager的定制"><a href="#六、CacheManager的定制" class="headerlink" title="六、CacheManager的定制"></a>六、CacheManager的定制</h2><h3 id="1、未定制前"><a href="#1、未定制前" class="headerlink" title="1、未定制前"></a>1、未定制前</h3><p>当我们使用引入redis的starter时，容器中默认使用的是<code>RedisCacheManager</code>。它在操作redis时使用的是<code>RedisTemplate&lt;Object, Object&gt;</code>,默认采用JDK的序列化机制，例如redis中查看用户的缓存：<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pLmxvbGkubmV0LzIwMTkvMDQvMTEvNWNhZWFkNDU3ZjFhNi5wbmc" alt="UTOOLS1554951491908.png"></p><p>我们可以通过定制CacheManager改变采取的序列化机制。</p><h3 id="2、进行定制"><a href="#2、进行定制" class="headerlink" title="2、进行定制"></a>2、进行定制</h3><h4 id="配置类"><a href="#配置类" class="headerlink" title="配置类"></a>配置类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.cache.RedisCacheConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.cache.RedisCacheManager;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.connection.RedisConnectionFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.serializer.GenericJackson2JsonRedisSerializer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.serializer.RedisSerializationContext;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisConfig</span> </span>&#123;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@desc</span> 序列化缓存定制</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@Author</span> 段誉</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@Date</span> 2019/4/11 13:01</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@method</span></span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="meta">@Bean</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> RedisCacheManager <span class="title">jsonCacheManager</span><span class="params">(RedisConnectionFactory factory)</span> </span>&#123;</span><br><span class="line">    RedisCacheConfiguration config = RedisCacheConfiguration.defaultCacheConfig()</span><br><span class="line">            .serializeValuesWith(RedisSerializationContext.SerializationPair</span><br><span class="line">                .fromSerializer(<span class="keyword">new</span> GenericJackson2JsonRedisSerializer()));</span><br><span class="line">    <span class="keyword">return</span> RedisCacheManager.builder(factory)</span><br><span class="line">            .cacheDefaults(config)</span><br><span class="line">            .build();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>缓存之后查看<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pLmxvbGkubmV0LzIwMTkvMDQvMTEvNWNhZWNkNTMwM2IwNy5wbmc" alt="UTOOLS1554959697256.png"></p><p>到此，已经完成Json的序列化。其他配置可根据<code>RedisCacheConfiguration</code>中的不同方法配置。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> Spring </category>
          
          <category> SpringBoot </category>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二级缓存 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决java.lang.IllegalStateException: Unable to find a @SpringBootConfiguration, you need to use错误</title>
      <link href="/2019/04/11/2019-04-11-%E8%A7%A3%E5%86%B3java-lang-IllegalStateException-Unable-to-find-a-SpringBootConfiguration-you-need-to-use%E9%94%99%E8%AF%AF/"/>
      <url>/2019/04/11/2019-04-11-%E8%A7%A3%E5%86%B3java-lang-IllegalStateException-Unable-to-find-a-SpringBootConfiguration-you-need-to-use%E9%94%99%E8%AF%AF/</url>
      
        <content type="html"><![CDATA[<p>今天在学习springboot结合redis实现二级缓存时，项目依赖引入完成后想要测试redis是否可以连接成功，结果在测试时出现如下错误日志</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">java.lang.IllegalStateException: Unable to find a @SpringBootConfiguration, you need to use @ContextConfiguration or @SpringBootTest(classes&#x3D;...) with your test</span><br><span class="line"></span><br><span class="line">at org.springframework.util.Assert.state(Assert.java:73)</span><br><span class="line">at org.springframework.boot.test.context.SpringBootTestContextBootstrapper.getOrFindConfigurationClasses(SpringBootTestContextBootstrapper.java:243)</span><br><span class="line">at org.springframework.boot.test.context.SpringBootTestContextBootstrapper.processMergedContextConfiguration(SpringBootTestContextBootstrapper.java:155)</span><br><span class="line">at org.springframework.test.context.support.AbstractTestContextBootstrapper.buildMergedContextConfiguration(AbstractTestContextBootstrapper.java:395)</span><br><span class="line">at org.springframework.test.context.support.AbstractTestContextBootstrapper.buildDefaultMergedContextConfiguration(AbstractTestContextBootstrapper.java:312)</span><br><span class="line">at org.springframework.test.context.support.AbstractTestContextBootstrapper.buildMergedContextConfiguration(AbstractTestContextBootstrapper.java:265)</span><br><span class="line">at org.springframework.test.context.support.AbstractTestContextBootstrapper.buildTestContext(AbstractTestContextBootstrapper.java:108)</span><br><span class="line">at org.springframework.boot.test.context.SpringBootTestContextBootstrapper.buildTestContext(SpringBootTestContextBootstrapper.java:99)</span><br><span class="line">at org.springframework.test.context.TestContextManager.&lt;init&gt;(TestContextManager.java:139)</span><br><span class="line">at org.springframework.test.context.TestContextManager.&lt;init&gt;(TestContextManager.java:124)</span><br></pre></td></tr></table></figure><p>测试用例代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * redis连接测试</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 段誉</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2019-04-11 9:27</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RunWith</span>(SpringRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">SpringBootTest</span></span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">RediscacheApplicationTest</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Autowired</span></span><br><span class="line">  <span class="keyword">private</span> StringRedisTemplate stringRedisTemplate;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Test</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    stringRedisTemplate.opsForValue().set(<span class="string">"k1"</span>, <span class="string">"v1"</span>);</span><br><span class="line">    System.out.println(stringRedisTemplate.opsForValue().get(<span class="string">"k1"</span>));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><p>是因为我在搭建好springboot项目后没有创建<code>Application.java</code>项目启动类导致的</p><h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><p>创建完<code>Application.java</code>后，再重新运行测试类正常运行<br><img src="https://img-blog.csdnimg.cn/20190411094001939.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMzNDMwMDgz,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="参考博客"><a href="#参考博客" class="headerlink" title="参考博客"></a>参考博客</h2><blockquote><p><a href="https://blog.csdn.net/weixin_39220472/article/details/80206449" target="_blank" rel="noopener">https://blog.csdn.net/weixin_39220472/article/details/80206449</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> Spring </category>
          
          <category> BUG </category>
          
          <category> SpringBoot </category>
          
          <category> 异常 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IllegalStateException </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot邮件发送</title>
      <link href="/2019/04/08/2019-04-08-SpringBoot%E9%82%AE%E4%BB%B6%E5%8F%91%E9%80%81/"/>
      <url>/2019/04/08/2019-04-08-SpringBoot%E9%82%AE%E4%BB%B6%E5%8F%91%E9%80%81/</url>
      
        <content type="html"><![CDATA[<h2 id="添加依赖依赖"><a href="#添加依赖依赖" class="headerlink" title="添加依赖依赖"></a>添加依赖依赖</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--邮件发送需要的依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-mail<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--邮件发送模板需要的依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--web请求接口用到--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h2><p>在<code>application.yml</code>中配置发送邮件相关的参数，具体如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  mail:</span><br><span class="line">    host: smtp.qq.com</span><br><span class="line">    # 填入自己申请的邮箱信息</span><br><span class="line">    username:</span><br><span class="line">    password:</span><br><span class="line">    default-encoding: UTF-8</span><br></pre></td></tr></table></figure><p>重要的参数就这些，其它的使用默认的即可，以下为解释：</p><ul><li><code>host</code>: 邮箱服务器地址，这个根据自己使用的什么邮箱有区别，比如:  <ol><li><code>smtp.163.com</code>: 163邮箱</li><li><code>smtp.126.com</code>: 126邮箱</li><li><code>smtp.qq.com</code>: qq邮箱</li></ol></li><li><code>username</code>: 邮箱登录的用户名</li><li><code>password</code>: 第三方登陆授权码（需要自己在邮箱中申请）</li><li><code>default-encoding</code>: 编码方式</li></ul><h2 id="POP3-SMTP-服务"><a href="#POP3-SMTP-服务" class="headerlink" title="POP3/SMTP 服务"></a>POP3/SMTP 服务</h2><p>上面提到了授权码的概念，首先要明确一个概念就是授权码跟我们直接登陆邮箱的密码不是一样的，授权码可以理解为第三方客户端登陆邮箱的密码，要想获取授权码需要我们去自己所用邮箱的官网设置开启 <code>POP3/SMTP</code>以及<code>IMAP/SMTP</code>服务，我这里就以自己使用的<code>qq</code>账号为例介绍打开该服务以及获取授权码的步骤，如图：<br><img src="https://img-blog.csdnimg.cn/20190408205742344.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMzNDMwMDgz,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190408205750542.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMzNDMwMDgz,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>登陆qq邮箱，按照图示步骤进行操作，在选择了服务之后会弹窗展示授权码，这里的授权码就是上边配置文件中<code>password</code>需要填写的值(只写<code>IMAP/SMTP</code>的授权码就可以)。</p><h2 id="发送不同格式的邮件"><a href="#发送不同格式的邮件" class="headerlink" title="发送不同格式的邮件"></a>发送不同格式的邮件</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MailServiceImpl</span> <span class="keyword">implements</span> <span class="title">IMailService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 发送邮件接口</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="meta">@Autowired</span></span><br><span class="line">  <span class="keyword">private</span> JavaMailSender jms;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 发送模板邮件时解析模板</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="meta">@Autowired</span></span><br><span class="line">  <span class="keyword">private</span> TemplateEngine templateEngine;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 读取配置文件中的邮件发送者账号</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="meta">@Value</span>(<span class="string">"$&#123;spring.mail.username&#125;"</span>)</span><br><span class="line">  <span class="keyword">private</span> String from;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 简单文本邮件</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> toUser 邮件接收者</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">simpleMil</span><span class="params">(String toUser)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//初始化简单的邮件对象</span></span><br><span class="line">    SimpleMailMessage message = <span class="keyword">new</span> SimpleMailMessage();</span><br><span class="line">    <span class="comment">//邮件发送者</span></span><br><span class="line">    message.setFrom(from);</span><br><span class="line">    <span class="comment">//邮件接收者</span></span><br><span class="line">    message.setTo(toUser);</span><br><span class="line">    <span class="comment">//邮件标题</span></span><br><span class="line">    message.setSubject(<span class="string">"文字格式邮件"</span>);</span><br><span class="line">    <span class="comment">//邮件内容</span></span><br><span class="line">    message.setText(<span class="string">"文字格式内容"</span>);</span><br><span class="line">    <span class="comment">//发送邮件</span></span><br><span class="line">    jms.send(message);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * html邮件</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">htmlMail</span><span class="params">(String toUser)</span> <span class="keyword">throws</span> MessagingException </span>&#123;</span><br><span class="line">    MimeMessage message = jms.createMimeMessage();</span><br><span class="line">    MimeMessageHelper helper = <span class="keyword">new</span> MimeMessageHelper(message, <span class="keyword">true</span>);</span><br><span class="line">    helper.setFrom(from);</span><br><span class="line">    helper.setTo(toUser);</span><br><span class="line">    helper.setSubject(<span class="string">"html格式标题"</span>);</span><br><span class="line">    String content = <span class="string">"&lt;p style='color:yellow;'&gt;这是一封html格式的文件&lt;/p&gt;&lt;h1&gt;这是一封html格式的文件&lt;/h1&gt;"</span>;</span><br><span class="line">    <span class="comment">//true表示以html格式发送邮件</span></span><br><span class="line">    helper.setText(content, <span class="keyword">true</span>);</span><br><span class="line">    jms.send(message);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 带附件邮件</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">attachmentMail</span><span class="params">(String toUser)</span> <span class="keyword">throws</span> MessagingException </span>&#123;</span><br><span class="line">    MimeMessage message = jms.createMimeMessage();</span><br><span class="line">    MimeMessageHelper helper = <span class="keyword">new</span> MimeMessageHelper(message, <span class="keyword">true</span>);</span><br><span class="line">    helper.setFrom(from);</span><br><span class="line">    helper.setTo(toUser);</span><br><span class="line">    helper.setSubject(<span class="string">"带附件"</span>);</span><br><span class="line">    helper.setText(<span class="string">"这是一封带附件的邮件"</span>);</span><br><span class="line">    <span class="comment">//加载文件路径</span></span><br><span class="line">    FileSystemResource fs = <span class="keyword">new</span> FileSystemResource(<span class="keyword">new</span> File(<span class="keyword">this</span>.getClass().getResource(<span class="string">"/"</span>).getPath()</span><br><span class="line">            + <span class="string">"\\自己菜与大佬菜的区别.jpg"</span>));</span><br><span class="line">    <span class="comment">//添加附件</span></span><br><span class="line">    helper.addAttachment(<span class="string">"自己菜与大佬菜的区别.jpg"</span>, fs);</span><br><span class="line">    jms.send(message);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 带图片邮件</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">imgMail</span><span class="params">(String toUser)</span> <span class="keyword">throws</span> MessagingException </span>&#123;</span><br><span class="line">    MimeMessage message = jms.createMimeMessage();</span><br><span class="line">    MimeMessageHelper helper = <span class="keyword">new</span> MimeMessageHelper(message, <span class="keyword">true</span>);</span><br><span class="line">    helper.setFrom(from);</span><br><span class="line">    helper.setTo(toUser);</span><br><span class="line">    helper.setSubject(<span class="string">"带图片邮件"</span>);</span><br><span class="line">    <span class="comment">//设置资源的cid</span></span><br><span class="line">    String content = <span class="string">"&lt;html&gt;&lt;body&gt;小菜鸡图片&lt;img src='cid:img'/&gt;&lt;/body&gt;&lt;/html&gt;"</span>;</span><br><span class="line">    helper.setText(content, <span class="keyword">true</span>);</span><br><span class="line">    FileSystemResource fs = <span class="keyword">new</span> FileSystemResource(<span class="keyword">new</span> File(<span class="keyword">this</span>.getClass().getResource(<span class="string">"/"</span>).getPath()</span><br><span class="line">            + <span class="string">"\\自己菜与大佬菜的区别.jpg"</span>));</span><br><span class="line">    helper.addInline(<span class="string">"img"</span>, fs);</span><br><span class="line">    jms.send(message);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 模板邮件</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">templateMail</span><span class="params">(String toUser)</span> <span class="keyword">throws</span> MessagingException </span>&#123;</span><br><span class="line">    MimeMessage message = jms.createMimeMessage();</span><br><span class="line">    MimeMessageHelper helper = <span class="keyword">new</span> MimeMessageHelper(message, <span class="keyword">true</span>);</span><br><span class="line">    helper.setFrom(from);</span><br><span class="line">    helper.setTo(toUser);</span><br><span class="line">    helper.setSubject(<span class="string">"模板邮件"</span>);</span><br><span class="line">    Context context = <span class="keyword">new</span> Context();</span><br><span class="line">    context.setVariable(<span class="string">"username"</span>, <span class="string">"段誉"</span>);</span><br><span class="line">    <span class="comment">//thymeleaf模板默认会从src/resources/templates目录下寻找文件，填入我们定义的模板名，不需要写后缀</span></span><br><span class="line">    String template = templateEngine.process(<span class="string">"MailTemplate"</span>, context);</span><br><span class="line">    helper.setText(template, <span class="keyword">true</span>);</span><br><span class="line">    jms.send(message);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="模板邮件的模板"><a href="#模板邮件的模板" class="headerlink" title="模板邮件的模板"></a>模板邮件的模板</h3><p>接下来在<code>src/main/resources/templates</code>目录下新建<code>MailTemplate.html</code>文件，内容如下</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Insert title here<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>您好，<span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"$&#123;username&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span>:这是来自测试的邮件模板！<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="测试结果不再展示，更改配置后可自行测试"><a href="#测试结果不再展示，更改配置后可自行测试" class="headerlink" title="测试结果不再展示，更改配置后可自行测试"></a>测试结果不再展示，更改配置后可自行测试</h2><h2 id="demo地址"><a href="#demo地址" class="headerlink" title="demo地址"></a>demo地址</h2><blockquote><p><a href="https://gitee.com/fengzxia/spring-boot-mail" target="_blank" rel="noopener">https://gitee.com/fengzxia/spring-boot-mail</a></p></blockquote><h2 id="来源"><a href="#来源" class="headerlink" title="来源"></a>来源</h2><blockquote><p>作者：诺丨言<br>链接：<a href="https://juejin.im/post/5ca8578bf265da30893a052d" target="_blank" rel="noopener">https://juejin.im/post/5ca8578bf265da30893a052d</a><br>来源：掘金</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> Spring </category>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 邮件发送 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在docker中安装es（单机版）</title>
      <link href="/2019/04/04/2019-04-04-%E5%9C%A8docker%E4%B8%AD%E5%AE%89%E8%A3%85es%EF%BC%88%E5%8D%95%E6%9C%BA%E7%89%88%EF%BC%89/"/>
      <url>/2019/04/04/2019-04-04-%E5%9C%A8docker%E4%B8%AD%E5%AE%89%E8%A3%85es%EF%BC%88%E5%8D%95%E6%9C%BA%E7%89%88%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="如果不会安装docker可参考下边这篇博客"><a href="#如果不会安装docker可参考下边这篇博客" class="headerlink" title="如果不会安装docker可参考下边这篇博客"></a>如果不会安装docker可参考下边这篇博客</h3><blockquote><p>博客地址：<a href="http://www.geekfaith.com/article/173" target="_blank" rel="noopener">http://www.geekfaith.com/article/173</a></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 9200:9200 -p 9300:9300 -v &#x2F;opt&#x2F;myapp&#x2F;elasticsearch&#x2F;config&#x2F;elasticsearch.yml:&#x2F;usr&#x2F;share&#x2F;elasticsearch&#x2F;config&#x2F;elasticsearch.yml -v  &#x2F;opt&#x2F;myapp&#x2F;elasticsearch&#x2F;config&#x2F;jvm.options:&#x2F;usr&#x2F;share&#x2F;elasticsearch&#x2F;config&#x2F;jvm.options --name elasticsearch elasticsearch</span><br></pre></td></tr></table></figure><ul><li>-p：将docker镜像中的端口号映射宿主机器端口号，<code>宿主机器端口号:docker容器端口号</code> ，可写多个，如果多个端口号是连续的，可以直接用-连接，如：4560-4600:4560-4600</li><li>-v：将docker镜像中的文件映射到宿主机器指定的文件，可以是文件夹，<code>-v 宿主机文件:容器文件</code>映射后可直接修改宿主机上的文件就可以改变docker中的配置，也可写多个。docker镜像中软件的配置文档默认在<code>/usr/share”/{软件名}</code>下</li><li>–name：指定镜像名称,<code>--name 容器名称</code></li></ul><blockquote><p><strong>默认安装的是docker镜像中最新版本的es镜像，如果想要安装指定版本，需要先下载镜像，比如我想安装5.几版本的es<br>先通过docker下载该版本的镜像</strong></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull elasticsearch:5.6.9</span><br></pre></td></tr></table></figure><p>下载完镜像后再输入上边的安装命令，docker会使用已下载的镜像安装</p><h2 id="碰到的问题"><a href="#碰到的问题" class="headerlink" title="碰到的问题"></a>碰到的问题</h2><h3 id="1-只能访问9200端口，在项目中不能使用9300端口操作"><a href="#1-只能访问9200端口，在项目中不能使用9300端口操作" class="headerlink" title="1.只能访问9200端口，在项目中不能使用9300端口操作"></a>1.只能访问9200端口，在项目中不能使用9300端口操作</h3><p>期初以为是防火墙给拦截，后台查看防火墙发现并未被拦截，检查docker容器中es的配置文件，容器目录(<code>/usr/share/elasticsearch/config/elasticsearch.yml</code>)，使用vim查看文件发现只有一行配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http.host: 0.0.0.0</span><br></pre></td></tr></table></figure><p>这里只是设置了9200端口可以外网访问</p><p>还需要添加如下配置才能访问9300端口，添加后重启es即可访问</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">bootstrap.system_call_filter: false</span><br><span class="line">network.bind_host: 0.0.0.0</span><br><span class="line">network.publish_host: 填写docker容器的内网ip</span><br><span class="line">network.host: 0.0.0.0</span><br></pre></td></tr></table></figure><h3 id="配置过9300端口外网启动后，启动es可能会报如下错误"><a href="#配置过9300端口外网启动后，启动es可能会报如下错误" class="headerlink" title="配置过9300端口外网启动后，启动es可能会报如下错误"></a>配置过9300端口外网启动后，启动es可能会报如下错误</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">ERROR: [2] bootstrap checks failed</span><br><span class="line">ERROR: [2] bootstrap checks failed[1]: initial heap size [31457280] not equal to maximum heap size [480247808];</span><br><span class="line">this can cause resize pauses and prevents mlockall from locking the entire heap[2]: max virtual memory areas vm.max_map_count [65530] is too low, increase to </span><br><span class="line">at least [262144][2018-11-01T11:49:45,152][INFO ][o.e.n.Node               ] [qfspMqR] stopping ...2018-11-01 11:49:45,155 pool-1-thread-1 </span><br><span class="line">ERROR Unable to unregister MBeans java.security.AccessControlException: access denied (&quot;javax.management.MBeanServerPermission&quot; &quot;createMBeanServer&quot;)</span><br><span class="line">at java.security.AccessControlContext.checkPermission(AccessControlContext.java:472) at </span><br><span class="line">java.security.AccessController.checkPermission(AccessController.java:884) at java.lang.SecurityManager.checkPermission(SecurityManager.java:549) at </span><br><span class="line">java.lang.management.ManagementFactory.getPlatformMBeanServer(ManagementFactory.java:465) at </span><br><span class="line">org.apache.logging.log4j.core.jmx.Server.unregisterLoggerContext(Server.java:246) at org.apache.logging.log4j.core.LoggerContext.stop(LoggerContext.java:338) </span><br><span class="line">at org.apache.logging.log4j.core.LoggerContext$1.run(LoggerContext.java:279) at </span><br><span class="line">org.apache.logging.log4j.core.util.DefaultShutdownCallbackRegistry$RegisteredCancellable.run(DefaultShutdownCallbackRegistry.java:109) at </span><br><span class="line">org.apache.logging.log4j.core.util.DefaultShutdownCallbackRegistry.run(DefaultShutdownCallbackRegistry.java:74) at java.lang.Thread.run(Thread.java:748)</span><br></pre></td></tr></table></figure><p>这个是因为linux的单个进程的线程数不够，需要调大，临时加大的方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">sysctl -w vm.max_map_count&#x3D;262144</span><br><span class="line"></span><br><span class="line">#查看修改结果</span><br><span class="line">sysctl -a|grep vm.max_map_count</span><br><span class="line">示例：</span><br><span class="line">[root@localhost config]# sysctl -a|grep vm.max_map_count</span><br><span class="line">vm.max_map_count &#x3D; 262144</span><br></pre></td></tr></table></figure><p>永久修改方法，按照如下命令一次输入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">cat &#x2F;etc&#x2F;sysctl.conf | grep -v &quot;vm.max_map_count&quot; &gt; &#x2F;tmp&#x2F;system_sysctl.conf</span><br><span class="line"></span><br><span class="line">echo &quot;vm.max_map_count&#x3D;262144&quot; &gt;&gt; &#x2F;tmp&#x2F;system_sysctl.conf</span><br><span class="line"></span><br><span class="line">mv &#x2F;tmp&#x2F;system_sysctl.conf &#x2F;etc&#x2F;sysctl.conf    #会提示是否覆盖，输入”y“即可</span><br><span class="line">然后输入命令更新配置</span><br><span class="line">cat &#x2F;etc&#x2F;sysctl.conf</span><br><span class="line"></span><br><span class="line">sysctl -p</span><br></pre></td></tr></table></figure><h4 id="看上边的日志，可以发现还报一个错误"><a href="#看上边的日志，可以发现还报一个错误" class="headerlink" title="看上边的日志，可以发现还报一个错误"></a>看上边的日志，可以发现还报一个错误</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bootstrap checks failed[1]: initial heap size [31457280] not equal to maximum heap size [480247808];</span><br></pre></td></tr></table></figure><p>因为服务器内存不够，es默认的jvm分配过多,修改<code>/usr/share/elasticsearch/config/jvm.options</code>(容器目录)的-Xms和-Xmx,默认是4g</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-Xms256m</span><br><span class="line">-Xmx256m</span><br></pre></td></tr></table></figure><p>修改后重启即可使用</p><h3 id="进入docker容器命令"><a href="#进入docker容器命令" class="headerlink" title="进入docker容器命令"></a>进入docker容器命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec -i -t 容器名 bash</span><br></pre></td></tr></table></figure><h3 id="docker中默认未安装vim编辑器，需要自己下载"><a href="#docker中默认未安装vim编辑器，需要自己下载" class="headerlink" title="docker中默认未安装vim编辑器，需要自己下载"></a>docker中默认未安装vim编辑器，需要自己下载</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get install vim</span><br></pre></td></tr></table></figure><p>如果安装时提示如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Reading package lists... Done</span><br><span class="line">        Building dependency tree       </span><br><span class="line">        Reading state information... Done</span><br><span class="line">        E: Unable to locate package vim</span><br></pre></td></tr></table></figure><p>这时候需要敲：<code>apt-get update</code>，这个命令的作用是：同步<code>/etc/apt/sources.list</code>和<code>/etc/apt/sources.list.d</code>中列出的源的索引，这样才能获取到最新的软件包。<br>然后再输入<code>apt-get install vim</code>就可安装成功</p><h3 id="查看docker容器ip"><a href="#查看docker容器ip" class="headerlink" title="查看docker容器ip"></a>查看docker容器ip</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker inspect &#123;容器名&#125; | grep IPAddress</span><br></pre></td></tr></table></figure><h3 id="查看启动日志"><a href="#查看启动日志" class="headerlink" title="查看启动日志"></a>查看启动日志</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker logs -f --tail&#x3D;10 &#123;容器名称&#125;</span><br></pre></td></tr></table></figure><p>查看指定docker容器的日志，ctrl+c 结束查看</p><ul><li><code>–tail</code>：从倒数第几行开始查看</li><li><code>-f</code>：带上日志时间查看</li></ul>]]></content>
      
      
      <categories>
          
          <category> DB </category>
          
          <category> ELK </category>
          
          <category> NoSQL </category>
          
          <category> Elasticsearch </category>
          
          <category> Docker </category>
          
          <category> Elasticsearch </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>360浏览器兼容模式下ajax请求第二次访问，不会请求接口问题</title>
      <link href="/2019/04/04/2019-04-04-360%E6%B5%8F%E8%A7%88%E5%99%A8%E5%85%BC%E5%AE%B9%E6%A8%A1%E5%BC%8F%E4%B8%8Bajax%E8%AF%B7%E6%B1%82%E7%AC%AC%E4%BA%8C%E6%AC%A1%E8%AE%BF%E9%97%AE%EF%BC%8C%E4%B8%8D%E4%BC%9A%E8%AF%B7%E6%B1%82%E6%8E%A5%E5%8F%A3%E9%97%AE%E9%A2%98/"/>
      <url>/2019/04/04/2019-04-04-360%E6%B5%8F%E8%A7%88%E5%99%A8%E5%85%BC%E5%AE%B9%E6%A8%A1%E5%BC%8F%E4%B8%8Bajax%E8%AF%B7%E6%B1%82%E7%AC%AC%E4%BA%8C%E6%AC%A1%E8%AE%BF%E9%97%AE%EF%BC%8C%E4%B8%8D%E4%BC%9A%E8%AF%B7%E6%B1%82%E6%8E%A5%E5%8F%A3%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h2 id="bug原因"><a href="#bug原因" class="headerlink" title="bug原因"></a>bug原因</h2><p>代码如下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">    url: <span class="string">'$&#123;root&#125;/ajax/user/or_shop_and_elect'</span>,</span><br><span class="line">    dataType: <span class="string">'json'</span>,</span><br><span class="line">    <span class="keyword">async</span>: <span class="literal">false</span>,</span><br><span class="line">    success: <span class="function"><span class="keyword">function</span> (<span class="params">rs</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> rs !== <span class="string">'boolean'</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (rs.code === <span class="number">30000</span>) &#123;</span><br><span class="line">                <span class="built_in">window</span>.location.href =</span><br><span class="line">                        $&#123;root&#125;respMsg.data</span><br><span class="line">                        + <span class="string">"?skipUrl=$&#123;root&#125;/web/user/user_center"</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (rs) &#123;</span><br><span class="line">            $.askAlert(</span><br><span class="line">                    <span class="string">'$&#123;root&#125;/web/elect_center/save_elect'</span>,</span><br><span class="line">                    <span class="string">'$&#123;root&#125;/web/company/open_free_shop'</span>);</span><br><span class="line">            e.preventDefault();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>在360浏览器兼容模式下，页面通过ajax方式请求一个接口时，会将返回的结果给缓存，当第二次去请求的时候不会调用后台的接口，这就导致了当我第一次访问过此接口后返回true，当我将结果修改为false是，返回的仍是true而不是false</p><h4 id="360的兼容模式默认是IE，GET请求有缓存。"><a href="#360的兼容模式默认是IE，GET请求有缓存。" class="headerlink" title="360的兼容模式默认是IE，GET请求有缓存。"></a>360的兼容模式默认是IE，GET请求有缓存。</h4><h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><p>解决办法：</p><ul><li>第一种：在ajax请求的时候添加参数<code>cache: false</code></li><li>第二种：将接口改为使用post请求</li><li>第三种：在url后边拼一个时间戳，写法如下：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">url: <span class="string">'$&#123;root&#125;/ajax/user/or_shop_and_elect?t='</span> + <span class="built_in">Date</span>.now()</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
          <category> Ajax </category>
          
          <category> BUG </category>
          
          <category> 接口 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 浏览器缓存 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker将服务器上的kibana容器打包并导入</title>
      <link href="/2019/04/04/2019-04-04-docker%E5%B0%86%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A%E7%9A%84kibana%E5%AE%B9%E5%99%A8%E6%89%93%E5%8C%85%E5%B9%B6%E5%AF%BC%E5%85%A5/"/>
      <url>/2019/04/04/2019-04-04-docker%E5%B0%86%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A%E7%9A%84kibana%E5%AE%B9%E5%99%A8%E6%89%93%E5%8C%85%E5%B9%B6%E5%AF%BC%E5%85%A5/</url>
      
        <content type="html"><![CDATA[<p>之所以用到容器打包是因为之前在kibana中安装x-pack的时候要求服务器内存必须在2G以上，在安装kibana的服务器上内存不够只有2G，无法安装。只能是在本地使用虚拟机设置足够的内存进行安装。</p><h3 id="注意：在导入镜像后必须安照4、5命令进行操作一次否则docker容器无法启动成功，这个点很坑，找了很久才解决"><a href="#注意：在导入镜像后必须安照4、5命令进行操作一次否则docker容器无法启动成功，这个点很坑，找了很久才解决" class="headerlink" title="注意：在导入镜像后必须安照4、5命令进行操作一次否则docker容器无法启动成功，这个点很坑，找了很久才解决"></a>注意：在导入镜像后必须安照4、5命令进行操作一次否则docker容器无法启动成功，这个点很坑，找了很久才解决</h3><h2 id="1-将虚拟机上的kibana容器导出，然后拷贝到服务器上"><a href="#1-将虚拟机上的kibana容器导出，然后拷贝到服务器上" class="headerlink" title="1.将虚拟机上的kibana容器导出，然后拷贝到服务器上"></a>1.将虚拟机上的kibana容器导出，然后拷贝到服务器上</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker export kibana &gt; &#x2F;opt&#x2F;myapp&#x2F;kibana.tar      #中间的kibana可以替换为kibana的容器id</span><br></pre></td></tr></table></figure><h2 id="2-在虚拟机上输入docker-inspect-kibana-查看kibana的信息"><a href="#2-在虚拟机上输入docker-inspect-kibana-查看kibana的信息" class="headerlink" title="2.在虚拟机上输入docker inspect kibana 查看kibana的信息"></a>2.在虚拟机上输入docker inspect kibana 查看kibana的信息</h2><p><img src="https://img-blog.csdnimg.cn/2019040416582670.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMzNDMwMDgz,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>需要将红框中的<strong>Env、Cmd、Entrypoint</strong>这三个信息复制保存，稍后在服务上导入镜像时用到</p><h2 id="3-导入镜像-并指定镜像名称为kibana-x-pack"><a href="#3-导入镜像-并指定镜像名称为kibana-x-pack" class="headerlink" title="3.导入镜像,并指定镜像名称为kibana-x-pack"></a>3.导入镜像,并指定镜像名称为kibana-x-pack</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker import - kibana-x-pack &lt; kibana.tar</span><br></pre></td></tr></table></figure><h2 id="4-在服务器上创建个kibana文件夹，然后进入，在里边创建Dockerfile文件，添加上边第2步保存的信息"><a href="#4-在服务器上创建个kibana文件夹，然后进入，在里边创建Dockerfile文件，添加上边第2步保存的信息" class="headerlink" title="4.在服务器上创建个kibana文件夹，然后进入，在里边创建Dockerfile文件，添加上边第2步保存的信息"></a>4.在服务器上创建个kibana文件夹，然后进入，在里边创建Dockerfile文件，添加上边第2步保存的信息</h2><p><img src="https://img-blog.csdnimg.cn/20190404170006661.png" alt="在这里插入图片描述"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">FROM            格式为 FROM &lt;image&gt;或FROM &lt;image&gt;:&lt;tag&gt;。</span><br><span class="line"></span><br><span class="line">ENV             格式为 ENV &lt;key&gt; &lt;value&gt;。 指定一个容器环境变量。</span><br><span class="line"></span><br><span class="line">CMD             支持三种格式</span><br><span class="line">CMD [&quot;executable&quot;,&quot;param1&quot;,&quot;param2&quot;] 使用 exec 执行，推荐方式；</span><br><span class="line">CMD command param1 param2 在 &#x2F;bin&#x2F;sh 中执行，提供给需要交互的应用；</span><br><span class="line">CMD [&quot;param1&quot;,&quot;param2&quot;] 提供给 ENTRYPOINT 的默认参数；</span><br><span class="line"></span><br><span class="line">ENTRYPOINT      两种格式：</span><br><span class="line">ENTRYPOINT [&quot;executable&quot;, &quot;param1&quot;, &quot;param2&quot;]</span><br><span class="line">ENTRYPOINT command param1 param2（shell中执行）。</span><br><span class="line">配置容器启动后执行的命令，并且不可被 docker run 提供的参数覆盖。</span><br><span class="line">每个 Dockerfile 中只能有一个 ENTRYPOINT，当指定多个时，只有最后一个起效。</span><br></pre></td></tr></table></figure><h2 id="5-输入docker-build构建kibana镜像"><a href="#5-输入docker-build构建kibana镜像" class="headerlink" title="5.输入docker build构建kibana镜像"></a>5.输入docker build构建kibana镜像</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -t kibana-x-pack .</span><br></pre></td></tr></table></figure><h2 id="6-使用docker-run命令启动，启动成功说明配置成功"><a href="#6-使用docker-run命令启动，启动成功说明配置成功" class="headerlink" title="6.使用docker run命令启动，启动成功说明配置成功"></a>6.使用docker run命令启动，启动成功说明配置成功</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d kibana-x-pack -p 5601:5601 --name kibana</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ELK </category>
          
          <category> Kibana </category>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 迁移 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>破解elasticsearch的x-pack</title>
      <link href="/2019/04/04/2019-04-04-%E7%A0%B4%E8%A7%A3elasticsearch%E7%9A%84x-pack/"/>
      <url>/2019/04/04/2019-04-04-%E7%A0%B4%E8%A7%A3elasticsearch%E7%9A%84x-pack/</url>
      
        <content type="html"><![CDATA[<p>我安装的es版本是5.6的，其他版本同样适用：</p><h2 id="1-给ElasricSearch和Kibana安装X-Pack"><a href="#1-给ElasricSearch和Kibana安装X-Pack" class="headerlink" title="1.给ElasricSearch和Kibana安装X-Pack"></a>1.给ElasricSearch和Kibana安装X-Pack</h2><h3 id="1-ElasticSearch安装X-Pack"><a href="#1-ElasticSearch安装X-Pack" class="headerlink" title="1.ElasticSearch安装X-Pack"></a>1.ElasticSearch安装X-Pack</h3><p>进入es的bin目录，执行下边的命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.&#x2F;elasticsearch-plugin install x-pack                  #在线安装</span><br></pre></td></tr></table></figure><p>在线安装可能会很慢，建议使用离线安装，官网下载地址：<a href="https://artifacts.elastic.co/downloads/packs/x-pack/x-pack-5.6.13.zip" target="_blank" rel="noopener">https://artifacts.elastic.co/downloads/packs/x-pack/x-pack-5.6.13.zip</a><br>我下载好的压缩文件在<code>/opt/myapp</code>目录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.&#x2F;elasticsearch-plugin install file:&#x2F;&#x2F;&#x2F;opt&#x2F;myapp&#x2F;x-pack-5.6.12.zip            #离线安装</span><br></pre></td></tr></table></figure><p>安装成功后，需要先禁用x-pack的权限功能，打开es的配置文件，<code>./config/elasticsearch.yml</code>,在末尾添加</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#禁用权限功能</span><br><span class="line">xpack.security.enabled: false</span><br></pre></td></tr></table></figure><h3 id="2-kibana安装X-Pack"><a href="#2-kibana安装X-Pack" class="headerlink" title="2.kibana安装X-Pack"></a>2.kibana安装X-Pack</h3><ul><li><strong>kibana在安装X-Pack时，服务器内存必须大于2G才可以安装成功</strong><br>同ElasticSearch一样，进入kibana的bin目录安装，下载的x-pack离线文件中包含了elasticsearch和kibana的x-pack插件，所以kibana在安装的时候不需要再进行下载<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">.&#x2F;kibana-plugin install x-pack                   #在线安装</span><br><span class="line">.&#x2F;kibana-plugin install file:&#x2F;&#x2F;&#x2F;opt&#x2F;myapp&#x2F;x-pack-5.6.12.zip    #离线安装</span><br></pre></td></tr></table></figure></li></ul><h2 id="2-替换X-Pack文件"><a href="#2-替换X-Pack文件" class="headerlink" title="2.替换X-Pack文件"></a>2.替换X-Pack文件</h2><p>安装成功后，进入es的<code>./plugins/x-pack</code>目录找到<code>x-pack-5.6.9.jar</code>这个jar包,用解压工具打开，分别进入到<br><code>org\elasticsearch\license</code>目录和<code>org\elasticsearch\xpack</code>找到<code>LicenseVerifier</code>、<code>XPackBuild.class</code>这两个文件替换，使用<strong>下边的项目</strong>按照jar包中的路径进行调整包路径，然后编辑把这两个文件替换置x-pack-5.6.9.jar包中</p><blockquote><p><a href="https://gitee.com/fengzxia/es_crack_x_pack" target="_blank" rel="noopener">https://gitee.com/fengzxia/es_crack_x_pack</a></p></blockquote><h2 id="3-去官网申请license证书"><a href="#3-去官网申请license证书" class="headerlink" title="3.去官网申请license证书"></a>3.去官网申请license证书</h2><blockquote><p><a href="https://license.elastic.co/registration" target="_blank" rel="noopener">https://license.elastic.co/registration</a></p></blockquote><ol><li>邮箱认真写，用来接收json文件的</li><li>country写china,其它都可以随便写</li><li>点击申请后邮箱马上会收到一个证书JSON文件</li></ol><p>下载证书json文件后修改以下几个内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1. &quot;type&quot;:&quot;basic&quot; 替换为 “type”:&quot;platinum&quot; # 基础版变更为铂金版</span><br><span class="line">2. &quot;expiry_date_in_millis&quot;:1561420799999 替换为 &quot;expiry_date_in_millis&quot;:3107746200000# 1年变为50年</span><br></pre></td></tr></table></figure><h2 id="4-上传license证书"><a href="#4-上传license证书" class="headerlink" title="4.上传license证书"></a>4.上传license证书</h2><p>启动elasticsearch、kibana，根据邮件中发送的上传证书教程，将修改后的证书上传到es中，打开kibana进入Monitoring中查看激活日期，如下图已经变成到2068年表示激活成功<br><img src="https://img-blog.csdnimg.cn/20190404164935487.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMzNDMwMDgz,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="5-启用权限功能"><a href="#5-启用权限功能" class="headerlink" title="5.启用权限功能"></a>5.启用权限功能</h2><p>打开elasticsearch的<code>./config/elasticsearch.yml</code>文件将<code>xpack.security.enabled</code>设置为<code>true</code>，重启elasticserch，再访问kibana,就会跳转置登陆页面，然后输入默认的账号：<code>elastic</code>，密码：<code>changeme</code>，便能登陆成功<br><img src="https://img-blog.csdnimg.cn/20190404165127431.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMzNDMwMDgz,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="6-破解在docker中安装的elasticsearch和kibana的X-Pack"><a href="#6-破解在docker中安装的elasticsearch和kibana的X-Pack" class="headerlink" title="6.破解在docker中安装的elasticsearch和kibana的X-Pack"></a>6.破解在docker中安装的elasticsearch和kibana的X-Pack</h2><p>在docker中安装和直接在linux中安装操作一样，docker容器中的es和kibana配置都在<code>/usr/share/</code>目录下，相较于在linux中安装多了一步将修改后x-pack.jar拷贝至docker容器中：</p><h3 id="1-将宿主机的文件拷贝置容器中"><a href="#1-将宿主机的文件拷贝置容器中" class="headerlink" title="1.将宿主机的文件拷贝置容器中"></a>1.将宿主机的文件拷贝置容器中</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker cp 宿主机的文件路径 容器名称:容器的目录</span><br></pre></td></tr></table></figure><h3 id="2-将容器中的文件拷贝置宿主机上"><a href="#2-将容器中的文件拷贝置宿主机上" class="headerlink" title="2.将容器中的文件拷贝置宿主机上"></a>2.将容器中的文件拷贝置宿主机上</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker cp 容器名:容器中的文件路径 宿主机的文件目录</span><br></pre></td></tr></table></figure><h3 id="kibana在docker中安装，服务器内存必须大于2G才可以安装成功"><a href="#kibana在docker中安装，服务器内存必须大于2G才可以安装成功" class="headerlink" title="kibana在docker中安装，服务器内存必须大于2G才可以安装成功"></a>kibana在docker中安装，服务器内存必须大于2G才可以安装成功</h3><p><strong>注意：在kibana中安装x-pack时要求服务器内存必须要大于2G才可以安装，否则无法安装成功,内存不够请参考<a href="https://blog.csdn.net/qq_33430083/article/details/89028840" target="_blank" rel="noopener">docker将服务器上的kibana容器打包并导入这篇博客</a></strong></p>]]></content>
      
      
      <categories>
          
          <category> DB </category>
          
          <category> ELK </category>
          
          <category> NoSQL </category>
          
          <category> Elasticsearch </category>
          
          <category> Elasticsearch </category>
          
          <category> x-pack </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 破解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>idea减小启动项目时占用的内存</title>
      <link href="/2019/04/04/2019-04-04-idea%E5%87%8F%E5%B0%8F%E5%90%AF%E5%8A%A8%E9%A1%B9%E7%9B%AE%E6%97%B6%E5%8D%A0%E7%94%A8%E7%9A%84%E5%86%85%E5%AD%98/"/>
      <url>/2019/04/04/2019-04-04-idea%E5%87%8F%E5%B0%8F%E5%90%AF%E5%8A%A8%E9%A1%B9%E7%9B%AE%E6%97%B6%E5%8D%A0%E7%94%A8%E7%9A%84%E5%86%85%E5%AD%98/</url>
      
        <content type="html"><![CDATA[<p>有些时候在本地调试需要启动3，4个项目，但是因为电脑内存不足，在启动后很容易崩溃，在网上浏览找到了一种比较实用的解决方法：<br>很简单无论是jar项目还是war包项目只需要在项目运行的配置VM options添加<code>-Xmx128m -Xms64m -Xmn32m -Xss16m</code>这段代码就可以了<br><img src="https://img-blog.csdnimg.cn/20190404155320420.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMzNDMwMDgz,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>启动前<br><img src="https://img-blog.csdnimg.cn/20190404155650677.png" alt="在这里插入图片描述"><br>启动后<br><img src="https://img-blog.csdnimg.cn/20190404160017338.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMzNDMwMDgz,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>如上图所示连启动4个项目也就占用了10%的内存，我的电脑只有8G内存</p>]]></content>
      
      
      <categories>
          
          <category> idea </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 减小占用内存 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在img标签中没有写图片url但拼接了oss链接，导致接口被请求多次的bug</title>
      <link href="/2019/04/04/2019-04-04-%E5%9C%A8img%E6%A0%87%E7%AD%BE%E4%B8%AD%E6%B2%A1%E6%9C%89%E5%86%99%E5%9B%BE%E7%89%87url%E4%BD%86%E6%8B%BC%E6%8E%A5%E4%BA%86oss%E9%93%BE%E6%8E%A5%EF%BC%8C%E5%AF%BC%E8%87%B4%E6%8E%A5%E5%8F%A3%E8%A2%AB%E8%AF%B7%E6%B1%82%E5%A4%9A%E6%AC%A1%E7%9A%84bug/"/>
      <url>/2019/04/04/2019-04-04-%E5%9C%A8img%E6%A0%87%E7%AD%BE%E4%B8%AD%E6%B2%A1%E6%9C%89%E5%86%99%E5%9B%BE%E7%89%87url%E4%BD%86%E6%8B%BC%E6%8E%A5%E4%BA%86oss%E9%93%BE%E6%8E%A5%EF%BC%8C%E5%AF%BC%E8%87%B4%E6%8E%A5%E5%8F%A3%E8%A2%AB%E8%AF%B7%E6%B1%82%E5%A4%9A%E6%AC%A1%E7%9A%84bug/</url>
      
        <content type="html"><![CDATA[<h2 id="bug原因"><a href="#bug原因" class="headerlink" title="bug原因"></a>bug原因</h2><p>在编写浏览记录拦截器的时候，debug发现拦截器总是执行多次，而且第二次总是没有获取到产品id参数，起初以为是项目配置的原因导致拦截器初始化了多次，但检查配置没有，debug检查两次请求拦截器的内存地址都是一样的，所以不是因为配置的原因导致的后来在controller层断点才发现是因为接口被多次请求，然后猜测可能是页面上有哪些地方重复调用品牌详情接口了，通过F12看控制台的Network<br><img src="https://img-blog.csdnimg.cn/20190404154127316.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMzNDMwMDgz,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>发现品牌详情接口被多次请求，除了第一次以外，后边的请求拼接的参数是图片oss裁剪的链接。</p><ul><li><strong>原因是因为在测试阶段添加的一些测试数据没有图片，在页面渲染数据的时候图片链接没有进行非空判断直接写死了oss裁剪地址导致的，在img标签里以问号开头就会默认拼接当前页面路径，然后页面在加载img中的资源时又重新请求了接口导致的</strong><br><img src="https://img-blog.csdnimg.cn/20190404154627383.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMzNDMwMDgz,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2>在渲染img的src路径时添加判断图片链接为空时不添加oss裁剪</li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> Spring </category>
          
          <category> BUG </category>
          
          <category> 接口 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 接口多次请求 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cron表达式学习</title>
      <link href="/2019/04/04/2019-04-04-cron%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%AD%A6%E4%B9%A0/"/>
      <url>/2019/04/04/2019-04-04-cron%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<p>一个cron表达式有至少6个（也可能7个）有空格分隔的时间元素。按顺序依次为：</p><ul><li>秒（0~59）</li><li>分钟（0~59）</li><li>小时（0~23）</li><li>天（0~31）</li><li>月（0~11）</li><li>星期(写法1：1~7 1=SUN；写法2：SUN,MON,TUE,WED,THU,FRI,SAT)</li><li>年份(1970-2099)</li></ul><p>其中每个元素可以式一个值（如6），一个连续区间（9-12），一个间隔时间（8-18/4）（/4表示每隔4小时），一个列表（1,3,5），通配符。由于”日期”和”星期”这两个元素互斥的，必须要对其中一个设置。</p><p>配置实列：</p><ul><li>每个5秒执行一次: <code>/5 * ?</code></li><li>每隔1分钟执行一次: <code>0 /1 ?</code></li><li>每天上午10点，下午两点，4点: <code>0 0 10,14,16 ?</code></li><li>朝九晚五工作时间内每半小时: <code>0 0/30 9-17 ?</code></li><li>表示每个星期三中午12点: <code>0 0 12 ? * WED</code></li><li>每天中午12点触发: <code>0 0 12 ?</code></li><li>每天上午10:15触发(结尾有空格,为了方便看清加了引号): <code>&quot;0 15 10 ? &quot;</code></li><li>每天上午10:15触发: <code>0 15 10 ?</code></li><li>每天上午10:15触发: <code>0 15 10 ? *</code></li><li>2005年每天上午10:15触发: <code>0 15 10 ? 2005</code></li><li>在每天下午2点到下午2:59期间的每1分钟触发: <code>0 14 * ?</code></li><li>在每天下午2点到下午2:55期间的每5分钟触发: <code>0 0/5 14 ?</code></li><li>在每天下午2点到2:55期间和下午6点到6:55期间的每5分钟触发: <code>0 0/5 14,18 ?</code></li><li>在每天下午2点到下午2:05期间的每1分钟触发: <code>0 0-5 14 ?</code></li><li>每年三月的星期三的下午2:10和2:44触发: <code>0 10,44 14 ? 3 WED</code></li><li>周一至周五的上午10:15触发: <code>0 15 10 ? * MON-FRI</code></li><li>每月15日上午10:15触发: <code>0 15 10 15 * ?</code></li><li>每月最后一日的上午10:15触发: <code>0 15 10 L * ?</code></li><li>每月的最后一个星期五上午10:15触发: <code>0 15 10 ? * 6L</code></li><li>2002年至2005年的每月的最后一个星期五上午10:15触发: <code>0 15 10 ? * 6L 2002-2005</code></li><li>每月的第三个星期五上午10:15触发: <code>0 10 10 ? * 6#3</code></li></ul><p>有些子表达式能包含一些范围或列表<br>例如: 子表达式(星期)可以为 <code>MON-FRI</code>, <code>MON,WED,FRI</code>, <code>MON-WED,SAT</code>, <code>*</code>字符代表所有可能的值,<code>/</code>字符用来指定数值的增量</p><p>例如: 在子表达式(分钟)里的 <code>0/15</code> 表示从第0分钟开始，每15分钟在子表达式(分钟)里的 <code>3/20</code> 表示从第3分钟开始，每20分钟(它和<code>3,23,43</code>)的含义一样 <code>?</code> 字符仅被用于 “日期” 和 “星期” 两个子表达式，表示不指定值，当两个子表达式其中之一被指定了值以后，为了避免冲突，需要将另一个子表达式的值设置为<code>?</code></p><p><code>L</code> 字符仅被用于”日期”和”星期”两个子表达式，它是单词”last”的缩写如果在”L”前有具体的内容，它就具有其他的含义了。</p><p>例如: “6L” 表示这个月的倒数第6天 <strong>在使用“L”参数时，不要指定列表或范围，因为这会导致问题”W”字符代表着“平日(Mon-Fri)”，并且仅能用于日期中。它用来指定日离指定日最近的一个平日。大部分的商业处理都是基于工作周的，所以 W 字符可能是非常重要的</strong>  </p><p>例如，日期中的<code>15W</code>意味着“离该月15号的最近一个平日。”假如15号是星期六，那么trigger会在14号（星期五）触发，因为星期四比星期一离15号更近。C: 代表“Calendar”的意思。它的意思是计划所关联的日期，如果日期没有被关联，则相当于日历中所有日期。</p><p>例如，5C在日期字段就相当于日历5日以后的第一天。1C在星期字段中相当于星期日后的第一天</p><table><thead><tr><th>字段</th><th>允许值</th><th>允许的特殊字符</th></tr></thead><tbody><tr><td>秒</td><td>0~59</td><td>, - * /</td></tr><tr><td>分</td><td>0~59</td><td>, - * /</td></tr><tr><td>小时</td><td>0~23</td><td>, - * /</td></tr><tr><td>日期</td><td>1-31</td><td>, - * ? / L W C</td></tr><tr><td>月份</td><td>1<del>12或者JAN</del>DEC</td><td>, - * /</td></tr><tr><td>星期</td><td>1<del>7或者SUN</del>SAT</td><td>, - * ? / L C #</td></tr><tr><td>年(可选)</td><td>留空，1970~2099</td><td>, - * /</td></tr></tbody></table>]]></content>
      
      
      
        <tags>
            
            <tag> 定时任务 </tag>
            
            <tag> cron表达式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Boot实现定时任务的4种方式</title>
      <link href="/2019/04/04/2019-04-04-Spring-Boot%E5%AE%9E%E7%8E%B0%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1%E7%9A%844%E7%A7%8D%E6%96%B9%E5%BC%8F/"/>
      <url>/2019/04/04/2019-04-04-Spring-Boot%E5%AE%9E%E7%8E%B0%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1%E7%9A%844%E7%A7%8D%E6%96%B9%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="实现定时任务的几种方式"><a href="#实现定时任务的几种方式" class="headerlink" title="实现定时任务的几种方式"></a>实现定时任务的几种方式</h2><ul><li><p>Timer: 这是java自带的java.util.Timer类，这个类运行你调度一个java.util.TimerTask任务。使用这种方式可以让程序按照某一个频度执行，但不能在指定时间运行。一般用的较少。<strong>多线程并行处理定时任务，Timer运行多个TimeTask时，只要其中之一没有捕获抛出的异常，其它任务便会自动终止运行</strong></p></li><li><p>ScheduledExecutorService: 也是jdk自带的一个类；是基于线程池设计的定时任务类，每个调度任务都会分配到线程池中的一个线程去执行，<strong>任务并发执行，互不影响</strong></p></li><li><p>Spring Task: Spring3.0以后自带的task，可以将它看成一个轻量级的Quartz，而且使用起来比Quartz简单许多<strong>所有的定时任务都在同一线程上串行，想要异步执行需要自己添加线程池</strong></p></li><li><p>Quartz: 这是一个功能比较强大的调度器，可以让你的程序在指定时间执行，也可以按照某一个频度执行，配置起来稍显复杂</p><h3 id="使用Timer"><a href="#使用Timer" class="headerlink" title="使用Timer"></a>使用Timer</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestTimer</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    TimerTask timerTask = <span class="keyword">new</span> TimerTask() &#123;</span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"task run:"</span> + System.currentTimeMillis());</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">//多线程并行处理定时任务时，Timer运行多个TimeTask时，只要其中之一没有捕获抛出的异常，其它任务便会自动终止运行</span></span><br><span class="line">    <span class="comment">//并不推荐使用</span></span><br><span class="line">    Timer timer = <span class="keyword">new</span> Timer();</span><br><span class="line">    <span class="comment">//安排指定的任务在指定的时间开始进行重复的固定延迟执行，这里是延时10毫秒每3秒执行一次</span></span><br><span class="line">    timer.schedule(timerTask, <span class="number">10</span>, <span class="number">3000</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="使用ScheduledExecutorService"><a href="#使用ScheduledExecutorService" class="headerlink" title="使用ScheduledExecutorService"></a>使用ScheduledExecutorService</h3><p>该方法跟Timer类似</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestScheduledExecutorService</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    ScheduledExecutorService service = Executors.newSingleThreadScheduledExecutor();</span><br><span class="line">    <span class="comment">// 参数：1.任务体，2.首次执行的延时时间</span></span><br><span class="line">    <span class="comment">//      3.任务执行间隔，4.间隔时间单位</span></span><br><span class="line">    service.scheduleAtFixedRate(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"task ScheduledExecutorService:"</span> + System.currentTimeMillis());</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;, <span class="number">0</span>, <span class="number">3</span>, TimeUnit.SECONDS);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用Spring-Task"><a href="#使用Spring-Task" class="headerlink" title="使用Spring Task"></a>使用Spring Task</h3><p>在spring boot中我们可以直接使用注解的方式来实现定时任务，非常简单，需要的依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--通过注解的方式生成部分常用代码，减少重复代码编写--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>创建任务类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestSpringTask</span> </span>&#123;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 通过表达式来配置任务执行时间</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="meta">@Scheduled</span>(cron = <span class="string">"0/5 * * * * *"</span>)</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">scheduled</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    log.info(<span class="string">"=====&gt;&gt;&gt;&gt;&gt;使用cron:&#123;&#125;"</span>, System.currentTimeMillis());</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 按一定频率执行的定时任务</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="meta">@Scheduled</span>(fixedRate = <span class="number">5000</span>)</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">scheduled1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    log.info(<span class="string">"=====&gt;&gt;&gt;&gt;&gt;使用fixedRate:&#123;&#125;"</span>, System.currentTimeMillis());</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 功能同fixedRate，但是可以配合initialDelay属性设置任务延时执行</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="meta">@Scheduled</span>(fixedDelay = <span class="number">5000</span>)</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">scheduled2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    log.info(<span class="string">"=====&gt;&gt;&gt;&gt;&gt;使用fixedDelay:&#123;&#125;"</span>, System.currentTimeMillis());</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>Application</code>类上添加<code>@EnableScheduling</code>注解开启对定时任务的支持</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="comment">//开启对定时任务的支持(所有的定时任务都在同一线程上串行)</span></span><br><span class="line"><span class="meta">@EnableScheduling</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    SpringApplication.run(Application<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后启动项目查看打印</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">2019-04-03 11:15:10.001  INFO 9252 --- [   scheduling-1] com.lx.timer.springtask.TestSpringTask   : &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&gt;&gt;&gt;&gt;&gt;使用cron:1554261310001</span><br><span class="line">2019-04-03 11:15:12.209  INFO 9252 --- [   scheduling-1] com.lx.timer.springtask.TestSpringTask   : &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&gt;&gt;&gt;&gt;&gt;使用fixedRate:1554261312209</span><br><span class="line">2019-04-03 11:15:12.211  INFO 9252 --- [   scheduling-1] com.lx.timer.springtask.TestSpringTask   : &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&gt;&gt;&gt;&gt;&gt;使用fixedDelay:1554261312211</span><br><span class="line">2019-04-03 11:15:15.002  INFO 9252 --- [   scheduling-1] com.lx.timer.springtask.TestSpringTask   : &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&gt;&gt;&gt;&gt;&gt;使用cron:1554261315002</span><br></pre></td></tr></table></figure><p>可以看到三个定时任务都已经执行，并且使同一个线程中串行执行，如果只有一个定时任务，这样做肯定没问题，当定时任务增多，如果一个任务卡死，会导致其他任务也无法执行，所以我们需要修改为多线程执行</p><h4 id="修改Spring-Task为多线程执行"><a href="#修改Spring-Task为多线程执行" class="headerlink" title="修改Spring Task为多线程执行"></a>修改Spring Task为多线程执行</h4><p>新建一个AsyncConfig类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="comment">//开启异步事件的支持</span></span><br><span class="line"><span class="meta">@EnableAsync</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AsyncConfig</span> </span>&#123;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 以下参数均从yml配置文件中获取</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">  <span class="meta">@Value</span>(<span class="string">"$&#123;async.core-pool-size&#125;"</span>)</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> corePoolSize;</span><br><span class="line">  <span class="meta">@Value</span>(<span class="string">"$&#123;async.max-pool-size&#125;"</span>)</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> maxPoolSize;</span><br><span class="line">  <span class="meta">@Value</span>(<span class="string">"$&#123;async.queue-capacity&#125;"</span>)</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> quequeCapacity;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Bean</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Executor <span class="title">taskExecutor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ThreadPoolTaskExecutor executor = <span class="keyword">new</span> ThreadPoolTaskExecutor();</span><br><span class="line">    executor.setCorePoolSize(corePoolSize);</span><br><span class="line">    executor.setMaxPoolSize(maxPoolSize);</span><br><span class="line">    executor.setQueueCapacity(quequeCapacity);</span><br><span class="line">    executor.initialize();</span><br><span class="line">    <span class="keyword">return</span> executor;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后再定时任务的类或者方法上添加<code>@Async</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="comment">//对当前类开启异步（开启后每个方法的执行均在不同的线程中），也可以加在方法上</span></span><br><span class="line"><span class="meta">@Async</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestSpringTask</span> </span>&#123;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 通过表达式来配置任务执行时间</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="meta">@Scheduled</span>(cron = <span class="string">"0/5 * * * * *"</span>)</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">scheduled</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    log.info(<span class="string">"=====&gt;&gt;&gt;&gt;&gt;使用cron:&#123;&#125;"</span>, System.currentTimeMillis());</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 按一定频率执行的定时任务</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="meta">@Scheduled</span>(fixedRate = <span class="number">5000</span>)</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">scheduled1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    log.info(<span class="string">"=====&gt;&gt;&gt;&gt;&gt;使用fixedRate:&#123;&#125;"</span>, System.currentTimeMillis());</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 功能同fixedRate，但是可以配合initialDelay属性设置任务延时执行</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="meta">@Scheduled</span>(fixedDelay = <span class="number">5000</span>)</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">scheduled2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    log.info(<span class="string">"=====&gt;&gt;&gt;&gt;&gt;使用fixedDelay:&#123;&#125;"</span>, System.currentTimeMillis());</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重启项目，可以看到每个任务都是在不同的线程</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">2019-04-03 11:19:47.020  INFO 13420 --- [ taskExecutor-4] com.lx.timer.springtask.TestSpringTask   : &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&gt;&gt;&gt;&gt;&gt;使用fixedRate:1554261587020</span><br><span class="line">2019-04-03 11:19:47.024  INFO 13420 --- [ taskExecutor-5] com.lx.timer.springtask.TestSpringTask   : &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&gt;&gt;&gt;&gt;&gt;使用fixedDelay:1554261587024</span><br><span class="line">2019-04-03 11:19:50.002  INFO 13420 --- [ taskExecutor-6] com.lx.timer.springtask.TestSpringTask   : &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&gt;&gt;&gt;&gt;&gt;使用cron:1554261590002</span><br><span class="line">2019-04-03 11:19:52.020  INFO 13420 --- [ taskExecutor-7] com.lx.timer.springtask.TestSpringTask   : &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&gt;&gt;&gt;&gt;&gt;使用fixedRate:1554261592020</span><br><span class="line">2019-04-03 11:19:52.025  INFO 13420 --- [ taskExecutor-8] com.lx.timer.springtask.TestSpringTask   : &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&gt;&gt;&gt;&gt;&gt;使用fixedDelay:1554261592025</span><br></pre></td></tr></table></figure><h4 id="执行时间的配置"><a href="#执行时间的配置" class="headerlink" title="执行时间的配置"></a>执行时间的配置</h4><p>在上面的定时任务中，我们在方法上使用<code>@Scheduled</code>注解来设置任务的执行时间，并且使用3三种属性配置方式</p><ul><li>fixedRate: 定义一个按照一定频率执行的定时任务</li><li>fixedDelay: 定义一个按一定频率执行的定时任务，与上边不同的是，该属性可以配合initialDelay，定义该任务延迟执行时间</li><li>cron: 通过表达式来配置任务执行时间</li></ul><h4 id="cron表达式详细参考下边的博客"><a href="#cron表达式详细参考下边的博客" class="headerlink" title="cron表达式详细参考下边的博客"></a>cron表达式详细参考下边的博客</h4><blockquote><p><a href="https://blog.csdn.net/qq_33430083/article/details/89024540" target="_blank" rel="noopener">https://blog.csdn.net/qq_33430083/article/details/89024540</a></p></blockquote><h3 id="整合Quartz"><a href="#整合Quartz" class="headerlink" title="整合Quartz"></a>整合Quartz</h3><p>添加依赖<br>如果SpringBoot版本是2.0.0以后的，则在spring-boot-starter中已经包含了quart的依赖，则可以直接使用spring-boot-starter-quartz依赖:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-quartz<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如果是1.5.9则要使用以下添加依赖:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.quartz-scheduler<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>quartz<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context-support<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>注意：如果项目中springboot使用的是springboot2.0以后的版本，去引用<code>quartz</code>和<code>spring-context-support</code>包的话，quartz任务并不会执行</strong></p><h4 id="1-创建任务类"><a href="#1-创建任务类" class="headerlink" title="1.创建任务类"></a>1.创建任务类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestQuartz</span> <span class="keyword">extends</span> <span class="title">QuartzJobBean</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 执行定时任务</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> jobExecutionContext</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@throws</span> JobExecutionException</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">executeInternal</span><span class="params">(JobExecutionContext jobExecutionContext)</span> <span class="keyword">throws</span> JobExecutionException </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"quartz task"</span> + System.currentTimeMillis());</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-创建配置类QuartzConfig"><a href="#2-创建配置类QuartzConfig" class="headerlink" title="2.创建配置类QuartzConfig"></a>2.创建配置类QuartzConfig</h4><p>执行方式有两种写法一种是使用<code>CronScheduleBuilder</code>类执行cron表达式<br>另一种是使用<code>SimpleScheduleBuilder</code>类指定间隔时间</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QuartzConfig</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Bean</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> JobDetail <span class="title">teatQuartzDetail</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> JobBuilder.newJob(TestQuartz<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line">            .withIdentity("testQuartz").storeDurably().build();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Bean</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Trigger <span class="title">testQuartzTrigger</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//使用cron表达式</span></span><br><span class="line">    CronScheduleBuilder cronScheduleBuilder = CronScheduleBuilder.cronSchedule(<span class="string">"*/5 * * * * ?"</span>);</span><br><span class="line">    <span class="comment">//指定间隔时间</span></span><br><span class="line"><span class="comment">//    SimpleScheduleBuilder scheduleBuilder = SimpleScheduleBuilder.simpleSchedule()</span></span><br><span class="line"><span class="comment">//            //设置时间周期单位秒，也可选择其他函数</span></span><br><span class="line"><span class="comment">//            .withIntervalInSeconds(3)</span></span><br><span class="line"><span class="comment">//            .repeatForever();</span></span><br><span class="line">    <span class="keyword">return</span> TriggerBuilder.newTrigger().forJob(teatQuartzDetail())</span><br><span class="line">            .withIdentity(<span class="string">"testQuartz"</span>)</span><br><span class="line">            .withSchedule(cronScheduleBuilder)</span><br><span class="line">            .build();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-启动项目"><a href="#3-启动项目" class="headerlink" title="3.启动项目"></a>3.启动项目</h4><p>控制台打印如下，配置成功</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">quartz task1554273605007</span><br><span class="line">quartz task1554273610000</span><br><span class="line">quartz task1554273615000</span><br></pre></td></tr></table></figure><h2 id="Spring-Task和Quarz的区别"><a href="#Spring-Task和Quarz的区别" class="headerlink" title="Spring Task和Quarz的区别"></a>Spring Task和Quarz的区别</h2><p>Quartz在项目启动的时候会执行，使用注解的方式会在项目启动完成后时间算起执行，少一次执行调度</p><h2 id="Demo地址"><a href="#Demo地址" class="headerlink" title="Demo地址"></a>Demo地址</h2><blockquote><p><a href="https://gitee.com/fengzxia/spring-boot-timer-learn" target="_blank" rel="noopener">https://gitee.com/fengzxia/spring-boot-timer-learn</a></p></blockquote><h2 id="参考博客地址"><a href="#参考博客地址" class="headerlink" title="参考博客地址"></a>参考博客地址</h2><blockquote><p><a href="https://juejin.im/post/5ca24fb1e51d454a490a4809?utm_source=gold_browser_extension" target="_blank" rel="noopener">https://juejin.im/post/5ca24fb1e51d454a490a4809?utm_source=gold_browser_extension</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> Spring </category>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 定时任务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>spring-boot集成redis实现消息发布订阅模式，以及多个订阅模式的实现</title>
      <link href="/2019/03/28/2019-03-28-spring-boot%E9%9B%86%E6%88%90redis%E5%AE%9E%E7%8E%B0%E6%B6%88%E6%81%AF%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85%E6%A8%A1%E5%BC%8F%EF%BC%8C%E4%BB%A5%E5%8F%8A%E5%A4%9A%E4%B8%AA%E8%AE%A2%E9%98%85%E6%A8%A1%E5%BC%8F%E7%9A%84%E5%AE%9E%E7%8E%B0/"/>
      <url>/2019/03/28/2019-03-28-spring-boot%E9%9B%86%E6%88%90redis%E5%AE%9E%E7%8E%B0%E6%B6%88%E6%81%AF%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85%E6%A8%A1%E5%BC%8F%EF%BC%8C%E4%BB%A5%E5%8F%8A%E5%A4%9A%E4%B8%AA%E8%AE%A2%E9%98%85%E6%A8%A1%E5%BC%8F%E7%9A%84%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<ul><li><strong>demo地址</strong><blockquote><p><a href="https://gitee.com/fengzxia/springboot-redis-queue" target="_blank" rel="noopener">https://gitee.com/fengzxia/springboot-redis-queue</a></p></blockquote><h2 id="1-需要的依赖"><a href="#1-需要的依赖" class="headerlink" title="1.需要的依赖"></a>1.需要的依赖</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">  &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;spring-boot-starter&lt;&#x2F;artifactId&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">  &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;spring-boot-starter-data-redis&lt;&#x2F;artifactId&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure><h2 id="2-配置redis以及连接池"><a href="#2-配置redis以及连接池" class="headerlink" title="2.配置redis以及连接池"></a>2.配置redis以及连接池</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># redis</span><br><span class="line">spring:</span><br><span class="line">  redis:</span><br><span class="line">    host: 127.0.0.1</span><br><span class="line">    port: 6379</span><br><span class="line">#    password:</span><br><span class="line">    database: 1</span><br><span class="line">    timeout: 5000</span><br><span class="line">    jedis:</span><br><span class="line">      pool:</span><br><span class="line">        max-active: 8</span><br><span class="line">        max-wait: 1</span><br><span class="line">        max-idle: 500</span><br><span class="line">        min-idle: 0</span><br></pre></td></tr></table></figure><h2 id="3-创建消息的发布者和消息处理者类"><a href="#3-创建消息的发布者和消息处理者类" class="headerlink" title="3.创建消息的发布者和消息处理者类"></a>3.创建消息的发布者和消息处理者类</h2><h3 id="消息发布者"><a href="#消息发布者" class="headerlink" title="消息发布者"></a>消息发布者</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableScheduling</span><span class="comment">//开启定时器功能</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MessageSender</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Autowired</span></span><br><span class="line">  <span class="keyword">private</span> StringRedisTemplate stringRedisTemplate;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 间隔2秒，通过stringRedisTemplate对象向redis消息队列chat频道发布消息</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="meta">@Scheduled</span>(fixedDelay = <span class="number">2000</span>)</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMessage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    stringRedisTemplate.convertAndSend(<span class="string">"chat"</span>, String.valueOf(Math.random()));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="消息处理器POJO"><a href="#消息处理器POJO" class="headerlink" title="消息处理器POJO"></a>消息处理器POJO</h3><ul><li><strong><code>@Component</code>: 自动注入，在 <code>RedisConfig</code> 中不用再写 <code>@Bean</code> 注入 <code>MessageReceiver</code></strong><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MessageReceiver</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 接收消息方法</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receiverMessage</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"MessageReceiver收到一条新消息："</span> + message);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="4-设置消息发布者、消息处理者POJO、redis消息监听容器以及redis监听器注入IOC容器"><a href="#4-设置消息发布者、消息处理者POJO、redis消息监听容器以及redis监听器注入IOC容器" class="headerlink" title="4.设置消息发布者、消息处理者POJO、redis消息监听容器以及redis监听器注入IOC容器"></a>4.设置消息发布者、消息处理者POJO、redis消息监听容器以及redis监听器注入IOC容器</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * redis配置</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 段誉</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2019-03-25 9:59</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span><span class="comment">//相当于xml中的beans</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Bean</span></span><br><span class="line">  <span class="function">RedisMessageListenerContainer <span class="title">container</span><span class="params">(RedisConnectionFactory connectionFactory,</span></span></span><br><span class="line"><span class="function"><span class="params">                                          MessageListenerAdapter listenerAdapter)</span> </span>&#123;</span><br><span class="line">    RedisMessageListenerContainer container = <span class="keyword">new</span> RedisMessageListenerContainer();</span><br><span class="line">    container.setConnectionFactory(connectionFactory);</span><br><span class="line">    <span class="comment">//订阅了一个叫chat的通道</span></span><br><span class="line">    container.addMessageListener(listenerAdapter, <span class="keyword">new</span> PatternTopic(<span class="string">"chat"</span>));</span><br><span class="line">    <span class="keyword">return</span> container;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 消息监听器适配器，绑定消息处理器，利用反射技术调用消息处理器的业务方法</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> receiver</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="meta">@Bean</span></span><br><span class="line">  <span class="function">MessageListenerAdapter <span class="title">listenerAdapter</span><span class="params">(MessageReceiver receiver)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//给messageListenerAdapter 传入一个消息接受的处理器，利用反射的方法调用“receiveMessage”</span></span><br><span class="line">    <span class="comment">//不填defaultListenerMethod默认调用handleMessage</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> MessageListenerAdapter(receiver, <span class="string">"receiverMessage"</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 读取内容的template</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="meta">@Bean</span></span><br><span class="line">  <span class="function">StringRedisTemplate <span class="title">template</span><span class="params">(RedisConnectionFactory connectionFactory)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> StringRedisTemplate(connectionFactory);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-启动项目查看控制台"><a href="#5-启动项目查看控制台" class="headerlink" title="5.启动项目查看控制台"></a>5.启动项目查看控制台</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">MessageReceiver收到一条新消息：0.7372683821918483</span><br><span class="line">MessageReceiver收到一条新消息：0.800095651812774</span><br></pre></td></tr></table></figure><p>配置成功</p><h2 id="6-如何配置多个监听通道"><a href="#6-如何配置多个监听通道" class="headerlink" title="6.如何配置多个监听通道"></a>6.如何配置多个监听通道</h2><h3 id="方式1：一个监听器订阅多个通道"><a href="#方式1：一个监听器订阅多个通道" class="headerlink" title="方式1：一个监听器订阅多个通道"></a>方式1：一个监听器订阅多个通道</h3><p>1.监听容器配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function">RedisMessageListenerContainer <span class="title">container</span><span class="params">(RedisConnectionFactory connectionFactory,</span></span></span><br><span class="line"><span class="function"><span class="params">                                        MessageListenerAdapter listenerAdapter)</span> </span>&#123;</span><br><span class="line">  RedisMessageListenerContainer container = <span class="keyword">new</span> RedisMessageListenerContainer();</span><br><span class="line">  container.setConnectionFactory(connectionFactory);</span><br><span class="line">  <span class="comment">//订阅了一个叫chat的通道</span></span><br><span class="line">  container.addMessageListener(listenerAdapter, <span class="keyword">new</span> PatternTopic(<span class="string">"chat"</span>));</span><br><span class="line">  </span><br><span class="line">  container.addMessageListener(listenerAdapter, <span class="keyword">new</span> PatternTopic(<span class="string">"chat1"</span>));</span><br><span class="line">  <span class="keyword">return</span> container;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.添加一个新的消息发布者</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableScheduling</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MessageSender</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Autowired</span></span><br><span class="line">  <span class="keyword">private</span> StringRedisTemplate stringRedisTemplate;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 间隔2秒，通过stringRedisTemplate对象向redis消息队列chat1频道发布消息</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="meta">@Scheduled</span>(fixedDelay = <span class="number">2000</span>)</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMessage1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    stringRedisTemplate.convertAndSend(<span class="string">"chat1"</span>, String.valueOf(Math.random()));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Scheduled</span>(fixedDelay = <span class="number">2000</span>)</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMessage2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    stringRedisTemplate.convertAndSend(<span class="string">"chat2"</span>, String.valueOf(System.currentTimeMillis()));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.启动项目查看控制台打印</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">MessageReceiver收到一条新消息：0.9988032526665156</span><br><span class="line">MessageReceiver收到一条新消息：来自chat1的消息0.5760191019007642</span><br><span class="line">MessageReceiver收到一条新消息：0.37241454741448377</span><br><span class="line">MessageReceiver收到一条新消息：来自chat1的消息0.639498468451238</span><br></pre></td></tr></table></figure><p>说明配置成功</p><h3 id="方式2：配置多个监听器监听不同的通道"><a href="#方式2：配置多个监听器监听不同的通道" class="headerlink" title="方式2：配置多个监听器监听不同的通道"></a>方式2：配置多个监听器监听不同的通道</h3><h4 id="1-注入一个新的bean，名字要和之前不一样，调用-MessageReceiver-的-receiverMessage2-方法。"><a href="#1-注入一个新的bean，名字要和之前不一样，调用-MessageReceiver-的-receiverMessage2-方法。" class="headerlink" title="1.注入一个新的bean，名字要和之前不一样，调用 MessageReceiver 的 receiverMessage2 方法。"></a>1.注入一个新的bean，名字要和之前不一样，调用 <code>MessageReceiver</code> 的 <code>receiverMessage2</code> 方法。</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function">MessageListenerAdapter <span class="title">listenerAdapter2</span><span class="params">(MessageReceiver receiver)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> MessageListenerAdapter(receiver, <span class="string">"receiverMessage2"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>这里也可以自己新注入一个新的 <code>Receiver</code> 叫 <code>MessageReceiver2</code><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MessageReceiver2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 接收消息方法</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receiverMessage</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"MessageReceiver收到一条新消息："</span> + message);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function">MessageListenerAdapter <span class="title">listenerAdapter2</span><span class="params">(MessageReceiver2 receiver)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> MessageListenerAdapter(receiver, <span class="string">"receiverMessage"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="2-配置监听容器，这里参数命名要和上边bean注入的方法名一致"><a href="#2-配置监听容器，这里参数命名要和上边bean注入的方法名一致" class="headerlink" title="2.配置监听容器，这里参数命名要和上边bean注入的方法名一致"></a>2.配置监听容器，<strong>这里参数命名要和上边bean注入的方法名一致</strong></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function">RedisMessageListenerContainer <span class="title">container</span><span class="params">(RedisConnectionFactory connectionFactory,</span></span></span><br><span class="line"><span class="function"><span class="params">                                        MessageListenerAdapter listenerAdapter1,</span></span></span><br><span class="line"><span class="function"><span class="params">                                        MessageListenerAdapter listenerAdapter2)</span> </span>&#123;</span><br><span class="line">  RedisMessageListenerContainer container = <span class="keyword">new</span> RedisMessageListenerContainer();</span><br><span class="line">  container.setConnectionFactory(connectionFactory);</span><br><span class="line">  <span class="comment">//订阅了一个叫chat的通道</span></span><br><span class="line">  container.addMessageListener(listenerAdapter1, <span class="keyword">new</span> PatternTopic(<span class="string">"chat"</span>));</span><br><span class="line">  container.addMessageListener(listenerAdapter2, <span class="keyword">new</span> PatternTopic(<span class="string">"chat1"</span>));</span><br><span class="line">  <span class="keyword">return</span> container;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-添加一个新的消息发布者"><a href="#3-添加一个新的消息发布者" class="headerlink" title="3.添加一个新的消息发布者"></a>3.添加一个新的消息发布者</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//开启定时器功能</span></span><br><span class="line"><span class="meta">@EnableScheduling</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MessageSender</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Autowired</span></span><br><span class="line">  <span class="keyword">private</span> StringRedisTemplate stringRedisTemplate;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 间隔2秒，通过stringRedisTemplate对象向redis消息队列chat1频道发布消息</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="meta">@Scheduled</span>(fixedDelay = <span class="number">2000</span>)</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMessage1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    stringRedisTemplate.convertAndSend(<span class="string">"chat1"</span>, String.valueOf(Math.random()));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Scheduled</span>(fixedDelay = <span class="number">2000</span>)</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMessage2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    stringRedisTemplate.convertAndSend(<span class="string">"chat2"</span>, String.valueOf(System.currentTimeMillis()));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-启动项目打印日志如下"><a href="#4-启动项目打印日志如下" class="headerlink" title="4.启动项目打印日志如下"></a>4.启动项目打印日志如下</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">收到一条chat2新消息：1555564092816</span><br><span class="line">收到一条chat1新消息：0.257614690680789</span><br><span class="line">收到一条chat2新消息：1555564094830</span><br><span class="line">收到一条chat1新消息：0.3996585101720651</span><br><span class="line">收到一条chat2新消息：1555564096833</span><br><span class="line">收到一条chat1新消息：0.6767629866464419</span><br><span class="line">收到一条chat2新消息：1555564098836</span><br><span class="line">收到一条chat1新消息：0.14106474791507906</span><br></pre></td></tr></table></figure><p>配置成功</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> Spring </category>
          
          <category> SpringBoot </category>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 订阅发布者模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>windows下安装redis后启动占用c盘大量空间解决办法</title>
      <link href="/2019/03/23/2019-03-23-windows%E4%B8%8B%E5%AE%89%E8%A3%85redis%E5%90%8E%E5%90%AF%E5%8A%A8%E5%8D%A0%E7%94%A8c%E7%9B%98%E5%A4%A7%E9%87%8F%E7%A9%BA%E9%97%B4%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/"/>
      <url>/2019/03/23/2019-03-23-windows%E4%B8%8B%E5%AE%89%E8%A3%85redis%E5%90%8E%E5%90%AF%E5%8A%A8%E5%8D%A0%E7%94%A8c%E7%9B%98%E5%A4%A7%E9%87%8F%E7%A9%BA%E9%97%B4%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>Windows版Redis启动后，会在C盘自动创建一个很大的缓存文件，<code>C:\Users\{你的用户名}\AppData\Local\Redis\RedisQFolk_****.dat</code>，一个大概就有7G左右，如果系统异常关闭，还会再新建一个差不多大小的缓存文件，之前的不会自动删除掉，会导致硬盘占用量越来越大。<br>我们可以通过自定义路径即可将其转移到其他分区，并限制其大小。</p><h2 id="解决办法如下："><a href="#解决办法如下：" class="headerlink" title="解决办法如下："></a>解决办法如下：</h2><p>找到redis启动时用到的配置文件redis.windows.conf，然后打开，添加配置，如果存在则修改</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 指定生成的文件最大为4G</span><br><span class="line">maxheap 4294967296</span><br><span class="line"># 指定文件生成到D盘的MyRedisSwap目录下</span><br><span class="line">heapdir D:\MyRedisSwap\</span><br></pre></td></tr></table></figure><ul><li><strong>注意:需要在D盘创建过MyRedisSwap文件夹后redis才能启动，中间要有空格，maxheap单位是byte，修改好后重启即可</strong></li></ul><p>启动前：<br><img src="https://img-blog.csdnimg.cn/20190323144926477.png" alt="在这里插入图片描述"><br>启动后：<br><img src="https://img-blog.csdnimg.cn/20190323144949998.png" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> DB </category>
          
          <category> NoSQL </category>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 占空间 </tag>
            
            <tag> Windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot项目中访问controller接口报Creation of SecureRandom instance for session ID generation using</title>
      <link href="/2019/03/23/2019-03-23-SpringBoot%E9%A1%B9%E7%9B%AE%E4%B8%AD%E8%AE%BF%E9%97%AEcontroller%E6%8E%A5%E5%8F%A3%E6%8A%A5Creation-of-SecureRandom-instance-for-session-ID-generation-using/"/>
      <url>/2019/03/23/2019-03-23-SpringBoot%E9%A1%B9%E7%9B%AE%E4%B8%AD%E8%AE%BF%E9%97%AEcontroller%E6%8E%A5%E5%8F%A3%E6%8A%A5Creation-of-SecureRandom-instance-for-session-ID-generation-using/</url>
      
        <content type="html"><![CDATA[<h2 id="bug原因"><a href="#bug原因" class="headerlink" title="bug原因"></a>bug原因</h2><p>今天测试人员在测试的时候发现获取图形验证码接口在访问时候加载速度非常慢，要一两分钟才能加载出来，看日志的时候发现报了下边的一段警告日志：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2019-01-24 09:36:33.654 [http-nio-8080-exec-5] WARN org.apache.catalina.util.SessionIdGeneratorBase:180 - Creation of SecureRandom instance for session ID generation using [SHA1PRNG] took [106,771] milliseconds.</span><br><span class="line">2019-01-24 09:36:33.656 [http-nio-8080-exec-3] WARN org.apache.catalina.util.SessionIdGeneratorBase:180 - Creation of SecureRandom instance for session ID generation using [SHA1PRNG] took [26,105] milliseconds.</span><br></pre></td></tr></table></figure><p>通过搜索发现原因如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">linux默认的SecureRandom实现方式是非常慢的NativePRNG，而在Windows上的默认实现是SHA1PRNG，你也可以在Linux上指定使用该方式。</span><br><span class="line"></span><br><span class="line">……NativePRNG会不断从操作系统获取熵（从&#x2F;dev&#x2F;urandom读取），其它PRNG则不会获取这些额外的熵。</span><br><span class="line"></span><br><span class="line">AESCounterRNG差不多比SHA1PRNG快的十倍，而如果我没记错，SHA1PRNG比NativePRNG快两到三倍</span><br><span class="line"></span><br><span class="line">SecureRandom是java用来获取高级随机数的实现,而访问获取图形验证码接口速度很慢的原因就是因为在linux上项目生成随机数的时候使用的是最慢的NativePRNG导致的</span><br></pre></td></tr></table></figure><h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><ol><li><p>在 JVM 环境中解决（我在项目中使用的是这种方式）<br>打开$JAVA_PATH/jre/lib/security/java.security这个文件找到修改该<code>securerandom.source</code>的值</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">修改前</span><br><span class="line">securerandom.source&#x3D;file:&#x2F;dev&#x2F;random</span><br><span class="line"></span><br><span class="line">修改后</span><br><span class="line">securerandom.source&#x3D;file:&#x2F;dev&#x2F;.&#x2F;urandom</span><br></pre></td></tr></table></figure><p> 如果为SpringBoot项目可以在执行jar启动命令中添加配置</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">修改前</span><br><span class="line">java -jar pc.jar</span><br><span class="line"></span><br><span class="line">修改后</span><br><span class="line">java -jar -Djava.security.egd&#x3D;file:&#x2F;dev&#x2F;.&#x2F;urandom pc.jar</span><br></pre></td></tr></table></figure></li><li><p>在Tomcat环境中解决</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">可以通过配置 JRE 使用非阻塞的 Entropy Source：</span><br><span class="line">在 catalina.sh 中加入这么一行：-Djava.security.egd&#x3D;file:&#x2F;dev&#x2F;.&#x2F;urandom 即可。</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> Spring </category>
          
          <category> BUG </category>
          
          <category> SpringBoot </category>
          
          <category> 警告 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SessionIdGeneratorBase </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring项目logback配置多环境日志输出</title>
      <link href="/2019/03/23/2019-03-23-Spring%E9%A1%B9%E7%9B%AElogback%E9%85%8D%E7%BD%AE%E5%A4%9A%E7%8E%AF%E5%A2%83%E6%97%A5%E5%BF%97%E8%BE%93%E5%87%BA/"/>
      <url>/2019/03/23/2019-03-23-Spring%E9%A1%B9%E7%9B%AElogback%E9%85%8D%E7%BD%AE%E5%A4%9A%E7%8E%AF%E5%A2%83%E6%97%A5%E5%BF%97%E8%BE%93%E5%87%BA/</url>
      
        <content type="html"><![CDATA[<h2 id="SpringBoot项目"><a href="#SpringBoot项目" class="headerlink" title="SpringBoot项目"></a>SpringBoot项目</h2><h3 id="1-区分线上线下环境配置"><a href="#1-区分线上线下环境配置" class="headerlink" title="1.区分线上线下环境配置"></a>1.区分线上线下环境配置</h3><p>maven项目：在pom.xml文件中的dependencies标签前添加如下代码<br> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">profiles</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--除了dev、pro还可以再添加多个配置--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>dev<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--设置默认为dev环境--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">activation</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">activeByDefault</span>&gt;</span>true<span class="tag">&lt;/<span class="name">activeByDefault</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">activation</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--标签中的值根据自己的项目环境名去添加，标签名可以自定义，能写多个--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">profileActive</span>&gt;</span>dev<span class="tag">&lt;/<span class="name">profileActive</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">id</span>&gt;</span>pro<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">profileActive</span>&gt;</span>prod<span class="tag">&lt;/<span class="name">profileActive</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">profiles</span>&gt;</span></span><br></pre></td></tr></table></figure><br> pom文件配置后可以在application配置文件中通过@profileActive@方式拿到profileActive的值<br> <figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"> #区分springboot是线上还是线下环境</span></span><br><span class="line"><span class="meta">spring.profiles.active</span>=<span class="string">@profileActive@</span></span><br></pre></td></tr></table></figure></p><h3 id="2-在logback中通过如下方式进行区分环境"><a href="#2-在logback中通过如下方式进行区分环境" class="headerlink" title="2.在logback中通过如下方式进行区分环境"></a>2.在logback中通过如下方式进行区分环境</h3><p> 可以根据不同的环境设置不同的日志输出路径<br> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">springProfile</span> <span class="attr">name</span>=<span class="string">"prod"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"LOG_HOME"</span> <span class="attr">value</span>=<span class="string">"/opt/myapp/logs/mengmeng-admin"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">springProfile</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">springProfile</span> <span class="attr">name</span>=<span class="string">"dev"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"LOG_HOME"</span> <span class="attr">value</span>=<span class="string">"/opt/myapp/logs/mengmeng-admin-dev"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">springProfile</span>&gt;</span></span><br></pre></td></tr></table></figure></p><blockquote><p>如果参照这个配置后启动报 <code>Logback configuration error detected:</code> 错误<br>请参考这篇博客解决 <a href="https://blog.csdn.net/qq_33430083/article/details/91360771" target="_blank" rel="noopener">https://blog.csdn.net/qq_33430083/article/details/91360771</a></p></blockquote><h2 id="SpringMVC项目"><a href="#SpringMVC项目" class="headerlink" title="SpringMVC项目"></a>SpringMVC项目</h2><h3 id="1-区分线上线下环境配置-1"><a href="#1-区分线上线下环境配置-1" class="headerlink" title="1.区分线上线下环境配置"></a>1.区分线上线下环境配置</h3><p> 同springboot一样<br> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">profiles</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--除了dev、pro还可以再添加多个配置--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>dev<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--设置默认为dev环境--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">activation</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">activeByDefault</span>&gt;</span>true<span class="tag">&lt;/<span class="name">activeByDefault</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">activation</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--标签中的值根据自己的项目环境名去添加，标签名可以自定义，能写多个--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">profileActive</span>&gt;</span>devlopment<span class="tag">&lt;/<span class="name">profileActive</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">id</span>&gt;</span>pro<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">profileActive</span>&gt;</span>production<span class="tag">&lt;/<span class="name">profileActive</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">profiles</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h3 id="2-在pom文件中引入maven-war-plugin插件，这样作是为了在编译时，web-xml文件能识别-profileActive"><a href="#2-在pom文件中引入maven-war-plugin插件，这样作是为了在编译时，web-xml文件能识别-profileActive" class="headerlink" title="2.在pom文件中引入maven-war-plugin插件，这样作是为了在编译时，web.xml文件能识别${profileActive}"></a>2.在pom文件中引入<code>maven-war-plugin</code>插件，这样作是为了在编译时，web.xml文件能识别${profileActive}</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-war-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">webResources</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/webapp<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>true<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">webResources</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-在web-xml文件中修改spring-profiles-default配置，没有则添加"><a href="#3-在web-xml文件中修改spring-profiles-default配置，没有则添加" class="headerlink" title="3.在web.xml文件中修改spring.profiles.default配置，没有则添加"></a>3.在web.xml文件中修改spring.profiles.default配置，没有则添加</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>spring.profiles.default<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- profileActive就是在pom配置的参数名 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>$&#123;profileActive&#125;<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="4-创建一个监听器，继承ContextLoaderListener"><a href="#4-创建一个监听器，继承ContextLoaderListener" class="headerlink" title="4.创建一个监听器，继承ContextLoaderListener"></a>4.创建一个监听器，继承ContextLoaderListener</h3><p>通过监听器获取到web.xml中<code>spring.profiles.default</code>的值，存入系统属性中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取项目开发环境监听器</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 段誉</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2018-09-19 16:56</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">XyyContextLoaderListener</span> <span class="keyword">extends</span> <span class="title">ContextLoaderListener</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextInitialized</span><span class="params">(ServletContextEvent event)</span> </span>&#123;</span><br><span class="line">    String attribute = event.getServletContext().getInitParameter(<span class="string">"spring.profiles.default"</span>);</span><br><span class="line">    System.setProperty(<span class="string">"DEV_MODEL"</span>, attribute);</span><br><span class="line">    <span class="keyword">super</span>.contextInitialized(event);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在web.xml中添加监听器配置，在配置spring.profiles.default标签的后边添加</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>com.weijian.xiaoyingying.listener.XyyContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="5-引入logback使用if判断需要的依赖"><a href="#5-引入logback使用if判断需要的依赖" class="headerlink" title="5.引入logback使用if判断需要的依赖"></a>5.引入logback使用if判断需要的依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.codehaus.janino<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>janino<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.codehaus.janino/commons-compiler --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.codehaus.janino<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-compiler<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="6-在logback中使用if判断区分环境"><a href="#6-在logback中使用if判断区分环境" class="headerlink" title="6.在logback中使用if判断区分环境"></a>6.在logback中使用if判断区分环境</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">condition</span>=<span class="string">'property("DEV_MODEL").contains("production")'</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">then</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"LOG_HOME"</span> <span class="attr">value</span>=<span class="string">"/opt/myapp/logs/mjsadmin-pro"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">then</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">else</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"LOG_HOME"</span> <span class="attr">value</span>=<span class="string">"/opt/myapp/logs/mjsadmin-dev"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">else</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="配置后没有生效的原因"><a href="#配置后没有生效的原因" class="headerlink" title="配置后没有生效的原因"></a>配置后没有生效的原因</h3><ul><li><strong>有些项目可能因为配置的原因导致logback初始化执行在了<code>ContextLoaderListener</code> 监听器之前导致配置没有生效</strong><h2 id="如果SpringMVC按照上述配置无法成功解决办法"><a href="#如果SpringMVC按照上述配置无法成功解决办法" class="headerlink" title="如果SpringMVC按照上述配置无法成功解决办法"></a>如果SpringMVC按照上述配置无法成功解决办法</h2><h3 id="1-引入logback与spring整合的依赖设置后可以自定义logback-xml的文件名-路径"><a href="#1-引入logback与spring整合的依赖设置后可以自定义logback-xml的文件名-路径" class="headerlink" title="1.引入logback与spring整合的依赖设置后可以自定义logback.xml的文件名/路径"></a>1.引入logback与spring整合的依赖设置后可以自定义logback.xml的文件名/路径</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.logback-extensions<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logback-ext-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="2-将logback-xml文件的名字修改，比如叫logback-aaa-xml"><a href="#2-将logback-xml文件的名字修改，比如叫logback-aaa-xml" class="headerlink" title="2.将logback.xml文件的名字修改，比如叫logback-aaa.xml"></a>2.将logback.xml文件的名字修改，比如叫logback-aaa.xml</h3><h3 id="3-在web-xml中配置logback配置文件初始化（注：要写在spring配置的上边）"><a href="#3-在web-xml中配置logback配置文件初始化（注：要写在spring配置的上边）" class="headerlink" title="3.在web.xml中配置logback配置文件初始化（注：要写在spring配置的上边）"></a>3.在web.xml中配置logback配置文件初始化（注：要写在spring配置的上边）</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>logbackConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:logback-aaa.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="4-将之前配置的监听器改成继承LogbackConfigListener，配置logback文件初始化的监听器"><a href="#4-将之前配置的监听器改成继承LogbackConfigListener，配置logback文件初始化的监听器" class="headerlink" title="4.将之前配置的监听器改成继承LogbackConfigListener，配置logback文件初始化的监听器"></a>4.将之前配置的监听器改成继承LogbackConfigListener，配置logback文件初始化的监听器</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 项目开发/生产环境监听器</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 段誉</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2019-02-21 10:28</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ErpContextLoaderListener</span> <span class="keyword">extends</span> <span class="title">LogbackConfigListener</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextInitialized</span><span class="params">(ServletContextEvent event)</span> </span>&#123;</span><br><span class="line">    String attribute = event.getServletContext().getInitParameter(<span class="string">"spring.profiles.default"</span>);</span><br><span class="line">    System.setProperty(<span class="string">"DEV_MODEL"</span>, attribute);</span><br><span class="line">    <span class="keyword">super</span>.contextInitialized(event);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> Spring </category>
          
          <category> SpringBoot </category>
          
          <category> SpringMVC </category>
          
          <category> logback </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 区分项目环境 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springboot项目中使用redis对数据进行解析报Invalid numeric value: Leading zeroes not allowed错误</title>
      <link href="/2019/03/23/2019-03-23-springboot%E9%A1%B9%E7%9B%AE%E4%B8%AD%E4%BD%BF%E7%94%A8redis%E5%AF%B9%E6%95%B0%E6%8D%AE%E8%BF%9B%E8%A1%8C%E8%A7%A3%E6%9E%90%E6%8A%A5Invalid-numeric-value-Leading-zeroes-not-allowed%E9%94%99%E8%AF%AF/"/>
      <url>/2019/03/23/2019-03-23-springboot%E9%A1%B9%E7%9B%AE%E4%B8%AD%E4%BD%BF%E7%94%A8redis%E5%AF%B9%E6%95%B0%E6%8D%AE%E8%BF%9B%E8%A1%8C%E8%A7%A3%E6%9E%90%E6%8A%A5Invalid-numeric-value-Leading-zeroes-not-allowed%E9%94%99%E8%AF%AF/</url>
      
        <content type="html"><![CDATA[<h2 id="错误分析"><a href="#错误分析" class="headerlink" title="错误分析"></a>错误分析</h2><p>在使用redis获取发送的短信验证码，偶尔会报如下错误信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2019</span>-<span class="number">01</span>-<span class="number">15</span> <span class="number">10</span>:<span class="number">32</span>:<span class="number">15.104</span> [http-nio-<span class="number">8080</span>-exec-<span class="number">10</span>] WARN  org.springframework.web.servlet.PageNotFound:<span class="number">1176</span> - No mapping found f lowed</span><br><span class="line"> at [Source: [B@<span class="number">2836</span>aebe; line: <span class="number">1</span>, column: <span class="number">2</span>]; nested exception is com.fasterxml.jackson.core.JsonParseException: Invalid numeric value: Leading zeroes not allowed</span><br><span class="line"> at [Source: [B@<span class="number">2836</span>aebe; line: <span class="number">1</span>, column: <span class="number">2</span>]</span><br><span class="line"> at org.springframework.data.redis.serializer.Jackson2JsonRedisSerializer.deserialize(Jackson2JsonRedisSerializer.java:<span class="number">73</span>)</span><br><span class="line"> at org.springframework.data.redis.core.AbstractOperations.deserializeValue(AbstractOperations.java:<span class="number">318</span>)</span><br><span class="line"> at org.springframework.data.redis.core.AbstractOperations$ValueDeserializingRedisCallback.doInRedis(AbstractOperations.java:<span class="number">58</span>)</span><br><span class="line"> at org.springframework.data.redis.core.RedisTemplate.execute(RedisTemplate.java:<span class="number">207</span>)</span><br><span class="line"> at org.springframework.data.redis.core.RedisTemplate.execute(RedisTemplate.java:<span class="number">169</span>)</span><br></pre></td></tr></table></figure><p>通过看日志发现是因为使用的jackson解析redis中存储的数据，会把<strong>纯数字</strong>的短信验证码当作是<strong>数字类型</strong>来解析，之所以偶尔会报错是因为生成的随机数验证码中可能会<strong>以0开头</strong>，导致jackson认为这是一个<strong>无效的数字</strong>才报的错，然后使用<code>RedisTemplate&lt;String, String&gt;</code>当作字符串的方式获取短信验证码仍然不行，还是使用的jackson解析短信验证码，检测redis的配置发现是因为<strong>项目中指定的redisTemplate的数据解析方式为jackson解析</strong><br><img src="https://img-blog.csdnimg.cn/20190323135041422.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMzNDMwMDgz,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="解决办法："><a href="#解决办法：" class="headerlink" title="解决办法："></a>解决办法：</h2><p>再配置一个StringRedisTemplate的redis模板：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span>(name = <span class="string">"stringRedisTemplate"</span>)</span><br><span class="line"> <span class="function"><span class="keyword">public</span> StringRedisTemplate <span class="title">stringRedisTemplate</span><span class="params">(RedisConnectionFactory</span></span></span><br><span class="line"><span class="function"><span class="params">   redisConnectionFactory)</span></span>&#123;</span><br><span class="line">     <span class="keyword">return</span> <span class="keyword">new</span> StringRedisTemplate(redisConnectionFactory);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>使用方法：<br><img src="https://img-blog.csdnimg.cn/2019032313532944.png" alt="在这里插入图片描述"></p><ul><li>在获取短信验证码的时候stringRedisTemplate来获取，这样就会把短信验证码通过字符串的方式解析，以0开头也不会报解析错误的问题</li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> Spring </category>
          
          <category> BUG </category>
          
          <category> SpringBoot </category>
          
          <category> Redis </category>
          
          <category> 异常 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JsonParseException </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringMVC 拦截器学习</title>
      <link href="/2019/03/21/2019-03-21-SpringMVC-%E6%8B%A6%E6%88%AA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
      <url>/2019/03/21/2019-03-21-SpringMVC-%E6%8B%A6%E6%88%AA%E5%99%A8%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="demo地址"><a href="#demo地址" class="headerlink" title="demo地址"></a>demo地址</h2><blockquote><p><a href="https://gitee.com/fengzxia/spring-mvc-interceptor-learn" target="_blank" rel="noopener">https://gitee.com/fengzxia/spring-mvc-interceptor-learn</a></p></blockquote><h2 id="常见应用场景"><a href="#常见应用场景" class="headerlink" title="常见应用场景"></a>常见应用场景</h2><ol><li>日志记录:记录请求信息的日志，以便进行信息监控、信息统计、计算PV(Page View)等。</li><li>权限检查:如登录检测，进入处理器检测是否登录，如果没有直接返回到登录页面。</li><li>性能监控:有时候系统在某段时间莫名其妙的慢，可以通过拦截器在进入处理器之前记录开始时间，在处理完后记录结束时间，从而得到该请求的处理时间（如果有反向代理，如apache可以自动记录）。</li><li>通用行为:读取cookie得到用户信息并将用户对象放入请求，从而方便后续流程使用，还可以提取Locale、Theme信息等，只要是多个处理器(Controller)都需要的即可使用拦截器实现。</li><li>OpenSessionInView(在视图中打开会话):如Hibernate，在进入处理器打开Session，在完成后关闭Session。</li></ol><p>需要用到的jar，版本号可以根据自己项目中spring的版本号来些，我这里是<code>5.0.0.RELEASE</code>版本</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="拦截器接口如下"><a href="#拦截器接口如下" class="headerlink" title="拦截器接口如下"></a>拦截器接口如下</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.springframework.web.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.lang.Nullable;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.method.HandlerMethod;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">HandlerInterceptor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">default</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler,</span></span></span><br><span class="line"><span class="function"><span class="params">@Nullable ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler,</span></span></span><br><span class="line"><span class="function"><span class="params">@Nullable Exception ex)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>拦截器一共有3个回调方法:</p><ol><li><strong>perHandle</strong>:预处理回调方法，实现处理器的预处理（如登录检测、ip白名单拦截），第三个参数为响应的处理器；<br>返回值:true表示继续流程（如调用下一个拦截器或处理器）；<br>false表示中断（如登录检测失败，ip不在白名单），不会继续调用其他的拦截器或者处理器，此时需要通过response来产生响应；</li><li><strong>postHandle</strong>:后处理回调方法，实现处理器的后处理（但是在渲染视图之前），此时我们可以通过modelAndView(模型和视图对象)对模型数据进行处理或对视图进行处理，modelAndView也可能为null。</li><li><strong>afterCompletion</strong>:整个请求处理完毕回调方法，即在视图渲染完毕时回调，如性能监控中我们可以在次记录结束时间并输出消耗时间，还可以进行一些资源清理，类似try-catch-finally中的finally，但仅调用处理器执行链中<strong>perHandle返回true的拦截器afterCompletion</strong></li></ol><h3 id="拦截器适配器"><a href="#拦截器适配器" class="headerlink" title="拦截器适配器"></a>拦截器适配器</h3><p>有时候我们可能只需要实现三个回调方法中的某一个，如果实现<code>HandlerInterceptor</code>接口的话，三个方法必须实现，不管你需不需要，此时spring提供了一个<code>HandlerInterceptorAdapter</code>适配器(一种适配器设计模式的实现)，允许我们只实现需要的回调方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.springframework.web.servlet.handler;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.lang.Nullable;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.AsyncHandlerInterceptor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.ModelAndView;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">HandlerInterceptorAdapter</span> <span class="keyword">implements</span> <span class="title">AsyncHandlerInterceptor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler,</span></span></span><br><span class="line"><span class="function"><span class="params">@Nullable ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler,</span></span></span><br><span class="line"><span class="function"><span class="params">@Nullable Exception ex)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterConcurrentHandlingStarted</span><span class="params">(HttpServletRequest request, HttpServletResponse response,</span></span></span><br><span class="line"><span class="function"><span class="params">Object handler)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="运行流程图"><a href="#运行流程图" class="headerlink" title="运行流程图"></a>运行流程图</h2><p><img src="https://img-blog.csdnimg.cn/20190321135648982.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMzNDMwMDgz,size_16,color_FFFFFF,t_70" alt="正常流程" title="正常流程"><br>1-1 正常流程<br><br><img src="https://img-blog.csdnimg.cn/20190321135739106.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMzNDMwMDgz,size_16,color_FFFFFF,t_70" alt="中断流程" title="中断流程"><br>1-2 中断流程  </p><p>中断流程中，比如是HandlerInterceptor2中断的流程（preHandle返回false），此处仅调用它之前拦截器的preHandle返回true的afterCompletion方法。  </p><p>DispatcherServlet内部的工作流程</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//doDispatch方法  </span></span><br><span class="line"><span class="comment">//1、处理器拦截器的预处理（正序执行）  </span></span><br><span class="line">HandlerInterceptor[] interceptors = mappedHandler.getInterceptors();  </span><br><span class="line"><span class="keyword">if</span> (interceptors != <span class="keyword">null</span>) &#123;  </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; interceptors.length; i++) &#123;  </span><br><span class="line">    HandlerInterceptor interceptor = interceptors[i];  </span><br><span class="line">        <span class="keyword">if</span> (!interceptor.preHandle(processedRequest, response, mappedHandler.getHandler())) &#123;  </span><br><span class="line">            <span class="comment">//1.1、失败时触发afterCompletion的调用  </span></span><br><span class="line">            triggerAfterCompletion(mappedHandler, interceptorIndex, processedRequest, response, <span class="keyword">null</span>);  </span><br><span class="line">            <span class="keyword">return</span>;  </span><br><span class="line">        &#125;  </span><br><span class="line">        interceptorIndex = i;<span class="comment">//1.2、记录当前预处理成功的索引  </span></span><br><span class="line">  &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="comment">//2、处理器适配器调用我们的处理器  </span></span><br><span class="line">mv = ha.handle(processedRequest, response, mappedHandler.getHandler());  </span><br><span class="line"><span class="comment">//当我们返回null或没有返回逻辑视图名时的默认视图名翻译（详解4.15.5 RequestToViewNameTranslator）  </span></span><br><span class="line"><span class="keyword">if</span> (mv != <span class="keyword">null</span> &amp;&amp; !mv.hasView()) &#123;  </span><br><span class="line">    mv.setViewName(getDefaultViewName(request));  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="comment">//3、处理器拦截器的后处理（逆序）  </span></span><br><span class="line"><span class="keyword">if</span> (interceptors != <span class="keyword">null</span>) &#123;  </span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = interceptors.length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;  </span><br><span class="line">    HandlerInterceptor interceptor = interceptors[i];  </span><br><span class="line">    interceptor.postHandle(processedRequest, response, mappedHandler.getHandler(), mv);  </span><br><span class="line">  &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="comment">//4、视图的渲染  </span></span><br><span class="line"><span class="keyword">if</span> (mv != <span class="keyword">null</span> &amp;&amp; !mv.wasCleared()) &#123;  </span><br><span class="line">  render(mv, processedRequest, response);  </span><br><span class="line">  <span class="keyword">if</span> (errorView) &#123;  </span><br><span class="line">      WebUtils.clearErrorRequestAttributes(request);  </span><br><span class="line">  &#125;  </span><br><span class="line">  <span class="comment">//5、触发整个请求处理完毕回调方法afterCompletion  </span></span><br><span class="line">  triggerAfterCompletion(mappedHandler, interceptorIndex, processedRequest, response, <span class="keyword">null</span>); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>注:以上是流程的简化代码，中间省略了部分代码，不完整</li></ul><h2 id="正常流程"><a href="#正常流程" class="headerlink" title="正常流程"></a>正常流程</h2><h3 id="1-拦截器实现"><a href="#1-拦截器实现" class="headerlink" title="1.拦截器实现"></a>1.拦截器实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lx.interceptor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.ModelAndView;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.handler.HandlerInterceptorAdapter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 拦截器</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 段誉</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2019-03-21 9:03</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyHandlerInterceptor1</span> <span class="keyword">extends</span> <span class="title">HandlerInterceptorAdapter</span> </span>&#123;<span class="comment">////此处一般继承HandlerInterceptorAdapter适配器即可</span></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response,</span></span></span><br><span class="line"><span class="function"><span class="params">                           Object handler)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"--------------------------MyHandlerInterceptor1.preHandle"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler</span></span></span><br><span class="line"><span class="function"><span class="params">          , ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"--------------------------MyHandlerInterceptor1.postHandle"</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response,</span></span></span><br><span class="line"><span class="function"><span class="params">                              Object handler, Exception ex)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"--------------------------MyHandlerInterceptor1.afterCompletion"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上是MyHandlerInterceptor1实现，MyHandlerInterceptor2同理，只是输出内容为<code>MyHandlerInterceptor2</code>。</p><h3 id="2-控制器"><a href="#2-控制器" class="headerlink" title="2.控制器"></a>2.控制器</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lx.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 段誉</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2019-03-20 15:29</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IndexController</span> </span>&#123;</span><br><span class="line">  <span class="meta">@GetMapping</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">index</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"IndexController.index"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"/index"</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-springMVC配置文件"><a href="#3-springMVC配置文件" class="headerlink" title="3.springMVC配置文件"></a>3.springMVC配置文件</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:interceptors</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">"/**"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"com.lx.interceptor.MyHandlerInterceptor1"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">"/**"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;mvc:exclude-mapping path="/index/**"/&gt;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"com.lx.interceptor.MyHandlerInterceptor2"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:interceptors</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><code>mvc:mapping</code>指定拦截器链接</li><li><code>mvc:exclude-mapping</code>设置不过滤的链接</li><li>上边拦截器设置的顺序就是拦截器执行的顺序</li></ul><h3 id="4-启动测试服务"><a href="#4-启动测试服务" class="headerlink" title="4.启动测试服务"></a>4.启动测试服务</h3><p><a href="http://localhost:8080" target="_blank" rel="noopener">http://localhost:8080</a><br>控制台输出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">--------------------------MyHandlerInterceptor1.preHandle</span><br><span class="line">--------------------------MyHandlerInterceptor2.preHandle</span><br><span class="line">IndexController.index</span><br><span class="line">--------------------------MyHandlerInterceptor2.postHandle</span><br><span class="line">--------------------------MyHandlerInterceptor1.postHandle</span><br><span class="line">--------------------------MyHandlerInterceptor2.afterCompletion</span><br><span class="line">--------------------------MyHandlerInterceptor1.afterCompletion</span><br></pre></td></tr></table></figure><p>与图1-1执行顺序一样，验证<code>afterCompletion</code>是否在页面加载完后执行可以在该回调方法内设置断点，然后查看页面。<br>想要查看中断流程效果可以将MyHandlerInterceptor1或MyHandlerInterceptor2的preHandle返回值设置成false查看</p><h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><h3 id="性能监控"><a href="#性能监控" class="headerlink" title="性能监控"></a>性能监控</h3><ol><li>实现分析<ol><li>在进入处理器之前记录开始时间，即在拦截器的preHandle记录开始时间;</li><li>在结束请求处理之后记录结束时间，即在afterCompletion记录结束时间，并用(结束时间-开始时间)得到这次请求的处理时间。</li><li>因为拦截器是单例，因此不管用户请求多少次都只有一个拦截器实现，即线程不安全，所以需要用到ThreadLocal，它是线程绑定的遍历，提供一个局部变量(一个线程一个ThreadLocal，A线程的ThreadLocal只能看到A线程的ThreadLocal，不能看到B线程的ThreadLocal)。</li></ol></li><li>代码实现<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lx.interceptor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.core.NamedThreadLocal;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.handler.HandlerInterceptorAdapter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 性能监控</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 段誉</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2019-03-21 13:37</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PerformanceMonitorInterceptor</span> <span class="keyword">extends</span> <span class="title">HandlerInterceptorAdapter</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> NamedThreadLocal&lt;Long&gt; startTimeThreadLocal = <span class="keyword">new</span> NamedThreadLocal&lt;&gt;(<span class="string">"Performance-Monitor-Start-Time"</span>);</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response,</span></span></span><br><span class="line"><span class="function"><span class="params">                           Object handler)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">//将接口请求时间绑定到当前线程</span></span><br><span class="line">    startTimeThreadLocal.set(System.currentTimeMillis());</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response,</span></span></span><br><span class="line"><span class="function"><span class="params">                              Object handler, Exception ex)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">//结束时间</span></span><br><span class="line">    <span class="keyword">long</span> endTime = System.currentTimeMillis();</span><br><span class="line">    <span class="comment">//得到线程的开始时间</span></span><br><span class="line">    Long startTime = startTimeThreadLocal.get();</span><br><span class="line">    <span class="comment">//消耗的时间</span></span><br><span class="line">    <span class="keyword">long</span> consumeTime = endTime - startTime;</span><br><span class="line">    System.out.println(String.format(<span class="string">"[%s]消耗的时间为[]毫秒"</span>, request.getRequestURI(), consumeTime));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ul><li>NamedThreadLocal：Spring提供的一个命名的ThreadLocal实现。  </li><li>在测试时需要把stopWatchHandlerInterceptor放在拦截器链的第一个，这样得到的时间才是比较准确的。 </li></ul><h2 id="转载"><a href="#转载" class="headerlink" title="转载"></a>转载</h2><blockquote><p>参考自开涛的博客:<a href="https://jinnianshilongnian.iteye.com/blog/1670856" target="_blank" rel="noopener">第五章 处理器拦截器详解——跟着开涛学SpringMVC</a> 学习编写的demo，加深了自己对aop的了解</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> Spring </category>
          
          <category> SpringMVC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 拦截器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>idea设置代码根据屏幕的大小自适应换行</title>
      <link href="/2019/03/19/2019-03-19-idea%E8%AE%BE%E7%BD%AE%E4%BB%A3%E7%A0%81%E6%A0%B9%E6%8D%AE%E5%B1%8F%E5%B9%95%E7%9A%84%E5%A4%A7%E5%B0%8F%E8%87%AA%E9%80%82%E5%BA%94%E6%8D%A2%E8%A1%8C/"/>
      <url>/2019/03/19/2019-03-19-idea%E8%AE%BE%E7%BD%AE%E4%BB%A3%E7%A0%81%E6%A0%B9%E6%8D%AE%E5%B1%8F%E5%B9%95%E7%9A%84%E5%A4%A7%E5%B0%8F%E8%87%AA%E9%80%82%E5%BA%94%E6%8D%A2%E8%A1%8C/</url>
      
        <content type="html"><![CDATA[<h1 id="有两种设置方式"><a href="#有两种设置方式" class="headerlink" title="有两种设置方式"></a>有两种设置方式</h1><h2 id="1-对单个文件"><a href="#1-对单个文件" class="headerlink" title="1.对单个文件"></a>1.对单个文件</h2><p>直接在通知栏设置<code>View &gt; Active Editor &gt; Use Soft Wraps</code><br><img src="https://img-blog.csdnimg.cn/20190319192059152.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMzNDMwMDgz,size_16,color_FFFFFF,t_70" alt=""></p><h2 id="2-设置全局的自动换行"><a href="#2-设置全局的自动换行" class="headerlink" title="2.设置全局的自动换行"></a>2.设置全局的自动换行</h2><p>打开设置，依次按照下图找到<code>File &gt; Settings &gt; Editor &gt; General &gt; Soft Wraos</code>然后勾选<code>Use soft wraps in editor</code><br><img src="https://img-blog.csdnimg.cn/20190319192319540.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMzNDMwMDgz,size_16,color_FFFFFF,t_70" alt=""><br><img src="https://img-blog.csdnimg.cn/20190319192443471.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMzNDMwMDgz,size_16,color_FFFFFF,t_70" alt=""></p><h2 id="3-效果"><a href="#3-效果" class="headerlink" title="3.效果"></a>3.效果</h2><p><img src="https://img-blog.csdnimg.cn/20190319192906699.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> idea </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 自动换行 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring项目Ajax请求跨域问题解决</title>
      <link href="/2019/02/23/2019-02-23-Spring%E9%A1%B9%E7%9B%AEAjax%E8%AF%B7%E6%B1%82%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/"/>
      <url>/2019/02/23/2019-02-23-Spring%E9%A1%B9%E7%9B%AEAjax%E8%AF%B7%E6%B1%82%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是跨域"><a href="#什么是跨域" class="headerlink" title="什么是跨域"></a>什么是跨域</h2><p>简单的说即为浏览器限制访问A站点下的js代码对B站点下的url进行ajax请求。比如说，前端域名是<code>www.abc.com</code>，那么在当前环境中运行的js代码，出于安全考虑，访问<code>www.xyz.com</code>域名下的资源，是受到限制的。现代浏览器默认都会基于安全原因而阻止跨域的ajax请求，这是现代浏览器中必备的功能。</p><h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><p>有根据spring的版本不同有不同的解决办法：</p><ol><li><p>在spring的4.2版本以后支持CORS（跨域资源共享），只需要在类或者方法上加入<code>@CrossOrigin</code>注解来实现：</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@CrossOrigin</span>(origins = <span class="string">"http://www,xxx.com"</span>;, maxAge = <span class="number">3600</span>) </span><br><span class="line"> </span><br><span class="line"><span class="meta">@RestController</span> <span class="meta">@RequestMapping</span>(<span class="string">"/account"</span>) </span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountController</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/&#123;id&#125;"</span>) </span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> Account <span class="title">retrieve</span><span class="params">(@PathVariable Long id)</span> </span>&#123; <span class="comment">// ... &#125;</span></span><br><span class="line"> </span><br><span class="line">    <span class="meta">@RequestMapping</span>(method = RequestMethod.DELETE, path = <span class="string">"/&#123;id&#125;"</span>)</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(@PathVariable Long id)</span> </span>&#123; <span class="comment">// ... &#125; </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> <code>maxAge</code> 表明在3600秒内，不需要再发送预检验请求，添加<code>@CrossOrigin</code>注解后，不需要在ajax请求上有任何改动即可正常发出请求接收数据。</p><p> 在Spring4.2中除了在controller的类或方法上设置外，还可以设置全局配置：</p><ol><li>定义一个继承自WebMvcConfigurerAdapter的类 <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CorsConfigurerAdapter</span> <span class="keyword">extends</span> <span class="title">WebMvcConfigurerAdapter</span></span>&#123;</span><br><span class="line">     <span class="meta">@Override</span> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addCorsMappings</span><span class="params">(CorsRegistry registry)</span> </span>&#123; </span><br><span class="line">        registry.addMapping(<span class="string">"/api/*"</span>).allowedOrigins(<span class="string">"*"</span>).allowedMethods(<span class="string">"GET"</span>, <span class="string">"PUT"</span>, <span class="string">"DELETE"</span>, <span class="string">"POST"</span>);  </span><br><span class="line">    &#125; </span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>将该类注入到容器中<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"com.lemo.web.config.CorsConfigurerAdapter"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol></li></ol></li><li><p>在spring的4.2版本之前，可以通过自定义一个拦截器，给请求加上相应的相应头来处理</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyCorsFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123;&#125;</span><br><span class="line"> </span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse    servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">     HttpServletResponse response = (HttpServletResponse) servletResponse;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">     String origin = (String) servletRequest.getRemoteHost()+<span class="string">":"</span>+servletRequest.getRemotePort();</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">     response.setHeader(<span class="string">"Access-Control-Allow-Origin"</span>, <span class="string">"*"</span>); <span class="comment">//表明它允许任意连接发起跨域请求，*表示所有网站，可以把*替换为具体的网站</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">     response.setHeader(<span class="string">"Access-Control-Allow-Methods"</span>, <span class="string">"POST, GET, OPTIONS, DELETE"</span>); <span class="comment">//表明它允许GET、POST、OPTIONS、DELETE的外域请求</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">     response.setHeader(<span class="string">"Access-Control-Max-Age"</span>, <span class="string">"3600"</span>); <span class="comment">//表明在3600秒内，不需要再发送预检验请求</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">     response.setHeader(<span class="string">"Access-Control-Allow-Headers"</span>, <span class="string">"x-requested-with,Authorization"</span>); <span class="comment">//表明它允许跨域请求包含content-type头</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">     response.setHeader(<span class="string">"Access-Control-Allow-Credentials"</span>,<span class="string">"true"</span>); <span class="comment">//设置跨域ajax请求时是否带cookie的设置</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">     filterChain.doFilter(servletRequest, servletResponse);</span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>web.xml</code>中配置使拦截器生效，配置完后即可生效</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">  <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>cors<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">  <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>com.leimo.filter.myeCORSFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>cors<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> Spring </category>
          
          <category> Web </category>
          
          <category> Ajax </category>
          
          <category> BUG </category>
          
          <category> 跨域 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 跨域 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java使用System.arraycopy()实现数组之间的复制</title>
      <link href="/2019/02/23/2019-02-23-Java%E4%BD%BF%E7%94%A8System-arraycopy-%E5%AE%9E%E7%8E%B0%E6%95%B0%E7%BB%84%E4%B9%8B%E9%97%B4%E7%9A%84%E5%A4%8D%E5%88%B6/"/>
      <url>/2019/02/23/2019-02-23-Java%E4%BD%BF%E7%94%A8System-arraycopy-%E5%AE%9E%E7%8E%B0%E6%95%B0%E7%BB%84%E4%B9%8B%E9%97%B4%E7%9A%84%E5%A4%8D%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<p>System提供了函数<code>arraycopy()</code>,将指定源数组中的数组从指定位置复制到目标数组的指定位置。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> src 源数组</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> srcPos 拷贝的起始位置</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> dest 要拷贝进的数组</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> destPos 拷贝的位置起始下标</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> length 拷贝的数组长度</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">arraycopy</span><span class="params">(Object src, <span class="keyword">int</span> srcPos, Object dest, <span class="keyword">int</span> destPos, <span class="keyword">int</span> length)</span></span>;</span><br></pre></td></tr></table></figure><p>使用方法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stringTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="comment">//源数组</span></span><br><span class="line">  String[] str1 = &#123;<span class="string">"零"</span>, <span class="string">"壹"</span>, <span class="string">"贰"</span>, <span class="string">"叁"</span>, <span class="string">"肆"</span>, <span class="string">"伍"</span>, <span class="string">"陆"</span>, <span class="string">"柒"</span>, <span class="string">"捌"</span>, <span class="string">"玖"</span>&#125;;</span><br><span class="line">  <span class="comment">//要拷贝的目标数组</span></span><br><span class="line">  String[] str2 = &#123;<span class="string">"一"</span>, <span class="string">"二"</span>, <span class="string">"三"</span>, <span class="string">"四"</span>, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>&#125;;</span><br><span class="line"> </span><br><span class="line">  System.arraycopy(str1, <span class="number">5</span>, str2, <span class="number">4</span>, <span class="number">3</span>);</span><br><span class="line">  <span class="keyword">for</span> (String str:str2) &#123;</span><br><span class="line">    System.out.print(str);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如上代码返回的结果为： </p><figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">一二三四伍陆柒</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> 基础 </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
