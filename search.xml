<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Flyway+Springboot整合使用</title>
      <link href="/posts/dd4a526.html"/>
      <url>/posts/dd4a526.html</url>
      
        <content type="html"><![CDATA[<p>flyway在非springboot中的配置方法可参考<a href="https://fengzxia.gitee.io/posts/cd84d80b.html">flyway入门使用教程</a></p><h2 id="1-项目依赖"><a href="#1-项目依赖" class="headerlink" title="1.项目依赖"></a>1.项目依赖</h2><p>项目中需要的依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.lx<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>flyway<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--与springboot整合时需要此包，如果是通过插件的方式则不需要--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.flywaydb<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>flyway-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.2.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置flywaydb时，需要引入org.springframework:spring-jdbc包，否则会报找不到驱动bug--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2-yml配置"><a href="#2-yml配置" class="headerlink" title="2.yml配置"></a>2.yml配置</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/test?serverTimezone=Asia/Shanghai&amp;useUnicode=true&amp;characterEncoding=utf8&amp;useSSL=false</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">flyway:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">encoding:</span> <span class="string">UTF-8</span></span><br><span class="line">    <span class="attr">locations:</span> <span class="string">['classpath:db/migration']</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/test?serverTimezone=Asia/Shanghai&amp;useUnicode=true&amp;characterEncoding=utf8&amp;useSSL=false</span></span><br><span class="line">    <span class="attr">user:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">root</span></span><br></pre></td></tr></table></figure><p>更多配置信息可以参考<code>org.springframework.boot.autoconfigure.flyway.FlywayProperties</code>基本和<a href="https://fengzxia.gitee.io/posts/cd84d80b.html#configuration%E9%85%8D%E7%BD%AE%E7%AE%80%E4%BB%8B">flyway入门使用教程</a>中的配置参数一致，只是不需要在写<code>driver</code>驱动，而是根据链接自动识别，通过springboot引入的<code>spring-jdbc</code>引用数据源</p><h2 id="3-编写脚本"><a href="#3-编写脚本" class="headerlink" title="3.编写脚本"></a>3.编写脚本</h2><p>参照<a href="https://fengzxia.gitee.io/posts/cd84d80b.html#mvn-flyway-migrate%E8%BF%81%E7%A7%BB">flyway入门使用教程</a>编写一个数据迁移脚本<code>V1.0__Create_user_table.sql</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="string">`user`</span>;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`user`</span>  (</span><br><span class="line"> <span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line"> <span class="string">`create_time`</span> datetime(<span class="number">0</span>) <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">CURRENT_TIMESTAMP</span>,</span><br><span class="line"> <span class="string">`update_time`</span> datetime(<span class="number">0</span>) <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">CURRENT_TIMESTAMP</span>,</span><br><span class="line"> <span class="string">`valid`</span> <span class="built_in">tinyint</span>(<span class="number">2</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">0</span> <span class="keyword">COMMENT</span> <span class="string">'是否有效 0.有效 1.无效'</span>,</span><br><span class="line"> <span class="string">`delete_time`</span> datetime(<span class="number">0</span>) <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line"> <span class="string">`name`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="built_in">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_unicode_ci <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'账号名称'</span>,</span><br><span class="line"> <span class="string">`password`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="built_in">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_unicode_ci <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'加密后密码'</span>,</span><br><span class="line"> <span class="string">`salt`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="built_in">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_unicode_ci <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'密码盐值'</span>,</span><br><span class="line"> <span class="string">`admin_role_ids`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="built_in">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_unicode_ci <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'角色id（多个使用,号隔开）'</span>,</span><br><span class="line"> PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>) <span class="keyword">USING</span> BTREE</span><br><span class="line">) <span class="keyword">ENGINE</span> = <span class="keyword">InnoDB</span> AUTO_INCREMENT = <span class="number">1</span> <span class="built_in">CHARACTER</span> <span class="keyword">SET</span> = utf8mb4 <span class="keyword">COLLATE</span> = utf8mb4_unicode_ci <span class="keyword">COMMENT</span> = <span class="string">'用户表'</span> ROW_FORMAT = <span class="keyword">Compact</span>;</span><br></pre></td></tr></table></figure><h2 id="4-启动项目"><a href="#4-启动项目" class="headerlink" title="4. 启动项目"></a>4. 启动项目</h2><p>到此处为止有关springboot和flyway的配置基本已经配置完毕，直接启动项目，查看控制台，可以看到flyway配置成功，可以正常执行脚本<br><img src="https://s1.ax1x.com/2020/04/14/JpEGy6.png" alt="JpEGy6.png"></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> Spring </category>
          
          <category> SpringBoot </category>
          
          <category> Flyway </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库版本控制 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>flyway入门使用教程</title>
      <link href="/posts/cd84d80b.html"/>
      <url>/posts/cd84d80b.html</url>
      
        <content type="html"><![CDATA[<h1 id="官网"><a href="#官网" class="headerlink" title="官网"></a>官网</h1><p><a href="https://flywaydb.org/" target="_blank" rel="noopener">https://flywaydb.org/</a></p><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>Flyway是独立于数据库的应用、管理并跟踪数据库变更的数据库版本管理工具。用通俗的话讲，Flyway可以像Git管理不同人的代码那样，管理不同人的sql脚本，从而做到数据库同步。</p><h1 id="在Maven中集成并使用"><a href="#在Maven中集成并使用" class="headerlink" title="在Maven中集成并使用"></a>在Maven中集成并使用</h1><h2 id="Maven中引入Flyway插件与MySQL整合"><a href="#Maven中引入Flyway插件与MySQL整合" class="headerlink" title="Maven中引入Flyway插件与MySQL整合"></a>Maven中引入Flyway插件与MySQL整合</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.flywaydb<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>flyway-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.2.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">driver</span>&gt;</span>com.mysql.cj.jdbc.Driver<span class="tag">&lt;/<span class="name">driver</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>jdbc:mysql://localhost:3306/test?serverTimezone=Asia/Shanghai<span class="symbol">&amp;amp;</span>useUnicode=true<span class="symbol">&amp;amp;</span>characterEncoding=utf8<span class="symbol">&amp;amp;</span>useSSL=false<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">user</span>&gt;</span>root<span class="tag">&lt;/<span class="name">user</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">password</span>&gt;</span>root<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">locations</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">location</span>&gt;</span>filesystem:src/main/resources/db/migration<span class="tag">&lt;/<span class="name">location</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">locations</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span>&gt;</span>flyway_schema_history<span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">sqlMigrationPrefix</span>&gt;</span>V<span class="tag">&lt;/<span class="name">sqlMigrationPrefix</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">undoSqlMigrationPrefix</span>&gt;</span>U<span class="tag">&lt;/<span class="name">undoSqlMigrationPrefix</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">repeatableSqlMigrationPrefix</span>&gt;</span>R<span class="tag">&lt;/<span class="name">repeatableSqlMigrationPrefix</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">sqlMigrationSeparator</span>&gt;</span>__<span class="tag">&lt;/<span class="name">sqlMigrationSeparator</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">sqlMigrationSuffixes</span>&gt;</span>.sql<span class="tag">&lt;/<span class="name">sqlMigrationSuffixes</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">encoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">encoding</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.19<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="configuration配置简介"><a href="#configuration配置简介" class="headerlink" title="configuration配置简介"></a><code>configuration</code>配置简介</h3><table><thead><tr><th align="center">参数</th><th align="center">是否必须</th><th align="center">默认值</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">driver</td><td align="center">否</td><td align="center">会根据数据库连接自动判断</td><td align="center">用于连接数据库的jdbc驱动</td></tr><tr><td align="center">url</td><td align="center">是</td><td align="center">–</td><td align="center">连接数据库的链接，对特殊符号需要进行转义。例如：<code>&amp;</code>需要转为<code>&amp;amp;</code></td></tr><tr><td align="center">user</td><td align="center">否</td><td align="center">–</td><td align="center">数据库账号名</td></tr><tr><td align="center">password</td><td align="center">否</td><td align="center">–</td><td align="center">数据库账号密码</td></tr><tr><td align="center">locations</td><td align="center">否</td><td align="center">filesystem:src/main/resources/db/migration</td><td align="center">指定数据库迁移sql执行脚本路径。有两种配置方式:1.通过<code>classpath</code>:指定类路径的包地址。2.通过<code>filesystem</code>:从项目的跟目录开始填写路径</td></tr><tr><td align="center">table</td><td align="center">否</td><td align="center">flyway_schema_history</td><td align="center">记录flyway框架执行的历史记录名称，库中没有会自动创建</td></tr><tr><td align="center">sqlMigrationPrefix</td><td align="center">否</td><td align="center">V</td><td align="center">版本化SQL迁移文件名前缀，一般sql脚本的命名规范为<code>前缀+版本号+分割符+描述+后缀</code>。例如<code>V1.1__Create_new_table.sql</code></td></tr><tr><td align="center">undoSqlMigrationPrefix</td><td align="center">否</td><td align="center">U</td><td align="center">撤销SQL迁移的脚本文件名前缀。撤销与该脚本具有相同版本号的SQL迁移文件造成的影响。文件命名结构：<code>前缀+版本号+分割符+描述+后缀</code>。例如:<code>U1.1__Undo.sql</code>。<strong>此配置仅限于商业版可用，社区版不可用</strong></td></tr><tr><td align="center">repeatableSqlMigrationPrefix</td><td align="center">否</td><td align="center">R</td><td align="center">可重复执行的SQL迁移脚本，命名规范:<code>前缀+分割符+描述+后缀</code>。例如：<code>R__Repea_run.sql</code></td></tr><tr><td align="center">sqlMigrationSeparator</td><td align="center">否</td><td align="center">__</td><td align="center">SQL迁移的文件名分隔符。<strong>注意是双下划线而不是一个</strong></td></tr><tr><td align="center">sqlMigrationSuffixes</td><td align="center">否</td><td align="center">.sql</td><td align="center">SQL迁移文件后缀。文件命名结构:<code>V1.1__Add_data.sql</code>。<br />可以指定多个后缀。例如：<code>.sql,.pkg,.pkd</code>。方便与其他工具兼容</td></tr><tr><td align="center">encoding</td><td align="center">否</td><td align="center">UTF-8</td><td align="center">指定SQL脚本编码格式</td></tr></tbody></table><ul><li>更多配置可参考<a href="https://flywaydb.org/documentation/maven/migrate#configuration" target="_blank" rel="noopener">官网</a></li></ul><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h3 id="mvn-flyway-migrate迁移"><a href="#mvn-flyway-migrate迁移" class="headerlink" title="mvn flyway:migrate迁移"></a><code>mvn flyway:migrate</code>迁移</h3><p><img src="https://s1.ax1x.com/2020/04/13/Gjrr3q.png" alt="Gjrr3q.png"></p><p>将架构迁移到最新版本。 如果<code>flyway_schema_history</code>不存在，它将自动创建架构历史记录表。</p><blockquote><p> 迁移是Flyway工作流程的核心。它将扫描文件列表或类路径以获取可用的迁移。它将它们与已应用于数据库的迁移进行比较。如果发现任何差异，它将迁移数据库以缩小差距。</p><p> 迁移最好在应用程序启动时执行，以避免数据库和代码期望之间的任何不兼容性。</p><p> 执行迁移是幂等的，并且可以安全地完成迁移，而不管架构的当前版本如何。</p><ul><li><p>示例1：我们具有9版之前的迁移功能，并且数据库的版本为5版。<br>迁移将依次应用迁移6、7、8和9。</p></li><li><p>示例2：我们提供了版本9之前的可用迁移，并且数据库的版本为9。<br>迁移不执行任何操作。</p><p>以上内容原自<a href="https://flywaydb.org/documentation/command/migrate#behavior" target="_blank" rel="noopener">官网</a>，使用Google翻译进行的机翻</p></li></ul></blockquote><ol><li><p>在<code>src/main/resources/db/migration</code>目录下创建第一个sql迁移脚本<code>V1.0__Create_user_table.sql</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="string">`user`</span>;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`user`</span>  (</span><br><span class="line"> <span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line"> <span class="string">`create_time`</span> datetime(<span class="number">0</span>) <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">CURRENT_TIMESTAMP</span>,</span><br><span class="line"> <span class="string">`update_time`</span> datetime(<span class="number">0</span>) <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">CURRENT_TIMESTAMP</span>,</span><br><span class="line"> <span class="string">`valid`</span> <span class="built_in">tinyint</span>(<span class="number">2</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">0</span> <span class="keyword">COMMENT</span> <span class="string">'是否有效 0.有效 1.无效'</span>,</span><br><span class="line"> <span class="string">`delete_time`</span> datetime(<span class="number">0</span>) <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line"> <span class="string">`name`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="built_in">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_unicode_ci <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'账号名称'</span>,</span><br><span class="line"> <span class="string">`password`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="built_in">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_unicode_ci <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'加密后密码'</span>,</span><br><span class="line"> <span class="string">`salt`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="built_in">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_unicode_ci <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'密码盐值'</span>,</span><br><span class="line"> <span class="string">`admin_role_ids`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="built_in">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_unicode_ci <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'角色id（多个使用,号隔开）'</span>,</span><br><span class="line"> PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>) <span class="keyword">USING</span> BTREE</span><br><span class="line">) <span class="keyword">ENGINE</span> = <span class="keyword">InnoDB</span> AUTO_INCREMENT = <span class="number">1</span> <span class="built_in">CHARACTER</span> <span class="keyword">SET</span> = utf8mb4 <span class="keyword">COLLATE</span> = utf8mb4_unicode_ci <span class="keyword">COMMENT</span> = <span class="string">'用户表'</span> ROW_FORMAT = <span class="keyword">Compact</span>;</span><br></pre></td></tr></table></figure></li><li><p>输入maven命令<code>mvn compile flyway:migrate</code>，可以看到控制台打印，执行成功<br><img src="https://s1.ax1x.com/2020/04/13/GjdQbj.png" alt="GjdQbj.png"></p></li><li><p>可以查看数据库发现除了<code>user</code>表外还多了一张<code>flyway_schema_history</code>表（图1），这张表中保存了每次执行<code>migration</code>的记录（图2）<br><img src="https://s1.ax1x.com/2020/04/13/GjwVeJ.png" alt="图1"></p></li></ol><p>   <img src="https://s1.ax1x.com/2020/04/13/Gj097d.png" alt="图2"></p><ol start="4"><li><p>当再次执行<code>mvn compile flyway:migrate</code>命令时，控制台会打印，目前数据库处于最新版本，无需进行迁移<br><img src="https://s1.ax1x.com/2020/04/13/Gj0ZjS.png" alt="Gj0ZjS.png"></p></li><li><p>可以再创建一个sql脚本<code>V1.1__ADD_data_to_user.sql</code>来向user表中添加数据:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`test`</span>.<span class="string">`user`</span>(<span class="string">`delete_time`</span>, <span class="string">`name`</span>, <span class="string">`password`</span>, <span class="string">`salt`</span>, <span class="string">`admin_role_ids`</span>) <span class="keyword">VALUES</span></span><br><span class="line">(<span class="string">'2020-04-10 11:10:09'</span>, <span class="string">'11'</span>, <span class="string">'11'</span>, <span class="string">'11'</span>, <span class="string">'11'</span>),</span><br><span class="line">(<span class="string">'2020-04-10 11:10:09'</span>, <span class="string">'11'</span>, <span class="string">'11'</span>, <span class="string">'11'</span>, <span class="string">'11'</span>),</span><br><span class="line">(<span class="string">'2020-04-10 11:10:09'</span>, <span class="string">'11'</span>, <span class="string">'11'</span>, <span class="string">'11'</span>, <span class="string">'11'</span>),</span><br><span class="line">(<span class="string">'2020-04-10 11:10:09'</span>, <span class="string">'11'</span>, <span class="string">'11'</span>, <span class="string">'11'</span>, <span class="string">'11'</span>),</span><br><span class="line">(<span class="string">'2020-04-10 11:10:09'</span>, <span class="string">'11'</span>, <span class="string">'11'</span>, <span class="string">'11'</span>, <span class="string">'11'</span>),</span><br><span class="line">(<span class="string">'2020-04-10 11:10:09'</span>, <span class="string">'11'</span>, <span class="string">'11'</span>, <span class="string">'11'</span>, <span class="string">'11'</span>),</span><br><span class="line">(<span class="string">'2020-04-10 11:10:09'</span>, <span class="string">'11'</span>, <span class="string">'11'</span>, <span class="string">'11'</span>, <span class="string">'11'</span>),</span><br><span class="line">(<span class="string">'2020-04-10 11:10:09'</span>, <span class="string">'11'</span>, <span class="string">'11'</span>, <span class="string">'11'</span>, <span class="string">'11'</span>)</span><br></pre></td></tr></table></figure></li></ol><ol start="6"><li>再次执行<code>mvn compile flyway:migrate</code>命令，查看控制台，可以看到flyway自动检测到了版本更新，并执行了添加脚本将数据添加到user表中<br><img src="https://s1.ax1x.com/2020/04/13/GjB3ad.png" alt="GjB3ad.png"></li></ol><p>   <img src="https://s1.ax1x.com/2020/04/13/GjBbz6.png" alt="GjBbz6.png"></p><h3 id="mvn-flyway-clean清除所有表"><a href="#mvn-flyway-clean清除所有表" class="headerlink" title="mvn flyway:clean清除所有表"></a><code>mvn flyway:clean</code>清除所有表</h3><p>删除已配置数据库中的所有表。</p><p><img src="https://s1.ax1x.com/2020/04/13/GjsZPs.png" alt="GjsZPs.png"></p><p>clean对与在开发和测试中有很大的帮助。这样当再执行<code>migrate</code> 迁移命令时会重新创建表，可以避免在测试中出现的一些脏数据影响代码逻辑。</p><ul><li><strong>在线上环境中慎用</strong></li></ul><h3 id="mvn-flyway-info打印迁移信息"><a href="#mvn-flyway-info打印迁移信息" class="headerlink" title="mvn flyway:info打印迁移信息"></a><code>mvn flyway:info</code>打印迁移信息</h3><p>打印有关所有迁移的详细信息和状态信息。</p><p><img src="https://s1.ax1x.com/2020/04/13/GjyLhd.png" alt="GjyLhd.png"></p><h3 id="mvn-flyway-validate校验"><a href="#mvn-flyway-validate校验" class="headerlink" title="mvn flyway:validate校验"></a><code>mvn flyway:validate</code>校验</h3><p>针对已解决的迁移（在文件系统或类路径上）验证已应用的迁移，以检测可能会导致无法准确创建架构的意外更改。</p><p>如果验证失败：</p><ul><li>发现迁移名称，类型或校验和方面的差异</li><li>已应用不再在本地解析的版本</li><li>已解决尚未应用的版本</li></ul><p><img src="https://s1.ax1x.com/2020/04/13/GjcTFe.png" alt="GjcTFe.png"></p><h3 id="mvn-flyway-undo撤销"><a href="#mvn-flyway-undo撤销" class="headerlink" title="mvn flyway:undo撤销"></a><code>mvn flyway:undo</code>撤销</h3><p>撤消最近应用的版本迁移。</p><p><img src="https://s1.ax1x.com/2020/04/13/Gjg3Ox.png" alt="Gjg3Ox.png"></p><h3 id="mvn-flyway-baseline基准"><a href="#mvn-flyway-baseline基准" class="headerlink" title="mvn flyway:baseline基准"></a><code>mvn flyway:baseline</code>基准</h3><p>对现有数据库进行基准测试，如果不存在<code>flyway_schema_history</code>文件，则会直接创建，并以当前状态为版本1</p><p><img src="https://s1.ax1x.com/2020/04/13/Gj2uHf.png" alt="Gj2uHf.png"></p><h3 id="mvn-flyway-repair修复"><a href="#mvn-flyway-repair修复" class="headerlink" title="mvn flyway:repair修复"></a><code>mvn flyway:repair</code>修复</h3><p>修复Flyway模式历史记录表。这将执行以下操作：</p><ul><li>在没有DDL事务的数据库上删除所有失败的迁移<br>（留下的用户对象仍必须手动清理）</li><li>将可用迁移的校验和，描述和类型与可用迁移重新对齐</li></ul><p><img src="https://s1.ax1x.com/2020/04/13/Gj2s29.png" alt="Gj2s29.png"></p><blockquote><p>参考 <a href="https://flywaydb.org/documentation/maven/" target="_blank" rel="noopener">官网</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> Flyway </category>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库版本控制 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot2.2.X版本懒加载的实现方法</title>
      <link href="/posts/53d4b364.html"/>
      <url>/posts/53d4b364.html</url>
      
        <content type="html"><![CDATA[<p>项目依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="1-全局配置"><a href="#1-全局配置" class="headerlink" title="1. 全局配置"></a>1. 全局配置</h2><h3 id="写法1"><a href="#写法1" class="headerlink" title="写法1"></a>写法1</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    SpringApplication sa = <span class="keyword">new</span> SpringApplication(Application<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    sa.setLazyInitialization(<span class="keyword">true</span>);</span><br><span class="line">    sa.run(args);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="写法2"><a href="#写法2" class="headerlink" title="写法2"></a>写法2</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">SpringApplicationBuilder sab = <span class="keyword">new</span> SpringApplicationBuilder(Application<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">sab.lazyInitialization(<span class="keyword">true</span>).run(args);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="写法3"><a href="#写法3" class="headerlink" title="写法3"></a>写法3</h3><p>直接在<code>application.yml</code>文件中</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">main:</span></span><br><span class="line">    <span class="attr">lazy-initialization:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h3 id="展示效果"><a href="#展示效果" class="headerlink" title="展示效果"></a>展示效果</h3><h4 id="Controller层代码"><a href="#Controller层代码" class="headerlink" title="Controller层代码"></a><code>Controller</code>层代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lx.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.lx.service.IndexService;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Lazy;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@Lazy</span>(<span class="keyword">false</span>)</span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IndexController</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">IndexController</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    log.info(<span class="string">"[&#123;&#125;]开始初始化"</span>, IndexController<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Autowired</span></span><br><span class="line">  <span class="keyword">private</span> IndexService indexService;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@GetMapping</span>(<span class="string">"/"</span>)</span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">index</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    indexService.index();</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Service层代码"><a href="#Service层代码" class="headerlink" title="Service层代码"></a><code>Service</code>层代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lx.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Lazy;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@Lazy</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IndexService</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">IndexService</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    log.info(<span class="string">"[&#123;&#125;]开始初始化"</span>, IndexService<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">index</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    log.info(<span class="string">"index method run"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="展示效果-1"><a href="#展示效果-1" class="headerlink" title="展示效果"></a>展示效果</h4><p>启动项目后打印日志</p><p><img src="https://s1.ax1x.com/2020/04/10/GTThvt.png" alt="GTThvt.png"></p><p>访问<code>localhost:8080</code>后打印的日志</p><p><img src="https://s1.ax1x.com/2020/04/10/GTTzrV.png" alt="GTTzrV.png"></p><p>配置成功</p><h2 id="2-局部类-方法配置"><a href="#2-局部类-方法配置" class="headerlink" title="2. 局部类/方法配置"></a>2. 局部<code>类/方法</code>配置</h2><p>想要实现局部<code>类/方法</code>的懒加载很简单，只需要在<code>类/方法</code>上添加<code>@Lazy</code>注解即可，默认值<code>true</code>开启懒加载，不开启可设置为<code>false</code>，例如：想要懒加载<code>IndexController</code>那么只需要在类上添加<code>@Lazy</code>。<strong>注：我这里在展示局部实现效果时，项目中以去除全局懒加载的配置</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lx.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.lx.service.IndexService;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Lazy;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Lazy</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IndexController</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">IndexController</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    log.info(<span class="string">"[&#123;&#125;]开始初始化"</span>, IndexController<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Autowired</span></span><br><span class="line">  <span class="keyword">private</span> IndexService indexService;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@GetMapping</span>(<span class="string">"/"</span>)</span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">index</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    indexService.index();</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>启动项目打印日志</p><p><img src="https://s1.ax1x.com/2020/04/10/GTbn4e.png" alt="GTbn4e.png"></p><p>调用<code>localhost:8080</code>接口后打印的日志</p><p><img src="https://s1.ax1x.com/2020/04/10/GTbQgA.png" alt="GTbQgA.png"></p><p><strong>注：当设置懒加载的<code>类/方法</code>有被<code>其他类</code>初始化注入时，如果注入此<code>类/方法</code>的类没有设置懒加载的话，在启动时一样会被初始话。</strong>例如：给<code>IndexService</code>添加<code>@Lazy</code>懒加载注解，然后去掉<code>IndexController</code>的懒加载注解后再启动项目查看日志</p><p><img src="https://s1.ax1x.com/2020/04/10/GTLiex.png" alt="GTLiex.png"></p><h3 id="局部配置比全局配置优先级要高"><a href="#局部配置比全局配置优先级要高" class="headerlink" title="局部配置比全局配置优先级要高"></a>局部配置比全局配置优先级要高</h3><ol><li><p>在<code>application.yml</code>中设置开启全局懒加载配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">main:</span></span><br><span class="line">    <span class="attr">lazy-initialization:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></li></ol><ol start="2"><li><p>给<code>IndexService</code>通过<code>@Lazy</code>设置禁用懒加载</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lx.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Lazy;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Lazy</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IndexService</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">IndexService</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    log.info(<span class="string">"[&#123;&#125;]开始初始化"</span>, IndexService<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">index</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    log.info(<span class="string">"index method run"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ol start="3"><li><p>启动项目查看日志打印，可以看到<code>IndexService</code>在项目启动时就进行了初始化，而<code>IndexController</code>在启动时并没有进行初始化</p><p><img src="https://s1.ax1x.com/2020/04/10/GTOGHx.png" alt="GTOGHx.png"></p></li></ol><blockquote><p>参考博客：<a href="https://juejin.im/post/5e83f795f265da47e449f4ea" target="_blank" rel="noopener">https://juejin.im/post/5e83f795f265da47e449f4ea</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> Spring </category>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 懒加载 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>windows下python的mitmproxy启动报ModuleNotFoundError: No module named &#39;brotli._brotli&#39;错误</title>
      <link href="/posts/7158fbb2.html"/>
      <url>/posts/7158fbb2.html</url>
      
        <content type="html"><![CDATA[<h3 id="错误日志如下"><a href="#错误日志如下" class="headerlink" title="错误日志如下"></a>错误日志如下</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\fengz\AppData\Local\Programs\Python\Python37\Scripts\mitmdump.exe -p <span class="number">8889</span> -s mitm_addons.py</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"c:\users\fengz\appdata\local\programs\python\python37\lib\runpy.py"</span>, line <span class="number">193</span>, <span class="keyword">in</span> _run_module_as_main</span><br><span class="line">    <span class="string">"__main__"</span>, mod_spec)</span><br><span class="line">  File <span class="string">"c:\users\fengz\appdata\local\programs\python\python37\lib\runpy.py"</span>, line <span class="number">85</span>, <span class="keyword">in</span> _run_code</span><br><span class="line">    exec(code, run_globals)</span><br><span class="line">  File <span class="string">"C:\Users\fengz\AppData\Local\Programs\Python\Python37\Scripts\mitmdump.exe\__main__.py"</span>, line <span class="number">5</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">  File <span class="string">"c:\users\fengz\appdata\local\programs\python\python37\lib\site-packages\mitmproxy\tools\main.py"</span>, line <span class="number">22</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    <span class="keyword">from</span> ._main <span class="keyword">import</span> *  <span class="comment"># noqa</span></span><br><span class="line">  File <span class="string">"c:\users\fengz\appdata\local\programs\python\python37\lib\site-packages\mitmproxy\tools\_main.py"</span>, line <span class="number">13</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    <span class="keyword">from</span> mitmproxy.tools <span class="keyword">import</span> cmdline  <span class="comment"># noqa</span></span><br><span class="line">  File <span class="string">"c:\users\fengz\appdata\local\programs\python\python37\lib\site-packages\mitmproxy\tools\cmdline.py"</span>, line <span class="number">3</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    <span class="keyword">from</span> mitmproxy.addons <span class="keyword">import</span> core</span><br><span class="line">  File <span class="string">"c:\users\fengz\appdata\local\programs\python\python37\lib\site-packages\mitmproxy\addons\__init__.py"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    <span class="keyword">from</span> mitmproxy.addons <span class="keyword">import</span> anticache</span><br><span class="line">  File <span class="string">"c:\users\fengz\appdata\local\programs\python\python37\lib\site-packages\mitmproxy\addons\anticache.py"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    <span class="keyword">from</span> mitmproxy <span class="keyword">import</span> ctx</span><br><span class="line">  File <span class="string">"c:\users\fengz\appdata\local\programs\python\python37\lib\site-packages\mitmproxy\ctx.py"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    <span class="keyword">import</span> mitmproxy.master  <span class="comment"># noqa</span></span><br><span class="line">  File <span class="string">"c:\users\fengz\appdata\local\programs\python\python37\lib\site-packages\mitmproxy\master.py"</span>, line <span class="number">7</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    <span class="keyword">from</span> mitmproxy <span class="keyword">import</span> addonmanager</span><br><span class="line">  File <span class="string">"c:\users\fengz\appdata\local\programs\python\python37\lib\site-packages\mitmproxy\addonmanager.py"</span>, line <span class="number">8</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    <span class="keyword">from</span> mitmproxy <span class="keyword">import</span> eventsequence</span><br><span class="line">  File <span class="string">"c:\users\fengz\appdata\local\programs\python\python37\lib\site-packages\mitmproxy\eventsequence.py"</span>, line <span class="number">5</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    <span class="keyword">from</span> mitmproxy <span class="keyword">import</span> http</span><br><span class="line">  File <span class="string">"c:\users\fengz\appdata\local\programs\python\python37\lib\site-packages\mitmproxy\http.py"</span>, line <span class="number">6</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    <span class="keyword">from</span> mitmproxy.net <span class="keyword">import</span> http</span><br><span class="line">  File <span class="string">"c:\users\fengz\appdata\local\programs\python\python37\lib\site-packages\mitmproxy\net\http\__init__.py"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    <span class="keyword">from</span> mitmproxy.net.http.request <span class="keyword">import</span> Request</span><br><span class="line">  File <span class="string">"c:\users\fengz\appdata\local\programs\python\python37\lib\site-packages\mitmproxy\net\http\request.py"</span>, line <span class="number">10</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    <span class="keyword">from</span> mitmproxy.net.http <span class="keyword">import</span> message</span><br><span class="line">  File <span class="string">"c:\users\fengz\appdata\local\programs\python\python37\lib\site-packages\mitmproxy\net\http\message.py"</span>, line <span class="number">5</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    <span class="keyword">from</span> mitmproxy.net.http <span class="keyword">import</span> encoding</span><br><span class="line">  File <span class="string">"c:\users\fengz\appdata\local\programs\python\python37\lib\site-packages\mitmproxy\net\http\encoding.py"</span>, line <span class="number">11</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    <span class="keyword">import</span> brotli</span><br><span class="line">  File <span class="string">"c:\users\fengz\appdata\local\programs\python\python37\lib\site-packages\brotli\__init__.py"</span>, line <span class="number">3</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    <span class="keyword">from</span> .brotli <span class="keyword">import</span> (</span><br><span class="line">  File <span class="string">"c:\users\fengz\appdata\local\programs\python\python37\lib\site-packages\brotli\brotli.py"</span>, line <span class="number">5</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    <span class="keyword">from</span> ._brotli <span class="keyword">import</span> ffi, lib</span><br><span class="line">ModuleNotFoundError: No module named <span class="string">'brotli._brotli'</span></span><br></pre></td></tr></table></figure><h3 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h3><p>是因为我之前不小心升级了<code>brotlipy</code>这个库，<strong>注：虽然报的错误是<code>brotli._brotli</code>的依赖找不到，但实际使用的是<code>brotlipy</code>库</strong>，新版为<code>0.7.0</code>版本其内没有<code>_brotli</code>文件</p><h3 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h3><p>将其降至<code>0.6.0</code>版本即可，在安装<code>brotlipy 0.6.0</code>版本时可能会报<code>error: Microsoft Visual C++ 14.0 is required. Get it with &quot;Microsoft Visual C++ Build Tools&quot;</code>错误可参考 <a href="/posts/60796a12.html">此篇博客解决</a></p>]]></content>
      
      
      <categories>
          
          <category> BUG </category>
          
          <category> 异常 </category>
          
          <category> Python </category>
          
          <category> 爬虫 </category>
          
          <category> mitmproxy </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
            <tag> mitmproxy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>windows下python`pip install xxx`安装第三方库时报`error: Microsoft Visual C++ 14.0 is required`解决办法</title>
      <link href="/posts/60796a12.html"/>
      <url>/posts/60796a12.html</url>
      
        <content type="html"><![CDATA[<h2 id="方法1"><a href="#方法1" class="headerlink" title="方法1"></a>方法1</h2><p>我们可以直接去<a href="https://www.lfd.uci.edu/~gohlke/pythonlibs/" target="_blank" rel="noopener">https://www.lfd.uci.edu/~gohlke/pythonlibs/</a>去查找自己需要的包，然后进行下载对应的版本，例如：要下载<code>brotlipy</code>库，可以直接在页面按<code>ctrl+f</code>进行搜索，即可找到如图</p><p><img src="https://s1.ax1x.com/2020/04/07/Gck0Gd.png" alt="Gck0Gd.png"></p><ul><li><code>cp</code>后边对应的是python版本</li><li><code>amd64</code>代表的是64位</li></ul><p>这边我的环境是<code>python3.7</code>、<code>win64位</code>所以我选择下载安装<code>brotlipy‑0.7.0‑cp37‑cp37m‑win_amd64.whl</code>这个版本下载完后，安装方法如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install C:\Users\Administrator\Desktop\brotlipy‑<span class="number">0.7</span><span class="number">.0</span>‑cp37‑cp37m‑win_amd64.whl</span><br></pre></td></tr></table></figure><h2 id="方法2"><a href="#方法2" class="headerlink" title="方法2"></a>方法2</h2><p>去<a href="https://visualstudio.microsoft.com/zh-hans/?rr=https%3A%2F%2Fwww.microsoft.com%2Fzh-cn%2Fwindows%2F" target="_blank" rel="noopener">微软官网</a>下载C++工具，选择社区版即可，如图</p><p><img src="https://s1.ax1x.com/2020/04/07/GcA6p9.png" alt="GcA6p9.png"></p><p>下载好后，打开<strong>只选择<code>使用C++的桌面开发</code>其他的都取消勾选</strong>，右侧<code>安装详细信息</code>用默认勾选的即可</p><p><img src="https://s1.ax1x.com/2020/04/07/GcAztg.png" alt="GcAztg.png"></p><p>然后点击安装等待安装完后，再次输入<code>pip install brotlipy</code>  即可正常安装</p>]]></content>
      
      
      <categories>
          
          <category> BUG </category>
          
          <category> 异常 </category>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pip安装报错 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IDEA项目启动崩溃，控制台没有错误信息问题</title>
      <link href="/posts/7bd3e3ff.html"/>
      <url>/posts/7bd3e3ff.html</url>
      
        <content type="html"><![CDATA[<p>idea中项目以线下环境启动，程序启动失败，项目无法访问，控制台打印部分日志如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">2020-01-06 19:35:55.170 | INFO  --- [RMI TCP Connection(3)-127.0.0.1] |      org.hibernate.validator.internal.util.Version :30   | HV000001: Hibernate Validator 5.2.4.Final</span><br><span class="line">06-Jan-2020 19:35:57.481 SEVERE [RMI TCP Connection(3)-127.0.0.1] org.apache.catalina.core.StandardContext.startInternal One or more listeners failed to start. Full details will be found in the appropriate container log file</span><br><span class="line">06-Jan-2020 19:35:57.484 SEVERE [RMI TCP Connection(3)-127.0.0.1] org.apache.catalina.core.StandardContext.startInternal Context [] startup failed due to previous errors</span><br><span class="line">2020-01-06 19:35:57.478 | INFO  --- [RMI TCP Connection(3)-127.0.0.1] |      org.springframework.web.context.ContextLoader :345  | Root WebApplicationContext: initialization completed in 15109 ms</span><br><span class="line">2020-01-06 19:35:57.495 | INFO  --- [RMI TCP Connection(3)-127.0.0.1] |   o.s.web.context.support.XmlWebApplicationContext :982  | Closing Root WebApplicationContext: startup date [Mon Jan 06 19:35:42 CST 2020]; root of context hierarchy</span><br><span class="line">06-Jan-2020 19:35:57.546 WARNING [RMI TCP Connection(3)-127.0.0.1] org.apache.catalina.loader.WebappClassLoaderBase.clearReferencesJdbc The web application [ROOT] registered the JDBC driver [net.sf.log4jdbc.DriverSpy] but failed to unregister it when the web application was stopped. To prevent a memory leak, the JDBC Driver has been forcibly unregistered.</span><br><span class="line">06-Jan-2020 19:35:57.546 WARNING [RMI TCP Connection(3)-127.0.0.1] org.apache.catalina.loader.WebappClassLoaderBase.clearReferencesJdbc The web application [ROOT] registered the JDBC driver [com.mysql.jdbc.Driver] but failed to unregister it when the web application was stopped. To prevent a memory leak, the JDBC Driver has been forcibly unregistered.</span><br><span class="line">[2020-01-06 07:35:57,595] Artifact dudu-erp-admin:war exploded: Error during artifact deployment. See server log for details.</span><br></pre></td></tr></table></figure><p>可以看到日志中并没有错误信息，只是报了一个数据库JDCB驱动相关的警告，期初以为是因为打开的软件太多，系统内存不够，然后关闭了很多软件再次尝试仍然是报这个信息，然后又尝试了一波玄学操作：<strong>重启电脑，删除项目中的<code>.idea</code>文件夹和<code>*.iml</code>文件后再重启项目</strong>，这种做法一般在idea出现bug的时候可以解决，但是在这里问题还是无法解决。</p><p>在尝试了几种解决办法后仍然不能正常启动，就又从新从上往下看了遍日志，发先了两行藏在<code>info</code>日志中间的红色日志<br><img src="https://s2.ax1x.com/2020/01/06/lykCwV.png" alt="lykCwV.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">06-Jan-2020 19:35:57.481 SEVERE [RMI TCP Connection(3)-127.0.0.1] org.apache.catalina.core.StandardContext.startInternal One or more listeners failed to start. Full details will be found in the appropriate container log file</span><br><span class="line">06-Jan-2020 19:35:57.484 SEVERE [RMI TCP Connection(3)-127.0.0.1] org.apache.catalina.core.StandardContext.startInternal Context [] startup failed due to previous errors</span><br></pre></td></tr></table></figure><p>到这里错误信息就稍微明了一些了，说是<strong>因为一个或多个侦听器无法启动导致的错误，详细日志需要查看容器日志文件。</strong>  看到这里就打开了Tomcat的<code>catalina.2020-01-06.log</code>和<code>localhost.2020-01-06.log</code> 进行查找，然后在<code>localhost*.log</code>日志中找到了错误信息:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">org.apache.catalina.core.StandardContext.listenerStart Exception sending context initialized event to listener instance of class org.springframework.web.context.ContextLoaderListener</span><br><span class="line"> java.lang.IllegalStateException: Cannot initialize context because there is already a root application context present - check whether you have multiple ContextLoader* definitions in your web.xml!</span><br><span class="line">at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:297)</span><br><span class="line">at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:107)</span><br><span class="line">at org.apache.catalina.core.StandardContext.listenerStart(StandardContext.java:4738)</span><br></pre></td></tr></table></figure><p>经过检查日志发现，是因为我之前为了处理区分项目线上线下环境时继承重写了<code>org.springframework.web.context.ContextLoaderListener</code>监听，在<code>web.xml</code>中配置时加入自己重写过的<code>listener</code>后，没有删除<code>ContextLoaderListener</code>监听导致的，删除后即可正常启动项目</p>]]></content>
      
      
      <categories>
          
          <category> idea </category>
          
          <category> Java </category>
          
          <category> Spring </category>
          
          <category> BUG </category>
          
          <category> 异常 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IllegalStateException </tag>
            
            <tag> 没有日志 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>通过GitHub Pages+Hexo搭建个人博客</title>
      <link href="/posts/ab50cd13.html"/>
      <url>/posts/ab50cd13.html</url>
      
        <content type="html"><![CDATA[<h1 id="一、创建仓库"><a href="#一、创建仓库" class="headerlink" title="一、创建仓库"></a>一、创建仓库</h1><ol><li><p>在Github任意页面的右上角点击<code>+</code>号，然后选择<code>New repository</code>创建项目<br><img src="https://s2.ax1x.com/2019/12/20/QOhgZF.png" alt="QOhgZF.png"><br>项目</p></li><li><p>使用<code>Owner</code>下拉菜单，然后选择要拥有该存储库的帐户，这里选择的是FENG1000。<br><img src="https://s2.ax1x.com/2019/12/20/QO4EJs.png" alt="QO4EJs.png"></p></li><li><p>输入存储库名称和可选描述。</p><ol><li>存储库名称可以任意起，然后将静态资源部署在<code>gh-pages</code>，部署成功后访问地址为<code>&lt;username&gt;.github.io/[存储库名称]/</code></li><li>想要实现直接通过<code>&lt;username&gt;.github.io</code>方式访问博客则存储库命名必须为<code>&lt;username&gt;.github.io</code>，例如：用户名为<code>FENG1000</code>，则要创建的存储库名为<code>FENG1000.github.io</code>。我这里因为已经创建过所以提示已存在。<br><img src="https://s2.ax1x.com/2019/12/20/QOIgZ8.png" alt="QOIgZ8.png"></li></ol></li><li><p>选择将存储库设为公共或私有。公开存储库对公众可见，而私有存储库仅供你以及与之共享的人访问。<br><img src="https://s2.ax1x.com/2019/12/20/QOo9L6.png" alt="QOo9L6.png"></p></li><li><p>单击<code>Ceate repository</code>创建存储库。</p></li></ol><blockquote><p>如果想通过码云创建 <strong>码云Pages</strong> 可参考 <a href="https://gitee.com/help/categories/56" target="_blank" rel="noopener">官方</a></p></blockquote><h1 id="二、安装Hexo"><a href="#二、安装Hexo" class="headerlink" title="二、安装Hexo"></a>二、安装Hexo</h1><h2 id="安装前提"><a href="#安装前提" class="headerlink" title="安装前提"></a>安装前提</h2><p>安装 Hexo 相当简单，只需要先安装下列应用程序即可：</p><ul><li>Node.js (Node.js 版本需不低于 8.10，建议使用 Node.js 10.0 及以上版本)</li><li>Git<br>如果你的电脑中已经安装上述必备程序， 可以直接前往 <a href="#安装Hexo">安装Hexo</a> 步骤。</li></ul><p>如果电脑中尚未安装所需要的程序，请根据以下安装指示完成安装。</p><h2 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h2><ul><li>Windows：下载并安装 <a href="https://git-scm.com/download/win" target="_blank" rel="noopener">git</a>.</li><li>Mac：使用 <a href="http://mxcl.github.com/homebrew/" target="_blank" rel="noopener">Homebrew</a>, <a href="http://www.macports.org/" target="_blank" rel="noopener">MacPorts</a> 或者下载 <a href="http://sourceforge.net/projects/git-osx-installer/" target="_blank" rel="noopener">安装程序</a>。</li><li>Linux (Ubuntu, Debian)：<code>sudo apt-get install git-core</code></li><li>Linux (Fedora, Red Hat, CentOS)：<code>sudo yum install git-core</code></li></ul><blockquote><h3 id="Mac-用户"><a href="#Mac-用户" class="headerlink" title="Mac 用户"></a>Mac 用户</h3><p>如果在编译时可能会遇到问题，请先到 App Store 安装 Xcode，Xcode 完成后，启动并进入 <strong>Preferences -&gt; Download -&gt; Command Line Tools -&gt; Install</strong> 安装命令行工具。</p></blockquote><blockquote><h3 id="Windows-用户"><a href="#Windows-用户" class="headerlink" title="Windows 用户"></a>Windows 用户</h3><p>对于中国大陆地区用户，可以前往 <a href="https://npm.taobao.org/mirrors/git-for-windows/" target="_blank" rel="noopener">淘宝 Git for Windows 镜像</a> 下载 git 安装包。</p></blockquote><h2 id="安装NodeJs"><a href="#安装NodeJs" class="headerlink" title="安装NodeJs"></a>安装NodeJs</h2><p>Node.js 为大多数平台提供了官方的 <a href="https://nodejs.org/en/download/" target="_blank" rel="noopener">安装程序</a>。对于中国大陆地区用户，可以前往 <a href="https://npm.taobao.org/mirrors/node" target="_blank" rel="noopener">淘宝 Node.js 镜像</a> 下载。其它的安装方法：</p><ul><li>Windows：通过 <a href="https://github.com/jasongin/nvs/" target="_blank" rel="noopener">nvs</a>（推荐）或者<a href="https://github.com/nvm-sh/nvm" target="_blank" rel="noopener">nvm</a> 安装。</li><li>Mac：使用 <a href="https://brew.sh/" target="_blank" rel="noopener">Homebrew</a> 或 <a href="http://www.macports.org/" target="_blank" rel="noopener">MacPorts</a> 安装。</li><li>Linux（DEB/RPM-based）：从 <a href="https://github.com/nodesource/distributions" target="_blank" rel="noopener">NodeSource</a> 安装。</li><li>其它：使用相应的软件包管理器进行安装，可以参考由 Node.js 提供的 <a href="https://nodejs.org/en/download/package-manager/" target="_blank" rel="noopener">指导</a></li></ul><p>对于 Mac 和 Linux 同样建议使用 nvs 或者 nvm，以避免可能会出现的权限问题。</p><blockquote><h3 id="Windows-用户-1"><a href="#Windows-用户-1" class="headerlink" title="Windows 用户"></a>Windows 用户</h3><p>使用 Node.js 官方安装程序时，请确保勾选 <strong>Add to PATH</strong> 选项（默认已勾选）</p></blockquote><blockquote><h3 id="For-Mac-Linux-用户"><a href="#For-Mac-Linux-用户" class="headerlink" title="For Mac / Linux 用户"></a>For Mac / Linux 用户</h3><p>如果在尝试安装 Hexo 的过程中出现 <code>EACCES</code> 权限错误，请遵循 <a href="https://docs.npmjs.com/resolving-eacces-permissions-errors-when-installing-packages-globally" target="_blank" rel="noopener">由 npmjs 发布的指导</a> 修复该问题。强烈建议 不要 使用 root、sudo 等方法覆盖权限</p></blockquote><h2 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h2><p>所有必备的应用程序安装完成后，即可使用 npm 安装 Hexo。</p><figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><h2 id="进阶安装和使用"><a href="#进阶安装和使用" class="headerlink" title="进阶安装和使用"></a>进阶安装和使用</h2><p>对于熟悉 npm 的进阶用户，可以仅局部安装 <code>hexo</code> 包。</p><figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo</span><br></pre></td></tr></table></figure><p>安装以后，可以使用以下两种方式执行 Hexo：</p><ol><li><code>npx hexo &lt;command&gt;</code></li><li>将 Hexo 所在的目录下的 <code>node_modules</code> 添加到环境变量之中即可直接使用 <code>hexo &lt;command&gt;</code>：<br><img src="https://s2.ax1x.com/2019/12/20/QObEHP.png" alt="QObEHP.png"></li></ol><h1 id="三、使用Hexo建站"><a href="#三、使用Hexo建站" class="headerlink" title="三、使用Hexo建站"></a>三、使用Hexo建站</h1><p>安装 Hexo 完成后，执行下列命令，Hexo 将会在指定文件夹中新建所需要的文件。</p><figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo init &lt;folder&gt;</span><br><span class="line">cd &lt;folder&gt;</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure><p>新建完成后，指定文件夹的目录如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── _config.yml</span><br><span class="line">├── package.json</span><br><span class="line">├── scaffolds</span><br><span class="line">├── source</span><br><span class="line">|   ├── _drafts</span><br><span class="line">|   └── _posts</span><br><span class="line">└── themes</span><br></pre></td></tr></table></figure><h2 id="config-yml"><a href="#config-yml" class="headerlink" title="_config.yml"></a>_config.yml</h2><p>网站的 <a href="https://hexo.io/zh-cn/docs/configuration" target="_blank" rel="noopener">配置</a> 信息，您可以在此配置大部分的参数。</p><h2 id="package-json"><a href="#package-json" class="headerlink" title="package.json"></a>package.json</h2><p>应用程序的信息。<a href="https://ejs.co/" target="_blank" rel="noopener">EJS</a>, <a href="http://learnboost.github.io/stylus/" target="_blank" rel="noopener">Stylus</a> 和 <a href="http://daringfireball.net/projects/markdown/" target="_blank" rel="noopener">Markdown</a> renderer 已默认安装，可以自由移除。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"hexo-site"</span>,</span><br><span class="line">  <span class="attr">"version"</span>: <span class="string">"0.0.0"</span>,</span><br><span class="line">  <span class="attr">"private"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">"hexo"</span>: &#123;</span><br><span class="line">    <span class="attr">"version"</span>: <span class="string">""</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"dependencies"</span>: &#123;</span><br><span class="line">    <span class="attr">"hexo"</span>: <span class="string">"^3.8.0"</span>,</span><br><span class="line">    <span class="attr">"hexo-generator-archive"</span>: <span class="string">"^0.1.5"</span>,</span><br><span class="line">    <span class="attr">"hexo-generator-category"</span>: <span class="string">"^0.1.3"</span>,</span><br><span class="line">    <span class="attr">"hexo-generator-index"</span>: <span class="string">"^0.2.1"</span>,</span><br><span class="line">    <span class="attr">"hexo-generator-tag"</span>: <span class="string">"^0.2.0"</span>,</span><br><span class="line">    <span class="attr">"hexo-renderer-ejs"</span>: <span class="string">"^0.3.1"</span>,</span><br><span class="line">    <span class="attr">"hexo-renderer-stylus"</span>: <span class="string">"^0.3.3"</span>,</span><br><span class="line">    <span class="attr">"hexo-renderer-marked"</span>: <span class="string">"^0.3.2"</span>,</span><br><span class="line">    <span class="attr">"hexo-server"</span>: <span class="string">"^0.3.3"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="scaffolds"><a href="#scaffolds" class="headerlink" title="scaffolds"></a>scaffolds</h2><p><a href="https://hexo.io/zh-cn/docs/writing" target="_blank" rel="noopener">模版</a> 文件夹。当您新建文章时，Hexo 会根据 scaffold 来建立文件。</p><p>Hexo的模板是指在新建的文章文件中默认填充的内容。例如，如果修改<code>scaffold/post.md</code>中的<code>Front-matter</code>内容，那么每次新建一篇文章时都会包含这个修改。</p><h2 id="source"><a href="#source" class="headerlink" title="source"></a>source</h2><p>资源文件夹是存放用户资源的地方。除 <code>_posts</code> 文件夹之外，开头命名为 <code>_</code> (下划线)的文件 <code>/</code> 文件夹和隐藏的文件将会被忽略。Markdown 和 HTML 文件会被解析并放到 <code>public</code> 文件夹，而其他文件会被拷贝过去。</p><h2 id="themes"><a href="#themes" class="headerlink" title="themes"></a>themes</h2><p><a href="https://hexo.io/zh-cn/docs/themes" target="_blank" rel="noopener">主题</a> 文件夹。Hexo 会根据主题来生成静态页面。</p><h1 id="四、Hexo建站配置"><a href="#四、Hexo建站配置" class="headerlink" title="四、Hexo建站配置"></a>四、Hexo建站配置</h1><p>可以在 <code>_config.yml</code> 中修改大部分的配置。</p><h2 id="网站"><a href="#网站" class="headerlink" title="网站"></a>网站</h2><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>title</td><td>网站标题</td></tr><tr><td>subtitle</td><td>网站副标题</td></tr><tr><td>description</td><td>网站描述</td></tr><tr><td>keywords</td><td>网站的关键词。使用半角逗号 , 分隔多个关键词。</td></tr><tr><td>author</td><td>你的名字</td></tr><tr><td>language</td><td>网站使用的语言，如: <code>en</code>, <code>zh-CN</code></td></tr><tr><td>timezone</td><td>网站时区。Hexo 默认使用您电脑的时区。请参考 时区列表 进行设置，如 <code>America/New_York</code>, <code>Japan</code>, 和 <code>UTC</code> 。一般的，对于中国大陆地区可以使用 <code>Asia/Shanghai</code>。</td></tr></tbody></table><p>其中，<code>description</code>主要用于SEO，告诉搜索引擎一个关于您站点的简单描述，通常建议在其中包含您网站的关键词。<code>author</code>参数用于主题显示文章的作者。</p><h2 id="网址"><a href="#网址" class="headerlink" title="网址"></a>网址</h2><table><thead><tr><th>参数</th><th>描述</th><th>默认值</th></tr></thead><tbody><tr><td>url</td><td>网址</td><td></td></tr><tr><td>root</td><td>网站根目录</td><td></td></tr><tr><td>permalink</td><td>文章的 永久链接 格式</td><td></td></tr><tr><td>permalink_defaults</td><td>永久链接中各部分的默认值</td><td></td></tr><tr><td>pretty_urls</td><td>改写 permalink 的值来美化 URL</td><td></td></tr><tr><td>pretty_urls.trailing_index</td><td>是否在永久链接中保留尾部的 index.html，设置为 false 时去除</td><td>true</td></tr><tr><td>pretty_urls.trailing_html</td><td>是否在永久链接中保留尾部的 .html, 设置为 false 时去除 (对尾部的 index.html无效)</td><td>true</td></tr></tbody></table><blockquote><h3 id="网站存放在子目录"><a href="#网站存放在子目录" class="headerlink" title="网站存放在子目录"></a>网站存放在子目录</h3><p>如果您的网站存放在子目录中，例如 <code>http://yoursite.com/blog</code>，则请将您的 <code>url</code> 设为 <code>http://yoursite.com/blog</code> 并把 <code>root</code> 设为 <code>/blog/</code>。</p></blockquote><p>例如：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 比如，一个页面的永久链接是 http://example.com/foo/bar/index.html</span></span><br><span class="line"><span class="attr">pretty_urls:</span></span><br><span class="line">  <span class="attr">trailing_index:</span> <span class="literal">false</span></span><br><span class="line"><span class="comment"># 此时页面的永久链接会变为 http://example.com/foo/bar/</span></span><br></pre></td></tr></table></figure><p>这里只对部分常用配置讲解，详细参考<a href="https://hexo.io/zh-cn/docs/configuration" target="_blank" rel="noopener">官网</a></p><h1 id="五、编写博客"><a href="#五、编写博客" class="headerlink" title="五、编写博客"></a>五、编写博客</h1><p>你可以执行下列命令来创建一篇新文章或者新的页面。</p><figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new [layout] &lt;title&gt;</span><br></pre></td></tr></table></figure><p>您可以在命令中指定文章的布局（layout），默认为 <code>post</code>，可以通过修改 <code>_config.yml</code> 中的 <code>default_layout</code> 参数来指定默认布局。</p><h2 id="布局（Layout）"><a href="#布局（Layout）" class="headerlink" title="布局（Layout）"></a>布局（Layout）</h2><p>Hexo 有三种默认布局：<code>post</code>、<code>page</code> 和 <code>draft</code>。在创建者三种不同类型的文件时，它们将会被保存到不同的路径；而您自定义的其他布局和 <code>post</code> 相同，都将储存到 <code>source/_posts</code> 文件夹。</p><table><thead><tr><th>布局</th><th>路径</th></tr></thead><tbody><tr><td><code>post</code></td><td><code>source/_posts</code></td></tr><tr><td><code>page</code></td><td><code>source</code></td></tr><tr><td><code>draft</code></td><td><code>source/_drafts</code></td></tr></tbody></table><blockquote><h3 id="不要处理我的文章"><a href="#不要处理我的文章" class="headerlink" title="不要处理我的文章"></a>不要处理我的文章</h3><p>如果你不想你的文章被处理，你可以将 Front-Matter 中的layout: 设为 false 。</p></blockquote><h2 id="文件名称"><a href="#文件名称" class="headerlink" title="文件名称"></a>文件名称</h2><p>Hexo 默认以标题做为文件名称，但您可编辑 <code>new_post_name</code> 参数来改变默认的文件名称，举例来说，设为 <code>:year-:month-:day-:title.md</code> 可让您更方便的通过日期来管理文章。配置后输入<code>hexo new 博客标题</code>，就会自动创建为<code>当前日期-标题</code>名字的<code>.md</code>文件</p><table><thead><tr><th>变量</th><th>描述</th></tr></thead><tbody><tr><td><code>:title</code></td><td>标题（小写，空格将会被替换为短杠）</td></tr><tr><td><code>:year</code></td><td>建立的年份，比如， <code>2015</code></td></tr><tr><td><code>:month</code></td><td>建立的月份（有前导零），比如， <code>04</code></td></tr><tr><td><code>:i_month</code></td><td>建立的月份（无前导零），比如， <code>4</code></td></tr><tr><td><code>:day</code></td><td>建立的日期（有前导零），比如， <code>07</code></td></tr><tr><td><code>:i_day</code></td><td>建立的日期（无前导零），比如， <code>7</code></td></tr></tbody></table><h2 id="草稿"><a href="#草稿" class="headerlink" title="草稿"></a>草稿</h2><p>刚刚提到了 Hexo 的一种特殊布局：<code>draft</code>，这种布局在建立时会被保存到 <code>source/_drafts</code> 文件夹，您可通过 <code>publish</code> 命令将草稿移动到 <code>source/_posts</code> 文件夹，该命令的使用方式与 <code>new</code> 十分类似，您也可在命令中指定 <code>layout</code> 来指定布局。</p><figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo publish [layout] &lt;title&gt;</span><br></pre></td></tr></table></figure><p>草稿默认不会显示在页面中，您可在执行时加上 <code>--draft</code> 参数，或是把 <code>render_drafts</code> 参数设为 <code>true</code> 来预览草稿。</p><h2 id="模版（Scaffold）"><a href="#模版（Scaffold）" class="headerlink" title="模版（Scaffold）"></a>模版（Scaffold）</h2><p>在新建文章时，Hexo 会根据 <code>scaffolds</code> 文件夹内相对应的文件来建立文件，例如：</p><figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new photo "My Gallery"</span><br></pre></td></tr></table></figure><p>在执行这行指令时，Hexo 会尝试在 <code>scaffolds</code> 文件夹中寻找 <code>photo.md</code>，并根据其内容建立文章，以下是您可以在模版中使用的变量：</p><table><thead><tr><th>变量</th><th>描述</th></tr></thead><tbody><tr><td><code>layout</code></td><td>布局</td></tr><tr><td><code>title</code></td><td>标题</td></tr><tr><td><code>date</code></td><td>文件建立日期</td></tr></tbody></table><h2 id="通过Admin插件在网页编写博客"><a href="#通过Admin插件在网页编写博客" class="headerlink" title="通过Admin插件在网页编写博客"></a>通过Admin插件在网页编写博客</h2><p>可以通过命令 <code>npm install --save hexo-admin</code> 来安装一个Hexo的后台管理，然后通过输入<code>hexo s -d</code>启动本地服务访问<code>http://localhost:4000/admin</code>即可进入后台。<br><img src="https://s2.ax1x.com/2020/01/07/lcPQYD.png" alt="lcPQYD.png"></p><ul><li><code>Pages</code>: 新加 页面</li><li><code>Posts</code>: 新加或删除 post；双击一个 post，你可以编辑，预览，新增修改 tags、categories，选择发布或不发布；</li><li><code>Settings</code>: 一些配置，设置账户密码</li><li><code>Deploy</code>: 可以直接部署到 github<br>详细可参考<a href="https://github.com/jaredly/hexo-admin" target="_blank" rel="noopener">官方文档</a></li></ul><h1 id="六选择主题"><a href="#六选择主题" class="headerlink" title="六选择主题"></a>六选择主题</h1><p>Hexo的<a href="https://hexo.io/themes/" target="_blank" rel="noopener">主题搜索网站</a><br>在页面选择自己想要的主题<br><img src="https://s2.ax1x.com/2019/12/20/QOjQ0A.png" alt="QOjQ0A.png"></p><p>以 <a href="https://github.com/probberechts/hexo-theme-cactus" target="_blank" rel="noopener">Cactus</a> 主题为例</p><ol><li><p>点击进入主题的GitHub地址<br><img src="https://s2.ax1x.com/2019/12/20/QOj07n.png" alt="QOj07n.png"></p></li><li><p>从GitHub上下载到自己的<code>themes</code>目录下</p><figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/probberechts/hexo-theme-cactus.git themes/cactus</span><br></pre></td></tr></table></figure></li></ol><p>更改项目跟目录下<code>_config.yml</code>的 <code>theme</code> 属性为 下载的主题名称 以下载到 <code>themes</code> 目录中的文件名为主。</p><p>其他主题内的详细配置具体需要参考主题文件目录内的<code>README.md</code>或<code>_config.yml</code>中的注释进行配置</p><h1 id="七、部署博客"><a href="#七、部署博客" class="headerlink" title="七、部署博客"></a>七、部署博客</h1><h2 id="本地部署预览"><a href="#本地部署预览" class="headerlink" title="本地部署预览"></a>本地部署预览</h2><p>启动服务器。</p><figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo server</span><br></pre></td></tr></table></figure><p>默认情况下，访问网址为： <code>http://localhost:4000/</code>。</p><table><thead><tr><th>选项</th><th>描述</th></tr></thead><tbody><tr><td><code>-p</code>, <code>--port</code></td><td>重设端口</td></tr><tr><td><code>-s</code>, <code>--static</code></td><td>只使用静态文件</td></tr><tr><td><code>-l</code>, <code>--log</code></td><td>启动日记记录，使用覆盖记录格式</td></tr></tbody></table><h2 id="clean"><a href="#clean" class="headerlink" title="clean"></a>clean</h2><figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br></pre></td></tr></table></figure><p>清除缓存文件 (<code>db.json</code>) 和已生成的静态文件 (<code>public</code>)。<br>在某些情况（尤其是更换主题后），如果发现您对站点的更改无论如何也不生效，您可能需要运行该命令。</p><h2 id="generate"><a href="#generate" class="headerlink" title="generate"></a>generate</h2><figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo generate</span><br></pre></td></tr></table></figure><p>生成静态文件。</p><table><thead><tr><th>选项</th><th>描述</th></tr></thead><tbody><tr><td><code>-d</code>, <code>--deploy</code></td><td>文件生成后立即部署网站</td></tr><tr><td><code>-w</code>, <code>--watch</code></td><td>监视文件变动</td></tr><tr><td><code>-b</code>, <code>--bail</code></td><td>生成过程中如果发生任何未处理的异常则抛出异常</td></tr><tr><td><code>-f</code>, <code>--force</code></td><td>强制重新生成文件 Hexo 引入了差分机制，如果 <code>public</code> 目录存在，那么 <code>hexo g</code> 只会重新生成改动的文件。 使用该参数的效果接近 <code>hexo clean &amp;&amp; hexo generate</code></td></tr><tr><td><code>-c</code>, <code>--concurrency</code></td><td>最大同时生成文件的数量，默认无限制</td></tr><tr><td>该命令可以简写为</td><td></td></tr><tr><td><figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br></pre></td></tr></table></figure></td><td></td></tr><tr><td>## deploy</td><td></td></tr><tr><td><figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo deploy</span><br></pre></td></tr></table></figure></td><td></td></tr><tr><td>部署网站。</td><td></td></tr></tbody></table><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td><code>-g</code>, <code>--generate</code></td><td>部署之前预先生成静态文件</td></tr><tr><td>该命令可以简写为：</td><td></td></tr><tr><td><figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure></td><td></td></tr></tbody></table><h3 id="部署前配置"><a href="#部署前配置" class="headerlink" title="部署前配置"></a>部署前配置</h3><p>先输入<code>npm install hexo-deployer-git --save</code> 安装hexo推送到Git插件<br>跟目录的<code>_config.yml</code>中配置此插件。例如</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="comment"># 指定通过上传git方式部署</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="comment"># git项目地址</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">https://github.com/FENG1000/FENG1000.github.io</span></span><br><span class="line">  <span class="comment"># 指定上传的分支，如果不是以 &lt;username&gt;.github.io则需要上传到`gh-pages`分支</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure><h3 id="部署上传"><a href="#部署上传" class="headerlink" title="部署上传"></a>部署上传</h3><ol><li>部署前最好先清除缓存，再重新构建<code>hexo g -f</code></li><li>执行 <code>hexo d</code> 命令，输入github验证信息进行部署<br><img src="https://s2.ax1x.com/2019/12/20/QXPXkQ.png" alt="QXPXkQ.png"></li><li>在GitHub的博客仓库内点击 <code>Settings</code> 查看部署情况，变为绿色说明部署成功<br><img src="https://s2.ax1x.com/2019/12/20/QXiAk4.gif" alt="QXiAk4.gif"></li><li>查看效果<br><img src="https://s2.ax1x.com/2019/12/20/QXi3Ae.png" alt="QXi3Ae.png"></li></ol><blockquote><h3 id="码云Pages部署后需要自己手动点击下构建才可以"><a href="#码云Pages部署后需要自己手动点击下构建才可以" class="headerlink" title="码云Pages部署后需要自己手动点击下构建才可以"></a>码云Pages部署后需要自己手动点击下构建才可以</h3><p><img src="https://s2.ax1x.com/2019/12/20/QXFZVS.gif" alt="QXFZVS.gif"></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 自建博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在docker中部署mitmproxy并执行脚本</title>
      <link href="/posts/9d815f7c.html"/>
      <url>/posts/9d815f7c.html</url>
      
        <content type="html"><![CDATA[<p>此篇博客只讲解如何将mitmproxy的中间人代理脚本放在服务器上运行，不会过多说明mitmproxy如何使用，有需要请自行百度，Google等</p><h2 id="一、生成requirements-txt文件"><a href="#一、生成requirements-txt文件" class="headerlink" title="一、生成requirements.txt文件"></a>一、生成<code>requirements.txt</code>文件</h2><p><code>requirements.txt</code>用于记录所有依赖包及其精确的版本号。以便新环境部署。使用方法参考<a href="https://blog.csdn.net/qq_33430083/article/details/103469916" target="_blank" rel="noopener">这篇博客</a></p><h2 id="二、编写Dockerfile文件"><a href="#二、编写Dockerfile文件" class="headerlink" title="二、编写Dockerfile文件"></a>二、编写<code>Dockerfile</code>文件</h2><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> python:<span class="number">3.7</span></span><br><span class="line"><span class="keyword">MAINTAINER</span> Jacob<span class="string">"1983586937@qq.com"</span></span><br><span class="line"><span class="keyword">ENV</span> PATH /usr/local/bin:$PATH</span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> . /demo_mitm</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /demo_mitm</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> pip3 install -i https://pypi.doubanio.com/simple/ -r requirements.txt</span></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> mitmdump -p 8888 -s mitm_addons.py --<span class="built_in">set</span> block_global=<span class="literal">false</span></span></span><br></pre></td></tr></table></figure><h3 id="Dockerfile-指令"><a href="#Dockerfile-指令" class="headerlink" title="Dockerfile 指令:"></a>Dockerfile 指令:</h3><table><thead><tr><th align="left">指令</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">FROM</td><td align="left">指定所创建镜像的基础镜像</td></tr><tr><td align="left">MAINTAINER</td><td align="left">指定维护者信息</td></tr><tr><td align="left">ENV</td><td align="left">指定环境变量</td></tr><tr><td align="left">ADD</td><td align="left">赋值指定的<src>路径下的内容到容器中的<dest>路径下，<src>可以为URL；如果为tar文件，会自动解压到<dest>路径下(<strong>注意: 上边命令中<code>.</code>和<code>/demo_mitm</code>之间有空格，其中<code>.</code>表示宿主机的当前目录，即当前脚本所在目录,<code>/demo_mitm</code>表示docker容器目录，合起来的意思就是将宿主机当前目录下的文件拷贝至docker容器的<code>/demo_mitm</code>目录，文件夹不存在会自动创建</strong>)</td></tr><tr><td align="left">WORKDIR</td><td align="left">配置工作目录，这里我配置的是<code>/demo_mitm</code>,即在上边通过<code>ADD</code>指令添加的目录下</td></tr><tr><td align="left">RUN</td><td align="left">在创建镜像时运行的命令，可写多个</td></tr><tr><td align="left">CMD</td><td align="left">指定启动容器时默认执行的命令</td></tr></tbody></table><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ul><li><p>在启动mitmproxy时不要用<code>mitmproxy</code>，在docker中不支持会报<code>Error: mitmproxy&#39;s console interface requires a tty. Please run mitmproxy in an interactive shell environment.</code>，需要用 <code>mitmdump</code> 方式来启动</p></li><li><p>在<code>CMD</code>启动容器时默认执行的命令我添加了 <code>--set block_global=false</code>，这样做的原因是<code>block_global</code>是用来设置是<strong>否阻止来自全球可访问网络的连接，这在IANA特殊目的注册表中已定义。默认值：<code>True</code>，只能在内网设置代理，需要指定为<code>False</code>允许外网访问</strong><br>如果不添加则在手机端设置好代理后报如下错误(ip我用*号代替):</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Client connection from ::ffff:*.*.*.* killed by block_global</span><br><span class="line">*.*.*.*:2197: Connection killed</span><br><span class="line">*.*.*.*:2197: clientdisconnect</span><br><span class="line">*.*.*.*:2198: clientconnect</span><br><span class="line">Client connection from ::ffff:*.*.*.* killed by block_global</span><br><span class="line">*.*.*.*:2198: Connection killed</span><br><span class="line">*.*.*.*:2198: clientdisconnect</span><br><span class="line">*.*.*.*:2199: clientconnect</span><br></pre></td></tr></table></figure></li></ul><h2 id="三、调整项目中的连接"><a href="#三、调整项目中的连接" class="headerlink" title="三、调整项目中的连接"></a>三、调整项目中的连接</h2><p>如果代码中有连接数据库等操作，且填的是内网地址，需要将链接改为外网地址，如果同属一个docker内网，也可以改成docker的内网地址</p><h2 id="四、构建镜像"><a href="#四、构建镜像" class="headerlink" title="四、构建镜像"></a>四、构建镜像</h2><h3 id="构建"><a href="#构建" class="headerlink" title="构建"></a>构建</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -t demo_mitm:latest .</span><br></pre></td></tr></table></figure><p>命名格式: 镜像名称(不能有英文大写字母):标签<br><strong>PS: 如果没有标签那么可以写<code>latest</code></strong></p><blockquote><p>注：在构建下载依赖包时，可能会卡在 <code>brotlipy-0.x.0.tar.gz</code> 很长时间，耐心等待即可</p></blockquote><h3 id="检查是否构建成功"><a href="#检查是否构建成功" class="headerlink" title="检查是否构建成功"></a>检查是否构建成功</h3><p>输入 <code>docker images</code> 查看镜像列表是否有刚才创建的<code>demo_mitm</code>镜像</p><h2 id="五、启动镜像"><a href="#五、启动镜像" class="headerlink" title="五、启动镜像"></a>五、启动镜像</h2><p>输入下边的命令即可启动</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -v &#x2F;opt&#x2F;myapp&#x2F;demo_mitm:&#x2F;demo_mitm -p 8080:8888 --name demo_mitm demo_mitm</span><br></pre></td></tr></table></figure><ul><li><code>-d</code>: 容器在后台运行</li><li><code>-v</code>: 将宿主机目录映射到容器内，将宿主机上的代码映射到容器的工作内，这里当我修改编写好的脚本后就不需要重建构建镜像了，只需要修改在宿主机上的代码即可，如果不用后期再修改代码，则不需要映射容器内工作目录的代码还是最开始的</li><li><code>-p</code>: 将宿主机端口映射到容器使用的端口，容器使用的是8888端口，因为宿主机8888端口被其他项目占用了所以使用了8080来映射，<strong>如果不映射端口外网无法访问容器端口</strong></li><li><code>--name</code>: 设置容器名字，我这里是设置和镜像名称保持一致</li><li>结尾的 <code>demo_mitm</code> 指定启动的镜像</li></ul><h2 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h2><p>至此即可用手机连接wifi后设置代理为服务器的ip+端口后在服务端进行抓包</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> Docker </category>
          
          <category> 爬虫 </category>
          
          <category> mitmproxy </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 中间人代理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IDEA自动生成serialVersionUID设置</title>
      <link href="/posts/ff99cf0e.html"/>
      <url>/posts/ff99cf0e.html</url>
      
        <content type="html"><![CDATA[<p>之所以要设置这个是因为当在将对象进行序列化和反序列化时，如果不设置<code>serialVersionUID</code>，在序列化、反序列化时会根据对象内的字段来自动生成<code>serialVersionUID</code>，如果对象中新增加了一个字段那么<code>serialVersionUID</code>将会生成一个新的值，会导致原来在序列化后保存的数据在反序列化到对象时因为<code>serialVersionUID</code>不一致导致失败。如果自己给对象中设置好<code>serialVersionUID</code>后，给对象新增一个字段后再进行反序列化时<code>serialVersionUID</code>是一致的不会报错，只是新增的字段为空。这里设置idea自动生成<code>serialVersionUID</code>是为了方便快速的生成<code>serialVersionUID</code>。</p><ol><li>打开<code>File -&gt; Settings -&gt; Editor -&gt; Inspectinos</code><br> <img src="https://img-blog.csdnimg.cn/20191218143756357.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMzNDMwMDgz,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li><li>选择<code>Java -&gt; Serialization issues -&gt; Serializable class without &#39;serialVersionUID&#39;</code>，将其勾选即可<img src="https://img-blog.csdnimg.cn/20191218143943599.gif" alt="在这里插入图片描述"></li><li>效果如下图，光标移动到类上按<code>Alt+Enter</code><br> <img src="https://img-blog.csdnimg.cn/20191218144415862.gif" alt="在这里插入图片描述"></li></ol>]]></content>
      
      
      <categories>
          
          <category> idea </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 序列化 </tag>
            
            <tag> serialVersionUID </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用Spring 数据绑定机制，让RESTful API代码更简洁</title>
      <link href="/posts/9ef0a90d.html"/>
      <url>/posts/9ef0a90d.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>原文链接：<a href="https://juejin.im/post/5df6d2eaf265da33bc57db96" target="_blank" rel="noopener">https://juejin.im/post/5df6d2eaf265da33bc57db96</a></p></blockquote><p>默认情况下，Spring 只知道如何转换简单数据类型。比如我们提交的 <code>int</code>、<code>String</code> 或 <code>boolean</code> 类型的请求数据，它会自动绑定到与之对应的 Java 类型。但在实际项目中，远远不够，因为我们可能需要绑定更复杂的对象类型。<br>我们需要了解 Spring 数据绑定机制，这样我们就可以更灵活的做全局配置或自定义配置，进而让我们的 RESTful API 更简洁，可读性也更好。</p><h2 id="Spring-数据绑定"><a href="#Spring-数据绑定" class="headerlink" title="Spring 数据绑定"></a>Spring 数据绑定</h2><h3 id="日期绑定"><a href="#日期绑定" class="headerlink" title="日期绑定"></a>日期绑定</h3><p>先来看下面一小段代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/index"</span>)</span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IndexController</span> </span>&#123;</span><br><span class="line">  <span class="meta">@GetMapping</span>(<span class="string">"/&#123;date&#125;"</span>)</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getSpecificDateInfo</span><span class="params">(@PathVariable LocalDateTime date)</span> </span>&#123;</span><br><span class="line">    log.info(date.toString());</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当我们用 Postman 请求这个 API</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">localhost:8080/index/2019-12-10 12:00:00</span><br></pre></td></tr></table></figure><p>如我们所料，抛出数据类型转换异常</p><p><img src="https://img-blog.csdnimg.cn/20191216165041867.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMzNDMwMDgz,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>因为 Spring 默认不支持将 String 类型的请求参数转换为 <code>LocalDateTime</code> 类型，所以我们需要自定义 <code>converter 「转换器</code> 完整整个转换过程</p><p>自定义转换器 <code>StringToLocalDateTimeConverter</code>，使其实现 <code>org.springframework.core.convert.converter.Converter&lt;S, T&gt;</code> 接口，在重写的 <code>convert 方法</code>中实现我们自定义的转换逻辑</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringToLocalDateTimeConverter</span> <span class="keyword">implements</span> <span class="title">Converter</span>&lt;<span class="title">String</span>, <span class="title">LocalDateTime</span>&gt; </span>&#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> LocalDateTime <span class="title">convert</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">    DateTimeFormatter formatter = DateTimeFormatter.ofPattern(<span class="string">"yyyy-MM-dd HH:mm:ss"</span>, Locale.CHINESE);</span><br><span class="line">    <span class="keyword">return</span> LocalDateTime.parse(s, formatter);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将转换器注册到上下文中:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UnifiedReturnConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addFormatters</span><span class="params">(FormatterRegistry registry)</span> </span>&#123;</span><br><span class="line">    registry.addConverter(<span class="keyword">new</span> StringToLocalDateTimeConverter());</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重新访问上面链接，查看控制台，按照预期得到相应转换结果:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2019-12-16 17:01:56.848  INFO 6420 --- [nio-8081-exec-3] com.lx.controller.IndexController        : 2019-12-10T12:00</span><br></pre></td></tr></table></figure><p>知道了这个，比如我们常用的枚举类型也可以应用这种方式做数据绑定</p><h3 id="枚举类型绑定"><a href="#枚举类型绑定" class="headerlink" title="枚举类型绑定"></a>枚举类型绑定</h3><p>同样的套路，自定义转换器，<code>Modes</code>为自己创建的枚举类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringToEnumConverter</span> <span class="keyword">implements</span> <span class="title">Converter</span>&lt;<span class="title">String</span>, <span class="title">Modes</span>&gt; </span>&#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Modes <span class="title">convert</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Modes.valueOf(s);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将其添加至上下文，请小伙伴们自行尝试吧，知道了这个，我们再也不用在 RESTful API 内部做数据转换了，我们做到了全局控制，同时让整个 API 看起来更加清晰简洁</p><h3 id="绑定对象"><a href="#绑定对象" class="headerlink" title="绑定对象"></a>绑定对象</h3><p>在某些情况下，我们希望将数据绑定到对象，这时我们可能马上联想起来使用 <code>@RequestBody</code> 注解，该注解通常用于获取 POST 请求体，并将其转换相应的数据对象<br>在实际业务场景中，除了<code>请求体</code>中的数据，我们同样需要<code>请求头</code>中的数据，比如<code>token</code> ，<code>token</code> 中包含当前登陆用户的信息，每一次 RESTful 请求我们都需要从 <code>header</code> 中获取 <code>token</code> 数据处理实际业务，这种场景，上文提到的 <code>Converter</code> 以及 <code>@RequestBody</code> 显然不能满足我们的需求，此时我们就要换另一种解决方案 : <code>HandlerMethodArgumentResolver</code><br>首先我们需要自定义一个注解 <code>LoginUser</code> (<strong>运行时生效，作用于参数上</strong>)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Target</span>(ElementType.PARAMETER)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> LoginUser &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后自定义 LoginUserArgumentResolver ，使其实现 HandlerMethodArgumentResolver 接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginUserArgumentResolver</span> <span class="keyword">implements</span> <span class="title">HandlerMethodArgumentResolver</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">supportsParameter</span><span class="params">(MethodParameter methodParameter)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 判断参数是否有自定义注解 LoginUser修饰</span></span><br><span class="line">    <span class="keyword">return</span> methodParameter.hasParameterAnnotation(LoginUser<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Object <span class="title">resolveArgument</span><span class="params">(MethodParameter methodParameter, ModelAndViewContainer modelAndViewContainer, NativeWebRequest nativeWebRequest, WebDataBinderFactory webDataBinderFactory)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    HttpServletRequest request = (HttpServletRequest) nativeWebRequest.getNativeRequest();</span><br><span class="line">    LoginUserVo loginUserVo = <span class="keyword">new</span> LoginUserVo();</span><br><span class="line">    String token = request.getHeader(<span class="string">"token"</span>);</span><br><span class="line">    <span class="keyword">if</span> (StringUtils.isNotBlank(token)) &#123;</span><br><span class="line">      <span class="comment">//通常这里需要编写 token 解析逻辑，并将其放到 LoginUserVo 对象中,此处省略</span></span><br><span class="line">      <span class="comment">//logic</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//在此为了快速简洁的做演示说明，省略掉解析 token 部分，直接从 header 指定 key 中获取数据</span></span><br><span class="line">    loginUserVo.setId(Long.valueOf(request.getHeader(<span class="string">"userId"</span>)));</span><br><span class="line">    loginUserVo.setName(request.getHeader(<span class="string">"userName"</span>));</span><br><span class="line">    <span class="keyword">return</span> loginUserVo;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>依旧将自定义的 <code>LoginUserArgumentResolver</code> 添加到上下文中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addArgumentResolvers</span><span class="params">(List&lt;HandlerMethodArgumentResolver&gt; resolvers)</span> </span>&#123;</span><br><span class="line">  resolvers.add(<span class="keyword">new</span> LoginUserArgumentResolver());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编写 API:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/id"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getLoginUserInfo</span><span class="params">(@LoginUser LoginUserVo loginUserVo)</span> </span>&#123;</span><br><span class="line">  log.info(loginUserVo.toString());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过 Postman 请求，在 header 中设置好相应的 K-V，如下图</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">localhost:8081/index/id</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20191216172234550.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMzNDMwMDgz,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>发送请求，查看控制台，得到预期结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">c.e.unifiedreturn.api.BindingController  : LoginUserVo(id&#x3D;111111, name&#x3D;rgyb)</span><br></pre></td></tr></table></figure><p>相信到这里，你已经了解了基本的使用</p><blockquote><p>作者：日拱一兵<br>链接：<a href="https://juejin.im/post/5df6d2eaf265da33bc57db96" target="_blank" rel="noopener">https://juejin.im/post/5df6d2eaf265da33bc57db96</a><br>来源：掘金<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> Spring </category>
          
          <category> 转载 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 优化 </tag>
            
            <tag> RESTful </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python 项目自动生成requirements.txt文件</title>
      <link href="/posts/5f51e8ee.html"/>
      <url>/posts/5f51e8ee.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>原文链接：<a href="https://www.cnblogs.com/tangqiu/p/9914817.html" target="_blank" rel="noopener">https://www.cnblogs.com/tangqiu/p/9914817.html</a></p></blockquote><p>任何应用程序通常需要设置安装所需并依赖一组类库来满足工作要求。要求文件是指定和一次性安装包的依赖项具体一整套方法，python也不例外。</p><h2 id="生成"><a href="#生成" class="headerlink" title="生成"></a>生成</h2><p>Python项目依赖，生成 <code>requirements.txt</code> 有两种方法</p><ol><li><p>进入需要生成文件的目录，执行 <code>pip freeze &gt; requirements.txt</code> ，此方法会包含环境所有的依赖包。这种方式配合 <code>virtualenv</code> 才好使，否则把整个环境中的包都列出来了</p></li><li><p><code>pip install pipreqs</code><br> 进入需要生成文件的目录执行： <code>pipreqs ./</code>     (或者直接  <code>pipreqs  D:\test(实际路径）</code>）</p><p> 在此时可能会遇见<br> <code>UnicodeDecodeError: &#39;gbk&#39; codec can&#39;t decode byte 0x80 in position 776: illegal multibyte sequence</code></p><p> 这个错误.</p><p> 解决方法：指定编码格式      <code>pipreqs ./  --encoding=utf8</code></p></li></ol><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>如果要安装 <code>requirements.txt</code> 中的类库内容，那么你可以执行:  <code>pip install -r requirements.txt</code><br>或者通过:  <code>pip install -i https://pypi.doubanio.com/simple/ -r requirements.txt</code> 指定资源库地址来执行</p>]]></content>
      
      
      <categories>
          
          <category> 转载 </category>
          
          <category> Python </category>
          
          <category> 基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> requirements.txt </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用 Redis 和 Spring Boot 执行异步任务</title>
      <link href="/posts/be076923.html"/>
      <url>/posts/be076923.html</url>
      
        <content type="html"><![CDATA[<p><strong>【转载自 ImportNew 公众号】地址: <a href="https://mp.weixin.qq.com/s/fC0rK_1jvQMHxzDHRkh6cQ" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/fC0rK_1jvQMHxzDHRkh6cQ</a>(由于我用的是Maven所以我将Gradle部分都替换成了Maven内容)</strong></p><p>在本文中，将学习如何使用 Spring Boot 2.x 和 Redis 执行异步任务。文后附有演示代码。</p><h3 id="Spring-Spring-Boot"><a href="#Spring-Spring-Boot" class="headerlink" title="Spring/Spring Boot"></a>Spring/Spring Boot</h3><p>Spring 是最流行 Java 应用程序开发框架。因此，Spring 社区也是最大的开源社区之一。除此之外，Spring 博客还提供了最新的开发文档，内容非常丰富。涵盖了框架的内部工作原理和示例项目，在StackOverflow上有10万多个问题。 </p><p>Spring 早期只支持基于XML的配置，为此饱受批评。后来 Spring 引入了基于注解的配置，情况发生了根本改变。Spring 3.0是第一个支持基于注解的配置的版本。2014年发布的 Spring Boot 1.0，彻底改变了人们对 Spring 框架生态的看法。在这里可以找到更详细的时间表。 </p><h3 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h3><p>Redis 是最流行的 NoSQL 内存数据库之一，支持不同类型的数据结构，包括 Set、哈希表、List、简单键值对等。Redis 调用延迟为亚毫秒级，支持 replica set 等功能。Redis 操作的延迟也是亚毫秒级，在开发者社区中更具吸引力。</p><h3 id="为什么需要异步执行任务"><a href="#为什么需要异步执行任务" class="headerlink" title="为什么需要异步执行任务"></a>为什么需要异步执行任务</h3><p>一个典型的 API 调用包括以下五个方面：</p><ol><li>执行数据库（RDBMS 或 NoSQL）查询</li><li>在某些缓存系统（内存、分布式等）上执行操作</li><li>进行计算（对一些数据进行数学计算）</li><li>调用其他（内部或外部）服务</li><li>调度任务稍后执行或者在后台立即执行</li></ol><p>任务可根据需要定时执行，例如在创建订单或装运单后7天后生成发票。同样，电子邮件通知无需立即发送，因此可以设为延期发送。  </p><p>考虑到这些实际场景，有时候需要异步执行任务，减少 API 响应时间。例如，如果一次在同一个 API 调用中删除一千多条记录，那么肯定会增加 API 响应时间。为了减少 API 响应时间，可以运行一个后台任务删除这些记录。 </p><h3 id="延迟队列"><a href="#延迟队列" class="headerlink" title="延迟队列"></a>延迟队列</h3><p>当计划在指定时间或者按照设定间隔执行任务时，可以使用 corn job。有很多不同的工具可以执行定时任务，比如 UNIX 风格的 crontabs、Chronos。如果用 Spring 框架，那么可以用默认提供的 <code>Scheduled</code> 注解。 </p><p>大多数 cron job 会在需要执行特定操作时查找记录，例如查找所有已发货7天但未生成发票的记录。这些调度机制中大多数都会遇到扩展问题，在数据库中扫描查找相关行或者记录。多数情况会引发全表扫描，性能非常差。设想一下正在运行的应用程序与批处理系统使用相同的数据库。由于不可扩展，因此需要一些可扩展系统，可以在指定时间或按照设定时间间隔执行任务，不会出现任何性能问题。有许多扩展的方法，例如用批处理方式执行任务，或者在用户、区域子集上执行任务。另一种方法是在指定时间执行任务，任务之间没有依赖，例如 serverless 函数。定时器达到预定时间后会立即触发执行作业，这时可以使用延迟队列。有很多队列系统或软件可供使用，但很少像 SQS 这样可以设置延迟15分钟，而不是延迟7个小时或者7天。</p><h3 id="Rqueue"><a href="#Rqueue" class="headerlink" title="Rqueue"></a>Rqueue</h3><p>Rqueue 是针对 Spring 框架构建的消息代理，它把数据存储到 Redis 中并且提供了一种机制可以按任意延迟执行任务。Rqueue 得到了 Redis 支持。相比 Kafka、SQS 等常见队列系统，Redis 具有一些优势。在大多数 Web 应用后端程序中，Redis 用来缓存数据或者其他用途。在当今世界，8.4％的 Web 应用程序正在使用 Redis 数据库。</p><p>通常，使用 Kafka、SQS 或者其他队列系统会带来不同程度的额外开销，而 Rqueue 和 Redis 可以将费用降为零。</p><p>除了使用 Kafka 带来的开销，还需配置基础架构、进行维护等等。由于大多数程序已经使用了 Redis，因此不需要其他操作开销。实际上，可以在同一个 Redis 服务器或群集上使用 Rqueue。Rqueue支持任意长度延迟<br><img src="https://img-blog.csdnimg.cn/20191122163646335.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMzNDMwMDgz,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="消息传递"><a href="#消息传递" class="headerlink" title="消息传递"></a>消息传递</h3><p>由于长数据不会在数据库中丢失，Rqueue 能够确保至少发送一次消息。在 Rqueue 简介中可以了解更多信息。</p><p>需要的工具：</p><ol><li>IDE </li><li>Maven</li><li>Java </li><li>Redis</li></ol><p>简单起见，这里使用 Spring Boot。通过Spring Boot初始化程序 <a href="https://start.spring.io/" target="_blank" rel="noopener">https://start.spring.io/</a> 创建一个 Maven 项目。<br>需要添加以下依赖:</p><ol><li>org.springframework.boot:spring-boot-starter-data-redis</li><li>org.springframework.boot:spring-boot-starter-web</li><li>org.projectlombok:lombok</li></ol><ul><li>这里不会使用lombok，不知道lombok的请网上自行搜索学习</li></ul><p>项目文件结构如下：<br><img src="https://img-blog.csdnimg.cn/20191122163633224.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMzNDMwMDgz,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>使用Rqueue开发库实现按任意延迟时间执行任务。Rqueue 是一个基于 Spring 的异步任务执行器，可以按照任意延迟执行任务，它基于 Spring 消息库并由 Redis 提供支持。</p><p>这里将使用 <strong>com.github.sonus21:rqueue-spring-boot-starter:1.2-RELEASE添加 Rqueue spring boot starter</strong> 依赖。</p><p><code>rqueue</code> 的github<a href="https://github.com/sonus21/rqueue" target="_blank" rel="noopener">地址</a></p><p>完整的maven配置接口如下:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.lx<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springboot-rqueue<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>springboot-rqueue<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">description</span>&gt;</span>Springboot+Redis实现延时队列<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.vintage<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-vintage-engine<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.sonus21<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>rqueue-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2-RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">repositories</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">id</span>&gt;</span>spring<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://maven.aliyun.com/repository/spring<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">releases</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">releases</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>需要启用 Redis Spring Boot 功能。出于测试目的，这里还将启用 WEB MVC。<br>Application启动类 文件更新如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableRedisRepositories</span></span><br><span class="line"><span class="meta">@EnableWebMvc</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    SpringApplication.run(Application<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用 Rqueue 添加任务非常简单，只要对方法添加 RqueueListener 注解。RqueuListener 注解提供了一些字段，可根据使用场景设置。对于延迟任务，需要设置 <code>delayedQueue=&quot;true&quot;</code> 并且必须提供 <code>value</code>；否则注解将被忽略。value 是队列名称。设置 deadLetterQueue 可以将任务推送到另一个队列。否则，执行失败时任务会被丢弃。还可以使用 numRetries 字段设置任务重试次数。</p><p>创建名为 MessageListener 的 Java 文件并增加一些方法执行任务：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MessageListener</span> </span>&#123;</span><br><span class="line">  <span class="meta">@RqueueListener</span>(value = <span class="string">"$&#123;email.queue.name&#125;"</span>)</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendEmail</span><span class="params">(Email email)</span> </span>&#123;</span><br><span class="line">    log.info(<span class="string">"Email &#123;&#125;"</span>, email);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@RqueueListener</span>(delayedQueue = <span class="string">"true"</span>, value = <span class="string">"$&#123;invoice.queue.name&#125;"</span>)</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">generateInvoice</span><span class="params">(Invoice invoice)</span> </span>&#123;</span><br><span class="line">    log.info(<span class="string">"Invoice &#123;&#125;"</span>, invoice);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用 Email 和 Invoice 类分别存储电子邮件和发票数据。简单起见，这些类只包含少数几个字段。</p><p><code>Invoice.java</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Invoice</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> String id;</span><br><span class="line">  <span class="keyword">private</span> String type;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Email.java</code>:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Email</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> String email;</span><br><span class="line">  <span class="keyword">private</span> String subject;</span><br><span class="line">  <span class="keyword">private</span> String content;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="提交任务"><a href="#提交任务" class="headerlink" title="提交任务"></a>提交任务</h3><p>可以使用 RqueueMessageSender  bean 提交任务。根据使用场景，可以采用多种方式设置任务，例如，对于重试可以使用方法重试计数，对于延迟任务可以设置延迟。</p><p>需要对 RqueueMessageSender 进行 autowire 或使用构造函数注入 bean。</p><p>下面展示了如何为测试创建 Controller。 </p><p>这里会在30秒内生成发票。为此，在发票队列上提交一个延迟30000（毫秒）的任务。另外，这里会尝试在后台发送一封电子邮件。为此添加两个 GET 方法，sendEmail 和  generateInvoice，当然也可以使用 POST。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Controller</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Autowired</span></span><br><span class="line">  <span class="keyword">private</span> RqueueMessageSender rqueueMessageSender;</span><br><span class="line">  <span class="meta">@Value</span>(<span class="string">"$&#123;email.queue.name&#125;"</span>)</span><br><span class="line">  <span class="keyword">private</span> String emailQueueName;</span><br><span class="line">  <span class="meta">@Value</span>(<span class="string">"$&#123;invoice.queue.name&#125;"</span>)</span><br><span class="line">  <span class="keyword">private</span> String invoiceQueueName;</span><br><span class="line">  <span class="meta">@Value</span>(<span class="string">"$&#123;invoice.queue.delay&#125;"</span>)</span><br><span class="line">  <span class="keyword">private</span> Long invoiceDelay;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@GetMapping</span>(<span class="string">"email"</span>)</span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">sendEmail</span><span class="params">(@RequestParam String email, @RequestParam String subject,</span></span></span><br><span class="line"><span class="function"><span class="params">                          @RequestParam String content)</span> </span>&#123;</span><br><span class="line">    log.info(<span class="string">"Sending email"</span>);</span><br><span class="line">    rqueueMessageSender.put(emailQueueName, <span class="keyword">new</span> Email(email, subject, content));</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"Please check your inbox!"</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@GetMapping</span>(<span class="string">"invoice"</span>)</span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">generateInvoice</span><span class="params">(@RequestParam String id, @RequestParam String type)</span> </span>&#123;</span><br><span class="line">    log.info(<span class="string">"Generate invoice"</span>);</span><br><span class="line">    rqueueMessageSender.put(invoiceQueueName, <span class="keyword">new</span> Invoice(id, type), invoiceDelay);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"Invoice would be generated in "</span> + invoiceDelay + <span class="string">" milliseconds"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 <code>application.yml</code> 加入以下内容(<strong>注: 此处需要自行添加redis连接配置</strong>)：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">email:</span></span><br><span class="line">  <span class="attr">queue:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">email-queue</span></span><br><span class="line"><span class="attr">invoice:</span></span><br><span class="line">  <span class="attr">queue:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">invoice-queue</span></span><br><span class="line">    <span class="comment"># 延迟3秒执行</span></span><br><span class="line">    <span class="attr">delay:</span> <span class="number">3000</span></span><br></pre></td></tr></table></figure><p>现在可以运行该程序。程序成功启动后，访问 链接。<br>在日志中，可以看到电子邮件任务正在后台执行：<br><img src="https://img-blog.csdnimg.cn/20191122163605781.jpg" alt="在这里插入图片描述"><br>下面是延迟30秒生成发票：<br><a href="http://localhost:8080/invoice?id=INV-1234&amp;type=PROFORMA" target="_blank" rel="noopener">http://localhost:8080/invoice?id=INV-1234&amp;type=PROFORMA</a><br><img src="https://img-blog.csdnimg.cn/20191122163610322.jpg" alt="在这里插入图片描述"></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>可以看到，使用 Rqueue 执行定时任务不需要冗长的模板代码！配置和使用 Rqueue 库时，进行了仔细考虑。要记住：无论是普通任务还是延迟任务，都需要尽快执行。</p><h3 id="源码地址"><a href="#源码地址" class="headerlink" title="源码地址"></a>源码地址</h3><ul><li><a href="https://github.com/sonus21/rqueue-task-exector" target="_blank" rel="noopener">官方demo</a></li><li><a href="https://gitee.com/fengzxia/springboot_rqueue" target="_blank" rel="noopener">自己敲的</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> Spring </category>
          
          <category> SpringBoot </category>
          
          <category> Redis </category>
          
          <category> 转载 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 异步执行 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从postman转到IDEA的REST Client来发送请求测试接口</title>
      <link href="/posts/34f6d968.html"/>
      <url>/posts/34f6d968.html</url>
      
        <content type="html"><![CDATA[<p>在没有尝到IDEA REST之前，postman（chrome的一款插件）确实是一个非常不错的选择，具有完备的REST Client功能和请求历史记录功能。</p><p>但是当使用了IDEA REST之后，postman就可以丢了，因为，IDEA REST Client具有postman的所有功能，而且还有postman没有的功能，继续往下看。</p><h2 id="从postman到IDEA-REST-Client"><a href="#从postman到IDEA-REST-Client" class="headerlink" title="从postman到IDEA REST Client"></a>从postman到IDEA REST Client</h2><blockquote><p>postman的所有功能IDEA REST Client都具备了，如REST Client控制台和历史请求记录<br>如果能够在一个生产工具里完成开发和调试的事情，干嘛要切换到另一个工具呢<br>然后IDEA REST Client还支持环境配置区分的功能，以及接口响应断言和脚本化处理的能力<br>IDEA REST Client的请求配置可以用文件配置描述，所以可以跟随项目和项目成员共享</p></blockquote><h2 id="IDEA-REST-Client控制台"><a href="#IDEA-REST-Client控制台" class="headerlink" title="IDEA REST Client控制台"></a>IDEA REST Client控制台</h2><p>从顶层工具栏依次<code>Tools -&gt; HTTP Client -&gt; Test RESTFUL Web Service</code> 打开后<br>![在这里插入图片描述](<a href="https://img-blog.csdnimg.cn/20191120135935338.png" target="_blank" rel="noopener">https://img-blog.csdnimg.cn/20191120135935338.png</a><br>IDEA REST Client控制台的界面如下样式：<br><img src="https://img-blog.csdnimg.cn/20191120135953271.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMzNDMwMDgz,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>可以看到，这个控制台展示的功能区和postman已经没什么差别了，包括请求方式，请求参数和请求头的填充都已经包含了，特别说明下的是，如果请求的方式是Authorization :Basic这种方式认证的话，可以点击下图所示的按钮，会弹出填充用户名和密码的窗口出来，填完后会自动补充到Authorization 的header里面去<br><img src="https://img-blog.csdnimg.cn/20191120140054177.png" alt="在这里插入图片描述"></p><h2 id="历史请求记录"><a href="#历史请求记录" class="headerlink" title="历史请求记录"></a>历史请求记录</h2><p>IntelliJ IDEA自动将最近执行的50个请求保存到<code>http-requests-log.http</code> 文件中，该文件存储在项目的<code>.idea/httpRequests/</code>目录下。使用请求历史记录，您可以快速导航到特定响应并再次发出请求。<br>打开方式：<br>第一步，点击蓝色部分的文字会打开上次请求的代码（如果没有，请先发送一次请求）: <img src="https://img-blog.csdnimg.cn/20191120140331282.png" alt="在这里插入图片描述"><br>打开后：<br><img src="https://img-blog.csdnimg.cn/20191120140435739.png" alt="在这里插入图片描述"><br>可点击左侧的开始按钮直接发出上次的请求<br><img src="https://img-blog.csdnimg.cn/20191120140539775.png" alt="在这里插入图片描述"><br>第二步，点击右边类似钟表的按钮即可打开请求历史记录:<br><img src="https://img-blog.csdnimg.cn/20191120140630406.png" alt="在这里插入图片描述"><br>点击后:<br><img src="https://img-blog.csdnimg.cn/20191120140659243.png" alt="在这里插入图片描述"><br>再次发出请求只要点击那个运行按钮即可。如果从请求历史记录再次发出请求，则其执行信息和响应输出的链接将添加到请求历史记录文件的顶部。</p><h2 id="构建HTTP请求脚本"><a href="#构建HTTP请求脚本" class="headerlink" title="构建HTTP请求脚本"></a>构建HTTP请求脚本</h2><p>上面的历史记录就是一个完整的IDEA REST Client请求脚本，如果你是从控制台触发的，那么可以直接复制历史请求记录的文件放到项目里作为HTTP请求的脚本，给其他成员共享，如果不是，也可以直接新建一个.http或者.rest结尾的文件，IDEA会自动识别为HTTP请求脚本。</p><h3 id="语法部分"><a href="#语法部分" class="headerlink" title="语法部分"></a>语法部分</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">### 演示POST请求</span><br><span class="line">POST &#123;&#123;baseUrl&#125;&#125;&#125;get?show_env=1</span><br><span class="line"><span class="attribute">Accept</span>: application/json</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">   "name":"a"</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">### 演示GET请求</span><br><span class="line"></span><br><span class="line">GET &#123;&#123;baseUrl&#125;&#125;&#125;/post</span><br><span class="line"><span class="attribute">Content-Type</span>: application/x-www-form-urlencoded</span><br><span class="line"></span><br><span class="line">id=999&amp;value=content</span><br></pre></td></tr></table></figure><p>首先通过###三个井号键来分开每个请求体，然后请求url和header参数是紧紧挨着的，请求参数不管是POST的body传参还是GET的parameter传参，都是要换行的</p><h3 id="环境区分"><a href="#环境区分" class="headerlink" title="环境区分"></a>环境区分</h3><p>细心的你可能发现了上面示例的代码，没有真实的请求地址，取而代之的，是一个<code></code>的占位符，这个就是IDEA REST Client好用的地方，支持从指定的配置文件中获取到环境相关的配置参数，不仅<code>baseUrl</code>可以通过占位符替换，一些请求的参数如果和接口环境相关的都可以通过配置文件来区分。</p><p>首先在.http的脚本同目录下创建一个名为<code>http-client.private.env.json</code>的文件，然后内容如下，一级的key值时用来区分环境的，比如，<code>dev</code>、<code>uat</code>、<code>pro</code>等，环境下的对象就是一次HTTP请求中能够获取到的环境变量了，你可以直接在请求的HTTP的脚本中通过<code></code>占位符的方式获取到这里配置的参数</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"uat"</span>: &#123;</span><br><span class="line">    <span class="attr">"baseUrl"</span>: <span class="string">"http://gateway.xxx.cn/"</span>,</span><br><span class="line">    <span class="attr">"username"</span>: <span class="string">""</span>,</span><br><span class="line">    <span class="attr">"password"</span>: <span class="string">""</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"dev"</span>: &#123;</span><br><span class="line">    <span class="attr">"baseUrl"</span>: <span class="string">"http://localhsot:8888/"</span>,</span><br><span class="line">    <span class="attr">"username"</span>: <span class="string">""</span>,</span><br><span class="line">    <span class="attr">"password"</span>: <span class="string">""</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么在选择执行请求的时候，IDEA就会让你选执行那个环境的配置，如：<br><img src="https://img-blog.csdnimg.cn/20191120141227541.png" alt="在这里插入图片描述"></p><h3 id="结果断言"><a href="#结果断言" class="headerlink" title="结果断言"></a>结果断言</h3><p>IDEA REST Client可以针对接口的响应值进行脚本化的断言处理，立马从一个接口调试工具上升到测试工具了，比如：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">### Successful test: check response status is 200</span><br><span class="line">GET https://httpbin.org/status/200</span><br><span class="line"></span><br><span class="line">&gt; &#123;%</span><br><span class="line">client.test("Request executed successfully", function() &#123;</span><br><span class="line">  client.assert(response.status === 200, "Response status is not 200");</span><br><span class="line">&#125;);</span><br><span class="line">%&#125;</span><br></pre></td></tr></table></figure><h3 id="结果值暂存"><a href="#结果值暂存" class="headerlink" title="结果值暂存"></a>结果值暂存</h3><p>当一个系统需要通过认证才能访问的时候，如果用postman的时候，需要先访问登录接口，然后获得token后，手动粘贴复制到新的调试接口的header参数里面去，这太麻烦了，IDEA REST Client还有一个很好用的功能，可以完美解决这个问题，请看下面的脚本：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">### 演示POST请求</span><br><span class="line">POST https://httpbin.org/post</span><br><span class="line"><span class="attribute">Content-Type</span>: application/json</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  "user": "admin",</span><br><span class="line">  "password": "123456"</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&gt; &#123;% client.global.set("auth_token", response.body.json.token); %&#125;</span><br><span class="line">### 演示GET请求</span><br><span class="line"></span><br><span class="line">GET https://httpbin.org/headers</span><br><span class="line"><span class="attribute">Authorization</span>: Bearer &#123;&#123;auth_token&#125;&#125;</span><br></pre></td></tr></table></figure><p>在第一个认证的请求结束后，可以在response里拿到返回的token信息，然后我们通过脚本设置到了全局变量里，那么在接下来的接口请求中，就可以直接使用双大括号占位符的方式获取到这个token了</p>]]></content>
      
      
      <categories>
          
          <category> idea </category>
          
          <category> 转载 </category>
          
          <category> 测试 </category>
          
          <category> PostMain </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 接口测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python数组中赋值，浅拷贝，深拷贝的区别</title>
      <link href="/posts/6d526f28.html"/>
      <url>/posts/6d526f28.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>原文链接：<a href="https://www.jianshu.com/p/28e3a3464124" target="_blank" rel="noopener">https://www.jianshu.com/p/28e3a3464124</a><br>要用到的工具</p></blockquote><ul><li><p><code>id(a)</code> 函数用于获取对象a的内存地址。</p></li><li><p><code>a is b</code> 是用来比较 <code>a</code> 和 <code>b</code> 是不是指向同一个内存单元。</p><h2 id="1-直接赋值："><a href="#1-直接赋值：" class="headerlink" title="1. 直接赋值："></a>1. 直接赋值：</h2><p>如下图用工具比较后发现直接赋值后两个列表指向同一内存单元。</p></li><li><p><strong>所以两个列表是完全一致的，其中相对应元素的更改会互相影响。</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="string">"roc"</span>, <span class="string">"python"</span>, <span class="string">"kun"</span>, [<span class="string">"cat"</span>, <span class="string">"alpaca"</span>], <span class="string">"fox"</span>]</span><br><span class="line">b = a</span><br><span class="line">a[<span class="number">2</span>] = <span class="string">"鲲"</span></span><br><span class="line">print(a)</span><br><span class="line">print(b)</span><br><span class="line">print(a <span class="keyword">is</span> b)</span><br><span class="line">print(id(a), id(b))</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20191109160047502.png" alt="在这里插入图片描述"></p><h2 id="2-浅拷贝"><a href="#2-浅拷贝" class="headerlink" title="2. 浅拷贝:"></a>2. 浅拷贝:</h2><p>如下图 <code>name.copy()</code> 在调用时临时开辟内存来拷贝其中一级元素地址（包括嵌套数组的地址，但不拷贝嵌套数组其中元素的地址）。所以相当于两个独立容器，其中装的一级元素地址是相同的。改变一个容器中一级元素，只是改变了该元素的地址索引，对原地址中内容也就是另一容器中对应元素没影响。但是改变嵌套数组中元素，嵌套数组内容改变，嵌套数组地址却没变，俩个容器都会生效。</p></li><li><p><strong>既改变一级元素，另一列表中对应的元素无影响；改变嵌套中的会影响。</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="string">"roc"</span>, <span class="string">"python"</span>, <span class="string">"kun"</span>, [<span class="string">"cat"</span>, <span class="string">"alpaca"</span>], <span class="string">"fox"</span>]</span><br><span class="line">b = a.copy()</span><br><span class="line">a[<span class="number">2</span>] = <span class="string">"鲲"</span></span><br><span class="line">a[<span class="number">3</span>][<span class="number">1</span>] = <span class="string">"羊驼哥"</span></span><br><span class="line">print(a)</span><br><span class="line">print(b)</span><br><span class="line">print(a.copy())</span><br><span class="line"></span><br><span class="line">print(id(a), id(b), id(a.copy()))</span><br><span class="line">print(id(a[<span class="number">3</span>]), id(b[<span class="number">3</span>]), id(a.copy()[<span class="number">3</span>]))</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20191109160147983.png" alt="在这里插入图片描述"></p><h2 id="3-深拷贝"><a href="#3-深拷贝" class="headerlink" title="3. 深拷贝:"></a>3. 深拷贝:</h2><p>虽然列表中独立的元素对应的地址相同，但是当在修改独立元素后不会改变其他集合中的独立元素</p></li><li><p><strong>总之任意元素改变都不会影响另一列表中对应元素。</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> copy</span><br><span class="line"></span><br><span class="line">a = [<span class="string">"roc"</span>, <span class="string">"python"</span>, <span class="string">"kun"</span>, [<span class="string">"cat"</span>, [<span class="string">"alpaca"</span>, <span class="string">"monkey"</span>]], <span class="string">"fox"</span>]</span><br><span class="line">b = copy.deepcopy(a)</span><br><span class="line">a[<span class="number">3</span>][<span class="number">1</span>][<span class="number">0</span>] = <span class="string">"羊驼哥"</span></span><br><span class="line">print(a)</span><br><span class="line">print(b)</span><br><span class="line">print(copy.deepcopy(a))</span><br><span class="line"></span><br><span class="line">print(<span class="string">"比较嵌套对象的内存地址:"</span>, id(a[<span class="number">3</span>]), id(b[<span class="number">3</span>]), id(copy.deepcopy(a)[<span class="number">3</span>]))</span><br><span class="line"></span><br><span class="line">print(<span class="string">"比较嵌套对象中的嵌套对象未修改值的内存地址:"</span>, id(a[<span class="number">3</span>][<span class="number">0</span>]), id(b[<span class="number">3</span>][<span class="number">0</span>]), id(copy.deepcopy(a)[<span class="number">3</span>][<span class="number">0</span>]))</span><br><span class="line">print(<span class="string">"比较嵌套对象中的嵌套对象修改值的内存地址"</span>, id(a[<span class="number">3</span>][<span class="number">1</span>]), id(b[<span class="number">3</span>][<span class="number">1</span>]), id(copy.deepcopy(a)[<span class="number">3</span>][<span class="number">1</span>]))</span><br><span class="line">print(<span class="string">'*'</span> * <span class="number">50</span>)</span><br><span class="line">print(<span class="string">"比较嵌套对象中的嵌套对象中未修改的值内存地址:"</span>, id(a[<span class="number">3</span>][<span class="number">1</span>][<span class="number">1</span>]), id(b[<span class="number">3</span>][<span class="number">1</span>][<span class="number">1</span>]), id(copy.deepcopy(a)[<span class="number">3</span>][<span class="number">1</span>][<span class="number">1</span>]))</span><br><span class="line">print(<span class="string">"比较嵌套对象中的嵌套对象中修改的值内存地址:"</span>, id(a[<span class="number">3</span>][<span class="number">1</span>][<span class="number">0</span>]), id(b[<span class="number">3</span>][<span class="number">1</span>][<span class="number">0</span>]), id(copy.deepcopy(a)[<span class="number">3</span>][<span class="number">1</span>][<span class="number">0</span>]))</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20191109162133310.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMzNDMwMDgz,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="4-总结"><a href="#4-总结" class="headerlink" title="4. 总结"></a>4. 总结</h2></li><li><p><em>赋值相互关联，浅拷贝浅关联，深拷贝无关联。*</em></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 转载 </category>
          
          <category> Python </category>
          
          <category> 基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 浅拷贝 </tag>
            
            <tag> 深拷贝 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot项目接口返回值中Long类型超过17位导致前端js在调用时出现丢失精度问题</title>
      <link href="/posts/146d4389.html"/>
      <url>/posts/146d4389.html</url>
      
        <content type="html"><![CDATA[<p>解决办法很简单<strong>将Long类型的字段转为String类型返给前端即可</strong>，解决方法有3种可根据自己项目情况来选择:</p><h3 id="方式1"><a href="#方式1" class="headerlink" title="方式1"></a>方式1</h3><p>在实体类种直接将<strong>Long类型</strong>的字段修改为<strong>String类型</strong></p><h3 id="方式2"><a href="#方式2" class="headerlink" title="方式2"></a>方式2</h3><p>在要返回的字段上添加<code>@JsonSerialize(using = ToStringSerializer.class)</code>注解，这样就能在序列化时自动将该字段类型转为String类型返给前端，相较于<strong>方式1</strong>不影响其他调用该字段的方法</p><h3 id="方式3"><a href="#方式3" class="headerlink" title="方式3"></a>方式3</h3><p>通过配置全局拦截器将所有返回结果的Long类型字段转为String类型，代码如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableWebMvc</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebDataConvertConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configureMessageConverters</span><span class="params">(List&lt;HttpMessageConverter&lt;?&gt;&gt; converters)</span> </span>&#123;</span><br><span class="line">    MappingJackson2HttpMessageConverter jackson2HttpMessageConverter = <span class="keyword">new</span> MappingJackson2HttpMessageConverter();</span><br><span class="line">    ObjectMapper objectMapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 序列换成json时,将所有的long变成string</span></span><br><span class="line"><span class="comment">     * 因为js中得数字类型不能包含所有的java long值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    SimpleModule simpleModule = <span class="keyword">new</span> SimpleModule();</span><br><span class="line">    simpleModule.addSerializer(Long<span class="class">.<span class="keyword">class</span>, <span class="title">ToStringSerializer</span>.<span class="title">instance</span>)</span>;</span><br><span class="line">    simpleModule.addSerializer(Long.TYPE, ToStringSerializer.instance);</span><br><span class="line"></span><br><span class="line">    objectMapper.registerModule(simpleModule);</span><br><span class="line">    <span class="comment">// 设置为空的字段不返回</span></span><br><span class="line">    objectMapper.setSerializationInclusion(NON_NULL);</span><br><span class="line">    <span class="comment">// 指定json转换时间类型的时区</span></span><br><span class="line">    objectMapper.setTimeZone(TimeZone.getTimeZone(<span class="string">"GMT+8"</span>));</span><br><span class="line">    <span class="comment">// 指定返回的时间格式</span></span><br><span class="line">    objectMapper.setDateFormat(<span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd HH:mm:ss"</span>));</span><br><span class="line">    jackson2HttpMessageConverter.setObjectMapper(objectMapper);</span><br><span class="line">    converters.add(jackson2HttpMessageConverter);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> Spring </category>
          
          <category> Web </category>
          
          <category> SpringBoot </category>
          
          <category> BUG </category>
          
          <category> 异常 </category>
          
          <category> Js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数字丢失精度 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql中通过FIND_IN_SET函数关联表id包含多个值用逗号分隔，通过sql语句查询关联表信息</title>
      <link href="/posts/34551307.html"/>
      <url>/posts/34551307.html</url>
      
        <content type="html"><![CDATA[<p>之所以会用到该函数是因为在写将mysql数据使用<strong>logstash</strong>同步至es上时发现有的表关联id字段是多个id按逗号分隔，因为是用sql语句查询，不能像java中一样先查询A表然后再循环拆分id字段循环查询B表，所以需要用到<code>FIND_IN_SET</code>函数，下边是使用该函数的demo<br>现在有表A和表B，数据信息如下<br><img src="https://img-blog.csdnimg.cn/20190917101606126.png" alt="在这里插入图片描述"><br>现在需要根据表A的typeIds关联查询到B表的name，sql语句如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">SELECT </span><br><span class="line">    A.id, A.type_ids typeIds, GROUP_CONCAT(B.&#96;name&#96;) AS typeNames</span><br><span class="line">FROM A</span><br><span class="line">JOIN B ON FIND_IN_SET(B.id,A.type_ids)</span><br><span class="line">GROUP BY A.id</span><br></pre></td></tr></table></figure><p>这样通过关联查询便能获取到相应的类型名称<br><img src="https://img-blog.csdnimg.cn/20190917101719419.png" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> DB </category>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sql查询 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>idea在合并git时分支代码时报错You have not concluded your merge</title>
      <link href="/posts/f8d87466.html"/>
      <url>/posts/f8d87466.html</url>
      
        <content type="html"><![CDATA[<p>在通过idea合并分支时，碰到一个错误，说是因为在合并分支时为合并完成，如下图<br><img src="https://img-blog.csdnimg.cn/20190917101350695.png" alt="在这里插入图片描述"></p><p>之所以会碰到这个错误是因为，在合并分支时碰到了冲突，在解决冲突时按到了关闭按钮然后代码中展示了很多冲突，想要重新合并一次，所以就直接通过idea的revert将代码回滚了，然后再去合并就出现这个错误。解决办法如下：</p><p>打开idea的Terminal命令行，输入如下两行命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git fetch --all</span><br><span class="line">git reset --hard origin&#x2F;master</span><br></pre></td></tr></table></figure><p><code>git fetch</code> 是下载远程的仓库的内容，不做任何的合并，<code>git reset</code> 是把本地代码指向刚刚下载的最新的版本，<strong><code>origin/master</code>是主干代码名，如果是分支则要换成分支名。</strong></p><p>然后再去合并其他分支的代码就可以了，如过在合并的时候提示有未完成的合并，是因为之前合并回滚的代码没有删掉，找到本地项目中红色的文件全部删掉后就可以正常合并了</p>]]></content>
      
      
      <categories>
          
          <category> idea </category>
          
          <category> BUG </category>
          
          <category> 异常 </category>
          
          <category> Git </category>
          
          <category> 项目管理 </category>
          
          <category> Git </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Xpath使用教程</title>
      <link href="/posts/6e7a1eef.html"/>
      <url>/posts/6e7a1eef.html</url>
      
        <content type="html"><![CDATA[<h2 id="什么是XPath"><a href="#什么是XPath" class="headerlink" title="什么是XPath?"></a>什么是XPath?</h2><p>xpath(XML Path Language)是一门在XML和HTMl文档中查找信息的语言,可用来在XML和HTML文档中对元素和属性进行遍历.   </p><h2 id="XPath开发工具"><a href="#XPath开发工具" class="headerlink" title="XPath开发工具"></a>XPath开发工具</h2><ol><li>Chrome插件XPath Helper.</li><li>Firefox插件XPath Checker和Try XPath</li></ol><h2 id="XPath语法"><a href="#XPath语法" class="headerlink" title="XPath语法"></a>XPath语法</h2><h3 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h3><p>使用//获取整个界面当中的元素，然后写签名，然后再写谓词进行提取。比如</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;div[@class&#x3D;&#39;abc&#39;]</span><br></pre></td></tr></table></figure><h3 id="需要注意的知识点"><a href="#需要注意的知识点" class="headerlink" title="需要注意的知识点"></a>需要注意的知识点</h3><ol><li><code>/</code> 和 <code>//</code> 的区别：<ul><li>/代表只获取直接子节点。</li><li>//获取子孙节点。一般//用得比较多。当然也要视情况而定。</li></ul></li><li>contains: 有时候某个属性中包含了多个值，那么可以使用<code>contains</code>函数。实例代码如下 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;div[contains(@class, &#39;job_detail&#39;)]</span><br></pre></td></tr></table></figure></li><li>谓语中的下标是从1开始的，不是从0开始<h3 id="选取节点"><a href="#选取节点" class="headerlink" title="选取节点"></a>选取节点</h3>XPath使用路径表达式来选取XML文档中的节点或者节点集.这些路径表达式和我们在常规的电脑文件系统中看到的表达式非常相似.</li></ol><table><thead><tr><th>表达式</th><th>描述</th><th>示例</th><th>结果</th></tr></thead><tbody><tr><td>nodename</td><td>选取此节点的所有子节点</td><td>bookstore</td><td>选取bookstore下所有的子节点</td></tr><tr><td>/</td><td>如果在最前面,代表从根节点选取.否则选择某节点下的某个子节点</td><td>/bookstore</td><td>选取根元素下所有的bookstore节点</td></tr><tr><td>//</td><td>从全局节点中选择节点,随便在哪个位置</td><td>//book</td><td>从全局节点中找到所有的book节点</td></tr><tr><td>@</td><td>选取某个节点的属性</td><td>//book[@class]</td><td>选择所有book中拥有class属性的节点</td></tr></tbody></table><h3 id="谓语"><a href="#谓语" class="headerlink" title="谓语"></a>谓语</h3><p>谓语用来查找某个特定的节点或者包含某个指定的值的节点,被嵌在方括号中.<br>在下面的表格中,我们列出了带有谓语的一些路径表达式,以及表达的结果</p><table><thead><tr><th>路径表达式</th><th>描述</th></tr></thead><tbody><tr><td>/bookstore/book[1]</td><td>选取bookstore下的第一个子元素</td></tr><tr><td>/bookstore/book[last()]</td><td>选取bookstore下的最后一个book元素</td></tr><tr><td><code>/bookstore/book[position()&lt;3]</code></td><td>选取bookstore下前面两个子元素</td></tr><tr><td>/book[@price]</td><td>选取拥有price属性的book元素</td></tr><tr><td>/book[@price=10]</td><td>选取所有属性price等于10的book元素</td></tr><tr><td>/book[contains(@class, ‘fl’)]</td><td>模糊匹配class属性中有<code>fl</code>值的标签</td></tr></tbody></table><h3 id="通配符"><a href="#通配符" class="headerlink" title="通配符"></a>通配符</h3><p>*表示通配符.</p><table><thead><tr><th>通配符</th><th>描述</th><th>示例</th><th>结果</th></tr></thead><tbody><tr><td>*</td><td>匹配任意节点</td><td>/bookstore/*</td><td>选取bookstore下的所有子元素.</td></tr><tr><td>@*</td><td>匹配节点中的任意属性</td><td>//book[@*]</td><td>选取所有带属性的book元素.</td></tr></tbody></table><h3 id="选取多个路径"><a href="#选取多个路径" class="headerlink" title="选取多个路径"></a>选取多个路径</h3><p>通过在路径表达式中使用”|”运算符,可以选择若干路径</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;bookstore&#x2F;book | &#x2F;&#x2F;book&#x2F;title</span><br><span class="line"># 选取所有book元素以及book元素下所有的title元素</span><br></pre></td></tr></table></figure><h3 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h3><table><thead><tr><th>运算符</th><th>描述</th><th>示例</th><th>返回值</th></tr></thead><tbody><tr><td>&#124;</td><td>计算两个节点集</td><td>//book &#124; //cd</td><td>返回所拥有book和cd元素的节点集</td></tr><tr><td>+</td><td>加法</td><td>6 + 4</td><td>10</td></tr><tr><td>-</td><td>减法</td><td>6 - 4</td><td>2</td></tr><tr><td>*</td><td>乘法</td><td>6 * 4</td><td>24</td></tr><tr><td>div</td><td>除法</td><td>8 div 4</td><td>2</td></tr><tr><td>=</td><td>等于</td><td>price=9.80</td><td>如果price是9.80,则返回true.如果price是9.90,则返回false</td></tr><tr><td>!=</td><td>不等于</td><td>price != 9.80</td><td>如果price是9.90,则返回true.如果price是9.80,则返回false</td></tr><tr><td>&lt;</td><td>小于</td><td>price &lt; 9.80</td><td>如果price是9.00,则返回true.如果price是9.90,则返回false</td></tr><tr><td>&lt;=</td><td>小于等于</td><td>price &lt;= 9.80</td><td>如果price是9.00,则返回true.如果price是9.90,则返回false</td></tr><tr><td>&gt;</td><td>大于</td><td>price &gt; 9.80</td><td>如果price是9.90,则返回true.如果price是9.00,则返回false</td></tr><tr><td>&gt;=</td><td>大于等于</td><td>price &gt;= 9.80</td><td>如果price是9.90,则返回true.如果price是9.00,则返回false</td></tr><tr><td>or</td><td>或者</td><td>price = 9.80 or price = 9.70</td><td>如果price是9.80,则返回true.如果price是9.50,则返回false</td></tr><tr><td>and</td><td>与,并且</td><td>price &amp;gt 9 and price &lt; 9.90</td><td>如果price是9.80,则返回true.如果price是8.50,则返回false</td></tr><tr><td>mod</td><td>计算除法的余数</td><td>5 mod 2</td><td>1</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> 爬虫 </category>
          
          <category> Xpath </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>网页中添加了其他网站上的图片链接，这个图片设置了防盗链的图片后，访问报403解决办法</title>
      <link href="/posts/1950a942.html"/>
      <url>/posts/1950a942.html</url>
      
        <content type="html"><![CDATA[<h2 id="碰到的问题"><a href="#碰到的问题" class="headerlink" title="碰到的问题"></a>碰到的问题</h2><p>网页中添加了其他网站上的图片链接，这个图片设置了防盗链的图片后，访问报403</p><h3 id="防盗链基本实现说明"><a href="#防盗链基本实现说明" class="headerlink" title="防盗链基本实现说明"></a>防盗链基本实现说明</h3><p>主要是通过验证<code>referer</code>中记录的接口请求来源来验证网站有没有权限访问该图片资源，如果没权限在则返回<code>403</code>无权限访问</p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>经排查测试，发现一般大多数网站中图片的防盗链都是只屏蔽了不在白名单中的<code>referer</code>，但是没有屏蔽<code>referer</code>为空的请求  </p><h3 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h3><p>在网页的<code>&lt;head&gt;</code>标签中添加<code>&lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;/&gt;</code>，意思是设置从此页面发出的请求（包括请求图片等资源文件）不设置<code>referer</code>请求来源<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9zMi5heDF4LmNvbS8yMDE5LzA4LzI2L21mOTVCZC5wbmc?x-oss-process=image/format,png" alt="mf95Bd.png"></p><h3 id="Referrer简介"><a href="#Referrer简介" class="headerlink" title="Referrer简介"></a>Referrer简介</h3><p><code>Referrer</code>网站来路，访问者进入网站任何途径。<code>HTTP Referer</code>是<code>header</code>的一部分，当浏览器向web服务器发出请求的时候，一般会带上<code>Referer</code>,告诉服务器用户从那个页面连接过来的，服务器藉此可以获得一些信息用语处理。</p><h4 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h4><p>判断网站来源,可以相应的做一些校验,比如只允许某网站的请求,那么就可以通过获取<code>referer</code>，加以判断即可。</p><h4 id="可设置的参数"><a href="#可设置的参数" class="headerlink" title="可设置的参数"></a>可设置的参数</h4><table><thead><tr><th align="center">参数</th><th align="left">说明</th></tr></thead><tbody><tr><td align="center">空字符串</td><td align="left">按照浏览器的默认值执行。默认值为 <code>no-referrer-when-downgrade</code>。部分标签可重定义此安全策略</td></tr><tr><td align="center"><code>no-referrer</code></td><td align="left">不传递 <code>Referrer</code> 报头的值</td></tr><tr><td align="center"><code>no-referrer-when-downgrade</code></td><td align="left">当发生降级（比如从 <code>https://</code> 跳转到 <code>http://</code> ）时，不传递 <code>Referrer</code> 报头。但是反过来的话不受影响。通常也会当作浏览器的默认安全策略</td></tr><tr><td align="center"><code>same-origin</code></td><td align="left">同源，即当协议、域名和端口（如果有一方指定的话）都相同，才会传递 <code>Referrer</code></td></tr><tr><td align="center"><code>origin</code></td><td align="left">将当前页面过滤掉参数及路径部分，仅将协议、域名和端口（如果有的话）当作 <code>Referrer</code></td></tr><tr><td align="center"><code>strict-origin</code></td><td align="left">类似于 <code>origin</code>，但是不能降级。</td></tr><tr><td align="center"><code>origin-when-cross-origin</code></td><td align="left">跨域时（协议、域名和端口只有一个不同）和 <code>origin</code> 模式相同，否则 Referrer 还是传递当前页的全路径。</td></tr><tr><td align="center"><code>strict-origin-when-cross-origin</code></td><td align="left">与 <code>origin-when-cross-origin</code> 类似，但不能降级。</td></tr><tr><td align="center"><code>unsafe-url</code></td><td align="left">任意情况下，都发送当前页的全部地址到 <code>Referrer</code>，最宽松和不安全的策略。</td></tr></tbody></table><h4 id="了解Referrer详细内容可以参靠此篇博客"><a href="#了解Referrer详细内容可以参靠此篇博客" class="headerlink" title="了解Referrer详细内容可以参靠此篇博客"></a>了解<code>Referrer</code>详细内容可以参靠<a href="https://blog.csdn.net/java_zhangshuai/article/details/81627365" target="_blank" rel="noopener">此篇博客</a></h4>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
          <category> BUG </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 防盗链 </tag>
            
            <tag> 403 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JMeter 测试常用到的一些功能</title>
      <link href="/posts/fd807af5.html"/>
      <url>/posts/fd807af5.html</url>
      
        <content type="html"><![CDATA[<h2 id="设置中文"><a href="#设置中文" class="headerlink" title="设置中文"></a>设置中文</h2><p>在导航栏选择 <code>Options-&gt;Choose Language-&gt;Chinese(Simplified)</code> 即可设置为简体中文<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pLmxvbGkubmV0LzIwMTkvMDgvMTUvQllOZjRuQWIyNUVyaVJvLnBuZw" alt="UTOOLS1565849537890.png"></p><p>设置后如下图<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pLmxvbGkubmV0LzIwMTkvMDgvMTUvVU10YkFObmM4WXpmUEZtLnBuZw" alt="UTOOLS1565849659132.png"></p><h2 id="设置请求头"><a href="#设置请求头" class="headerlink" title="设置请求头"></a>设置请求头</h2><ol><li><p>新增<code>HTTP信息头管理器</code><br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pLmxvbGkubmV0LzIwMTkvMDgvMTUvZDZHdkJEZlRxSUpQZUNILnBuZw" alt="UTOOLS1565850836742.png"></p></li><li><p>逐个设置请求头即可，如果我们是post请求想要设置请求参数为json数据则可以添加<code>Content-Type</code>，值为<code>application/json</code><br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pLmxvbGkubmV0LzIwMTkvMDgvMTUvaDVSZzZrREFhUU9MenRILnBuZw" alt="UTOOLS1565850960112.png"></p></li></ol><h2 id="设置请求默认值"><a href="#设置请求默认值" class="headerlink" title="设置请求默认值"></a>设置请求默认值</h2><ol><li><p>以百度搜索为例，新增 <code>HTTP请求默认值</code><br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pLmxvbGkubmV0LzIwMTkvMDgvMTUvSERHSnI4NnFtWlJMd2Z6LnBuZw" alt="UTOOLS1565851069666.png"></p></li><li><p>然后直接设置请求的域名，协议，端口等信息<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pLmxvbGkubmV0LzIwMTkvMDgvMTUva0FESlNNZ1QxVWx0N3M2LnBuZw?x-oss-process=image/format,png" alt="test.png"></p></li><li><p>在发送http请求时，如果不设置这些信息，则会使用默认的<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pLmxvbGkubmV0LzIwMTkvMDgvMTUvOXhxNGxySDZ1SzVNTkQ4LnBuZw" alt="UTOOLS1565851866506.png"><br>[外链图片转存失败(img-l6LecNDL-1565859654765)(<a href="https://i.loli.net/2019/08/15/8NU796HhzXFf2LI.png)]" target="_blank" rel="noopener">https://i.loli.net/2019/08/15/8NU796HhzXFf2LI.png)]</a></p></li></ol><h2 id="设置普通变量并使用"><a href="#设置普通变量并使用" class="headerlink" title="设置普通变量并使用"></a>设置普通变量并使用</h2><ol><li><p>还是以百度搜索为例，右键测试计划新增一个用户自定义配置元件<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pLmxvbGkubmV0LzIwMTkvMDgvMTUvZk5lcnVhbDVFeWlNdFFrLnBuZw" alt="UTOOLS1565851630729.png"></p></li><li><p>添加查询条件参数<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pLmxvbGkubmV0LzIwMTkvMDgvMTUvUDRhVXI3bmo1SWtPZTF5LnBuZw" alt="UTOOLS1565852073658.png"></p></li><li><p>新建一个http请求，通过<code>${参数名}</code>的方式来获取参数<br>[外链图片转存失败(img-NMfrhBcJ-1565859654772)(<a href="https://i.loli.net/2019/08/15/NsrBmJQ36SaoMly.png)]" target="_blank" rel="noopener">https://i.loli.net/2019/08/15/NsrBmJQ36SaoMly.png)]</a></p></li><li><p>启动查看结果，可以看到在http的名称和参数中都能获取到该参数</p></li></ol><h2 id="设置随机数变量并使用"><a href="#设置随机数变量并使用" class="headerlink" title="设置随机数变量并使用"></a>设置随机数变量并使用</h2><ol><li><p>右键选择测试计划创建<code>随机变量</code>配置元件<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pLmxvbGkubmV0LzIwMTkvMDgvMTUvSGROcndTUjZJZU8zWjl0LnBuZw" alt="UTOOLS1565852293655.png"></p><p> <img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pLmxvbGkubmV0LzIwMTkvMDgvMTUvT0kxVXJSRU1vWEZXS3dlLnBuZw" alt="UTOOLS1565853158742.png"></p></li><li><p>创建两个设置参数，和之前设置普通的一样<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pLmxvbGkubmV0LzIwMTkvMDgvMTUvSGt5M1F6U0JGRFVDdjJWLnBuZw" alt="UTOOLS1565854457673.png"></p></li><li><p>执行JMeter查看返回的随机数<br>[外链图片转存失败(img-6PmCqJqf-1565859654778)(<a href="https://i.loli.net/2019/08/15/7dxCbzR6y39sfhE.png)]" target="_blank" rel="noopener">https://i.loli.net/2019/08/15/7dxCbzR6y39sfhE.png)]</a></p></li></ol><h3 id="其他写法"><a href="#其他写法" class="headerlink" title="其他写法"></a>其他写法</h3><ol><li><p>添加3个用户自定义变量<br>[外链图片转存失败(img-fIOIZh10-1565859654779)(<a href="https://i.loli.net/2019/08/15/kO8fNguiaybmnrF.png)]" target="_blank" rel="noopener">https://i.loli.net/2019/08/15/kO8fNguiaybmnrF.png)]</a></p></li><li><p>使用<code>${__V(wd${__Random(1, 3)})}</code>调用<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pLmxvbGkubmV0LzIwMTkvMDgvMTUvbHpUTm9yREY3UmV1bTNnLnBuZw" alt="UTOOLS1565854923990.png"></p></li><li><p>拆解</p><ul><li><code>${__Random(1, 3)}</code>: 随机生成1-3之间的整数  </li><li><code>wd${__Random(1, 3)}</code>: 随机生成wd1, wd2, wd3中的任意1个字符串</li><li><code>${__V(wd${__Random(1, 3)})}</code>: 对形如wd1的字符串求值。也就是不把wd1当成字符串来看，而是把wd1当作是1个变量，并获取这个变量的值。wd1的值是我们在用户自定义变量中定义过的，也就是搜索。那么连起来，这个表达式的作用就是随机生成搜索第一个变量, 搜索第二个变量, 搜索第三个变量中的任意一个字符串</li></ul></li><li><p>请求的结果如下<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pLmxvbGkubmV0LzIwMTkvMDgvMTUvYmNxVjhhMTVPdTk2SEF0LnBuZw" alt="UTOOLS1565855258378.png"></p></li><li><p>可以看到在http请求，名称中的参数和发送请求时wd的参数值不一样，即每次都请求都不一样</p></li></ol><p><strong>由于随机数的生成的时候会耗cpu和内存，当用户量并发量很大的时候，不推荐使用JMeter脚本来生成随机数，这个时候推荐使用下边的方法通过读取csv文件来获取请求的值</strong></p><h2 id="读取csv文件"><a href="#读取csv文件" class="headerlink" title="读取csv文件"></a>读取csv文件</h2><ol><li>创建txt文件 输入如下内容，另存为csv文件（编码为UTF-8），每次在txt文档修改保存 每组数据以英文逗号分隔<br>[外链图片转存失败(img-2CcqEAmE-1565859654788)(<a href="https://i.loli.net/2019/08/15/MBHEJ14QfiFTLuO.png)]" target="_blank" rel="noopener">https://i.loli.net/2019/08/15/MBHEJ14QfiFTLuO.png)]</a></li></ol><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pLmxvbGkubmV0LzIwMTkvMDgvMTUvVlJEWU01cEFxcldpYjNQLnBuZw" alt="UTOOLS1565855742052.png"></p><ol start="2"><li><p>创建csv数据文件设置<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9zMi5heDF4LmNvbS8yMDE5LzA4LzE1L21FM1BuVS5wbmc" alt="mE3PnU.png"></p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9zMi5heDF4LmNvbS8yMDE5LzA4LzE1L21FM0c0QS5wbmc" alt="mE3G4A.png"><br>title和value代表每行有两列数据（名字可以自己随便定义），把读取到的2个数据分别赋值给title和value(循环一次使用第一行数据，循环两次使用第二行数据，以此类推，超出则从第一行开始重新获取)</p></li><li><p>使用变量还是和之前一样，可以看到参数设置成功<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9zMi5heDF4LmNvbS8yMDE5LzA4LzE1L21FR3BlVS5wbmc" alt="mEGpeU.png"><br>请求结果<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9zMi5heDF4LmNvbS8yMDE5LzA4LzE1L21FR2VPSy5wbmc" alt="mEGeOK.png"></p></li></ol><h2 id="获取到上一个方法的返回值，并设置为变量"><a href="#获取到上一个方法的返回值，并设置为变量" class="headerlink" title="获取到上一个方法的返回值，并设置为变量"></a>获取到上一个方法的返回值，并设置为变量</h2><p>在返回值为json数据是常用到，以京东的评论接口为例</p><ol><li><p>因为京东有接口限制，所以我们要新添加<code>Content-Type</code>和<code>Referer</code>这两个请求头<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9zMi5heDF4LmNvbS8yMDE5LzA4LzE1L21FZGIyNC5wbmc" alt="mEdb24.png"></p></li><li><p>新建一个http请求设置接口和参数<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9zMi5heDF4LmNvbS8yMDE5LzA4LzE1L21FYTl3Ni5wbmc" alt="mEa9w6.png"></p></li><li><p>对接口进行请求，先尝试对返回结果进行提取</p><ul><li>在<code>查看结果树</code>中先将返回值换为json格式查看<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9zMi5heDF4LmNvbS8yMDE5LzA4LzE1L21FMEtUeC5wbmc" alt="mE0KTx.png"></li><li>然后在<code>JSON Path Expression</code>后的数据框中输入提取字段方法测试，例如提去热门标签中的第一个名字，点击test测试是否能获取到<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9zMi5heDF4LmNvbS8yMDE5LzA4LzE1L21FMGhOVi5wbmc" alt="mE0hNV.png"></li><li><code>$.</code>: 是固定开头，后边根据对象层级通过<code>.</code>来获取</li></ul></li><li><p>右键在第二步中添加http请求，选择后置处理器添加<code>JSON Extractor</code><br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9zMi5heDF4LmNvbS8yMDE5LzA4LzE1L21FQjlqSC5wbmc" alt="mEB9jH.png"></p></li><li><p>在<code>JSON Extractor</code>提取到需要的值，并设置参数名<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9zMi5heDF4LmNvbS8yMDE5LzA4LzE1L21FQmhxQS5wbmc" alt="mEBhqA.png"></p></li><li><p>右键线程组添加<code>Debug Sampler</code>调试取样器，来查看是否获取成功<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9zMi5heDF4LmNvbS8yMDE5LzA4LzE1L21FQnphcS5wbmc" alt="mEBzaq.png"></p></li><li><p>执行JMeter，可以看到设置成功<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9zMi5heDF4LmNvbS8yMDE5LzA4LzE1L21FREFzSi5wbmc" alt="mEDAsJ.png"></p></li></ol><h2 id="逻辑判断"><a href="#逻辑判断" class="headerlink" title="逻辑判断"></a>逻辑判断</h2><ol><li><p>右键线程组添加（if）选择控制器<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9zMi5heDF4LmNvbS8yMDE5LzA4LzE1L21FSmlCOC5wbmc" alt="mEJiB8.png"></p><p>设置当<code>${value}</code>值为<code>JMeter2</code>时才执行<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9zMi5heDF4LmNvbS8yMDE5LzA4LzE1L21FSnVqMC5wbmc" alt="mEJuj0.png"></p></li><li><p>右键(if)选择控制器，来新增一个http请求，不填任何数据使用默认值<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9zMi5heDF4LmNvbS8yMDE5LzA4LzE1L21FSjZDZC5wbmc" alt="mEJ6Cd.png"><br><strong>注: 要将下边的<code>Interpret Condition as Variable Expression?</code> 选框勾选去掉，否则无法通过<code>${value}</code>获取到参数值，而是将<code>${value}</code>当做字符串比较</strong></p></li><li><p>启动JMeter查看返回结果，只有<code>value</code>为<code>JMeter2</code>时才执行了<code>进入if判断</code>请求   <img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9zMi5heDF4LmNvbS8yMDE5LzA4LzE1L21FdHk2SS5wbmc" alt="mEty6I.png"></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 测试 </category>
          
          <category> JMeter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jieba 中文分词使用教程</title>
      <link href="/posts/a49a18a1.html"/>
      <url>/posts/a49a18a1.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>原文链接：<a href="https://github.com/fxsjy/jieba/blob/master/README.md" target="_blank" rel="noopener">https://github.com/fxsjy/jieba/blob/master/README.md</a></p></blockquote><h1 id="jieba"><a href="#jieba" class="headerlink" title="jieba"></a>jieba</h1><p>“结巴”中文分词：做最好的 Python 中文分词组件</p><p>“Jieba” (Chinese for “to stutter”) Chinese text segmentation: built to be the best Python Chinese word segmentation module.</p><ul><li><em>Scroll down for English documentation.</em></li></ul><h1 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h1><ul><li><p>支持三种分词模式：</p><ul><li>精确模式，试图将句子最精确地切开，适合文本分析；</li><li>全模式，把句子中所有的可以成词的词语都扫描出来, 速度非常快，但是不能解决歧义；</li><li>搜索引擎模式，在精确模式的基础上，对长词再次切分，提高召回率，适合用于搜索引擎分词。</li></ul></li><li><p>支持繁体分词</p></li><li><p>支持自定义词典</p></li><li><p>MIT 授权协议</p></li></ul><h1 id="友情链接"><a href="#友情链接" class="headerlink" title="友情链接"></a>友情链接</h1><ul><li><a href="https://github.com/baidu/lac" target="_blank" rel="noopener">https://github.com/baidu/lac</a>   百度中文词法分析（分词+词性+专名）系统</li><li><a href="https://github.com/baidu/AnyQ" target="_blank" rel="noopener">https://github.com/baidu/AnyQ</a>  百度FAQ自动问答系统</li><li><a href="https://github.com/baidu/Senta" target="_blank" rel="noopener">https://github.com/baidu/Senta</a> 百度情感识别系统</li></ul><h1 id="安装说明"><a href="#安装说明" class="headerlink" title="安装说明"></a>安装说明</h1><p>代码对 Python 2/3 均兼容</p><ul><li>全自动安装：<code>easy_install jieba</code> 或者 <code>pip install jieba</code> / <code>pip3 install jieba</code></li><li>半自动安装：先下载 <a href="http://pypi.python.org/pypi/jieba/" target="_blank" rel="noopener">http://pypi.python.org/pypi/jieba/</a> ，解压后运行 <code>python setup.py install</code></li><li>手动安装：将 jieba 目录放置于当前目录或者 site-packages 目录</li><li>通过 <code>import jieba</code> 来引用</li></ul><h1 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h1><ul><li>基于前缀词典实现高效的词图扫描，生成句子中汉字所有可能成词情况所构成的有向无环图 (DAG)</li><li>采用了动态规划查找最大概率路径, 找出基于词频的最大切分组合</li><li>对于未登录词，采用了基于汉字成词能力的 HMM 模型，使用了 Viterbi 算法</li></ul><h1 id="主要功能"><a href="#主要功能" class="headerlink" title="主要功能"></a>主要功能</h1><ol><li>分词</li></ol><hr><ul><li><code>jieba.cut</code> 方法接受三个输入参数: 需要分词的字符串；cut_all 参数用来控制是否采用全模式；HMM 参数用来控制是否使用 HMM 模型</li><li><code>jieba.cut_for_search</code> 方法接受两个参数：需要分词的字符串；是否使用 HMM 模型。该方法适合用于搜索引擎构建倒排索引的分词，粒度比较细</li><li>待分词的字符串可以是 unicode 或 UTF-8 字符串、GBK 字符串。注意：不建议直接输入 GBK 字符串，可能无法预料地错误解码成 UTF-8</li><li><code>jieba.cut</code> 以及 <code>jieba.cut_for_search</code> 返回的结构都是一个可迭代的 generator，可以使用 for 循环来获得分词后得到的每一个词语(unicode)，或者用</li><li><code>jieba.lcut</code> 以及 <code>jieba.lcut_for_search</code> 直接返回 list</li><li><code>jieba.Tokenizer(dictionary=DEFAULT_DICT)</code> 新建自定义分词器，可用于同时使用不同词典。<code>jieba.dt</code> 为默认分词器，所有全局分词相关函数都是该分词器的映射。</li></ul><p>代码示例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># encoding=utf-8</span></span><br><span class="line"><span class="keyword">import</span> jieba</span><br><span class="line"></span><br><span class="line">seg_list = jieba.cut(<span class="string">"我来到北京清华大学"</span>, cut_all=<span class="literal">True</span>)</span><br><span class="line">print(<span class="string">"Full Mode: "</span> + <span class="string">"/ "</span>.join(seg_list))  <span class="comment"># 全模式</span></span><br><span class="line"></span><br><span class="line">seg_list = jieba.cut(<span class="string">"我来到北京清华大学"</span>, cut_all=<span class="literal">False</span>)</span><br><span class="line">print(<span class="string">"Default Mode: "</span> + <span class="string">"/ "</span>.join(seg_list))  <span class="comment"># 精确模式</span></span><br><span class="line"></span><br><span class="line">seg_list = jieba.cut(<span class="string">"他来到了网易杭研大厦"</span>)  <span class="comment"># 默认是精确模式</span></span><br><span class="line">print(<span class="string">", "</span>.join(seg_list))</span><br><span class="line"></span><br><span class="line">seg_list = jieba.cut_for_search(<span class="string">"小明硕士毕业于中国科学院计算所，后在日本京都大学深造"</span>)  <span class="comment"># 搜索引擎模式</span></span><br><span class="line">print(<span class="string">", "</span>.join(seg_list))</span><br></pre></td></tr></table></figure><p>输出:</p><pre><code>【全模式】: 我/ 来到/ 北京/ 清华/ 清华大学/ 华大/ 大学【精确模式】: 我/ 来到/ 北京/ 清华大学【新词识别】：他, 来到, 了, 网易, 杭研, 大厦    (此处，“杭研”并没有在词典中，但是也被Viterbi算法识别出来了)【搜索引擎模式】： 小明, 硕士, 毕业, 于, 中国, 科学, 学院, 科学院, 中国科学院, 计算, 计算所, 后, 在, 日本, 京都, 大学, 日本京都大学, 深造</code></pre><ol start="2"><li>添加自定义词典</li></ol><hr><h3 id="载入词典"><a href="#载入词典" class="headerlink" title="载入词典"></a>载入词典</h3><ul><li>开发者可以指定自己自定义的词典，以便包含 jieba 词库里没有的词。虽然 jieba 有新词识别能力，但是自行添加新词可以保证更高的正确率</li><li>用法： jieba.load_userdict(file_name) # file_name 为文件类对象或自定义词典的路径</li><li>词典格式和 <code>dict.txt</code> 一样，一个词占一行；每一行分三部分：词语、词频（可省略）、词性（可省略），用空格隔开，顺序不可颠倒。<code>file_name</code> 若为路径或二进制方式打开的文件，则文件必须为 UTF-8 编码。</li><li>词频省略时使用自动计算的能保证分出该词的词频。</li></ul><p><strong>例如：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">创新办 3 i</span><br><span class="line">云计算 5</span><br><span class="line">凱特琳 nz</span><br><span class="line">台中</span><br></pre></td></tr></table></figure><ul><li><p>更改分词器（默认为 <code>jieba.dt</code>）的 <code>tmp_dir</code> 和 <code>cache_file</code> 属性，可分别指定缓存文件所在的文件夹及其文件名，用于受限的文件系统。</p></li><li><p>范例：</p><ul><li><p>自定义词典：<a href="https://github.com/fxsjy/jieba/blob/master/test/userdict.txt" target="_blank" rel="noopener">https://github.com/fxsjy/jieba/blob/master/test/userdict.txt</a></p></li><li><p>用法示例：<a href="https://github.com/fxsjy/jieba/blob/master/test/test_userdict.py" target="_blank" rel="noopener">https://github.com/fxsjy/jieba/blob/master/test/test_userdict.py</a></p></li></ul></li></ul><pre><code>* 之前： 李小福 / 是 / 创新 / 办 / 主任 / 也 / 是 / 云 / 计算 / 方面 / 的 / 专家 /* 加载自定义词库后：　李小福 / 是 / 创新办 / 主任 / 也 / 是 / 云计算 / 方面 / 的 / 专家 /</code></pre><h3 id="调整词典"><a href="#调整词典" class="headerlink" title="调整词典"></a>调整词典</h3><ul><li><p>使用 <code>add_word(word, freq=None, tag=None)</code> 和 <code>del_word(word)</code> 可在程序中动态修改词典。</p></li><li><p>使用 <code>suggest_freq(segment, tune=True)</code> 可调节单个词语的词频，使其能（或不能）被分出来。</p></li><li><p>注意：自动计算的词频在使用 HMM 新词发现功能时可能无效。</p></li></ul><p>代码示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; print(&#39;&#x2F;&#39;.join(jieba.cut(&#39;如果放到post中将出错。&#39;, HMM&#x3D;False)))</span><br><span class="line">如果&#x2F;放到&#x2F;post&#x2F;中将&#x2F;出错&#x2F;。</span><br><span class="line">&gt;&gt;&gt; jieba.suggest_freq((&#39;中&#39;, &#39;将&#39;), True)</span><br><span class="line">494</span><br><span class="line">&gt;&gt;&gt; print(&#39;&#x2F;&#39;.join(jieba.cut(&#39;如果放到post中将出错。&#39;, HMM&#x3D;False)))</span><br><span class="line">如果&#x2F;放到&#x2F;post&#x2F;中&#x2F;将&#x2F;出错&#x2F;。</span><br><span class="line">&gt;&gt;&gt; print(&#39;&#x2F;&#39;.join(jieba.cut(&#39;「台中」正确应该不会被切开&#39;, HMM&#x3D;False)))</span><br><span class="line">「&#x2F;台&#x2F;中&#x2F;」&#x2F;正确&#x2F;应该&#x2F;不会&#x2F;被&#x2F;切开</span><br><span class="line">&gt;&gt;&gt; jieba.suggest_freq(&#39;台中&#39;, True)</span><br><span class="line">69</span><br><span class="line">&gt;&gt;&gt; print(&#39;&#x2F;&#39;.join(jieba.cut(&#39;「台中」正确应该不会被切开&#39;, HMM&#x3D;False)))</span><br><span class="line">「&#x2F;台中&#x2F;」&#x2F;正确&#x2F;应该&#x2F;不会&#x2F;被&#x2F;切开</span><br></pre></td></tr></table></figure><ul><li>“通过用户自定义词典来增强歧义纠错能力” — <a href="https://github.com/fxsjy/jieba/issues/14" target="_blank" rel="noopener">https://github.com/fxsjy/jieba/issues/14</a></li></ul><ol start="3"><li>关键词提取</li></ol><hr><h3 id="基于-TF-IDF-算法的关键词抽取"><a href="#基于-TF-IDF-算法的关键词抽取" class="headerlink" title="基于 TF-IDF 算法的关键词抽取"></a>基于 TF-IDF 算法的关键词抽取</h3><p><code>import jieba.analyse</code></p><ul><li>jieba.analyse.extract_tags(sentence, topK=20, withWeight=False, allowPOS=())<ul><li>sentence 为待提取的文本</li><li>topK 为返回几个 TF/IDF 权重最大的关键词，默认值为 20</li><li>withWeight 为是否一并返回关键词权重值，默认值为 False</li><li>allowPOS 仅包括指定词性的词，默认值为空，即不筛选</li></ul></li><li>jieba.analyse.TFIDF(idf_path=None) 新建 TFIDF 实例，idf_path 为 IDF 频率文件</li></ul><p>代码示例 （关键词提取）</p><p><a href="https://github.com/fxsjy/jieba/blob/master/test/extract_tags.py" target="_blank" rel="noopener">https://github.com/fxsjy/jieba/blob/master/test/extract_tags.py</a></p><p>关键词提取所使用逆向文件频率（IDF）文本语料库可以切换成自定义语料库的路径</p><ul><li>用法： jieba.analyse.set_idf_path(file_name) # file_name为自定义语料库的路径</li><li>自定义语料库示例：<a href="https://github.com/fxsjy/jieba/blob/master/extra_dict/idf.txt.big" target="_blank" rel="noopener">https://github.com/fxsjy/jieba/blob/master/extra_dict/idf.txt.big</a></li><li>用法示例：<a href="https://github.com/fxsjy/jieba/blob/master/test/extract_tags_idfpath.py" target="_blank" rel="noopener">https://github.com/fxsjy/jieba/blob/master/test/extract_tags_idfpath.py</a></li></ul><p>关键词提取所使用停止词（Stop Words）文本语料库可以切换成自定义语料库的路径</p><ul><li>用法： jieba.analyse.set_stop_words(file_name) # file_name为自定义语料库的路径</li><li>自定义语料库示例：<a href="https://github.com/fxsjy/jieba/blob/master/extra_dict/stop_words.txt" target="_blank" rel="noopener">https://github.com/fxsjy/jieba/blob/master/extra_dict/stop_words.txt</a></li><li>用法示例：<a href="https://github.com/fxsjy/jieba/blob/master/test/extract_tags_stop_words.py" target="_blank" rel="noopener">https://github.com/fxsjy/jieba/blob/master/test/extract_tags_stop_words.py</a></li></ul><p>关键词一并返回关键词权重值示例</p><ul><li>用法示例：<a href="https://github.com/fxsjy/jieba/blob/master/test/extract_tags_with_weight.py" target="_blank" rel="noopener">https://github.com/fxsjy/jieba/blob/master/test/extract_tags_with_weight.py</a></li></ul><h3 id="基于-TextRank-算法的关键词抽取"><a href="#基于-TextRank-算法的关键词抽取" class="headerlink" title="基于 TextRank 算法的关键词抽取"></a>基于 TextRank 算法的关键词抽取</h3><ul><li>jieba.analyse.textrank(sentence, topK=20, withWeight=False, allowPOS=(‘ns’, ‘n’, ‘vn’, ‘v’)) 直接使用，接口相同，注意默认过滤词性。</li><li>jieba.analyse.TextRank() 新建自定义 TextRank 实例</li></ul><p>算法论文： <a href="http://web.eecs.umich.edu/~mihalcea/papers/mihalcea.emnlp04.pdf" target="_blank" rel="noopener">TextRank: Bringing Order into Texts</a></p><h4 id="基本思想"><a href="#基本思想" class="headerlink" title="基本思想:"></a>基本思想:</h4><ol><li>将待抽取关键词的文本进行分词</li><li>以固定窗口大小(默认为5，通过span属性调整)，词之间的共现关系，构建图</li><li>计算图中节点的PageRank，注意是无向带权图</li></ol><h4 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例:"></a>使用示例:</h4><p>见 <a href="https://github.com/fxsjy/jieba/blob/master/test/demo.py" target="_blank" rel="noopener">test/demo.py</a></p><ol start="4"><li>词性标注</li></ol><hr><ul><li><code>jieba.posseg.POSTokenizer(tokenizer=None)</code> 新建自定义分词器，<code>tokenizer</code> 参数可指定内部使用的 <code>jieba.Tokenizer</code> 分词器。<code>jieba.posseg.dt</code> 为默认词性标注分词器。</li><li>标注句子分词后每个词的词性，采用和 ictclas 兼容的标记法。</li><li>用法示例</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; import jieba.posseg as pseg</span><br><span class="line">&gt;&gt;&gt; words &#x3D; pseg.cut(&quot;我爱北京天安门&quot;)</span><br><span class="line">&gt;&gt;&gt; for word, flag in words:</span><br><span class="line">...    print(&#39;%s %s&#39; % (word, flag))</span><br><span class="line">...</span><br><span class="line">我 r</span><br><span class="line">爱 v</span><br><span class="line">北京 ns</span><br><span class="line">天安门 ns</span><br></pre></td></tr></table></figure><ol start="5"><li>并行分词</li></ol><hr><ul><li><p>原理：将目标文本按行分隔后，把各行文本分配到多个 Python 进程并行分词，然后归并结果，从而获得分词速度的可观提升</p></li><li><p>基于 python 自带的 multiprocessing 模块，目前暂不支持 Windows</p></li><li><p>用法：</p><ul><li><code>jieba.enable_parallel(4)</code> # 开启并行分词模式，参数为并行进程数</li><li><code>jieba.disable_parallel()</code> # 关闭并行分词模式</li></ul></li><li><p>例子：<a href="https://github.com/fxsjy/jieba/blob/master/test/parallel/test_file.py" target="_blank" rel="noopener">https://github.com/fxsjy/jieba/blob/master/test/parallel/test_file.py</a></p></li><li><p>实验结果：在 4 核 3.4GHz Linux 机器上，对金庸全集进行精确分词，获得了 1MB/s 的速度，是单进程版的 3.3 倍。</p></li><li><p><strong>注意</strong>：并行分词仅支持默认分词器 <code>jieba.dt</code> 和 <code>jieba.posseg.dt</code>。</p></li></ul><ol start="6"><li>Tokenize：返回词语在原文的起止位置</li></ol><hr><ul><li>注意，输入参数只接受 unicode</li><li>默认模式</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">result = jieba.tokenize(<span class="string">u'永和服装饰品有限公司'</span>)</span><br><span class="line"><span class="keyword">for</span> tk <span class="keyword">in</span> result:</span><br><span class="line">    print(<span class="string">"word %s\t\t start: %d \t\t end:%d"</span> % (tk[<span class="number">0</span>],tk[<span class="number">1</span>],tk[<span class="number">2</span>]))</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">word 永和                start: 0                end:2</span><br><span class="line">word 服装                start: 2                end:4</span><br><span class="line">word 饰品                start: 4                end:6</span><br><span class="line">word 有限公司            start: 6                end:10</span><br></pre></td></tr></table></figure><ul><li>搜索模式</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">result = jieba.tokenize(<span class="string">u'永和服装饰品有限公司'</span>, mode=<span class="string">'search'</span>)</span><br><span class="line"><span class="keyword">for</span> tk <span class="keyword">in</span> result:</span><br><span class="line">    print(<span class="string">"word %s\t\t start: %d \t\t end:%d"</span> % (tk[<span class="number">0</span>],tk[<span class="number">1</span>],tk[<span class="number">2</span>]))</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">word 永和                start: 0                end:2</span><br><span class="line">word 服装                start: 2                end:4</span><br><span class="line">word 饰品                start: 4                end:6</span><br><span class="line">word 有限                start: 6                end:8</span><br><span class="line">word 公司                start: 8                end:10</span><br><span class="line">word 有限公司            start: 6                end:10</span><br></pre></td></tr></table></figure><ol start="7"><li>ChineseAnalyzer for Whoosh 搜索引擎</li></ol><hr><ul><li>引用： <code>from jieba.analyse import ChineseAnalyzer</code></li><li>用法示例：<a href="https://github.com/fxsjy/jieba/blob/master/test/test_whoosh.py" target="_blank" rel="noopener">https://github.com/fxsjy/jieba/blob/master/test/test_whoosh.py</a></li></ul><ol start="8"><li>命令行分词</li></ol><hr><p>使用示例：<code>python -m jieba news.txt &gt; cut_result.txt</code></p><p>命令行选项（翻译）：</p><pre><code>使用: python -m jieba [options] filename结巴命令行界面。固定参数:  filename              输入文件可选参数:  -h, --help            显示此帮助信息并退出  -d [DELIM], --delimiter [DELIM]                        使用 DELIM 分隔词语，而不是用默认的&apos; / &apos;。                        若不指定 DELIM，则使用一个空格分隔。  -p [DELIM], --pos [DELIM]                        启用词性标注；如果指定 DELIM，词语和词性之间                        用它分隔，否则用 _ 分隔  -D DICT, --dict DICT  使用 DICT 代替默认词典  -u USER_DICT, --user-dict USER_DICT                        使用 USER_DICT 作为附加词典，与默认词典或自定义词典配合使用  -a, --cut-all         全模式分词（不支持词性标注）  -n, --no-hmm          不使用隐含马尔可夫模型  -q, --quiet           不输出载入信息到 STDERR  -V, --version         显示版本信息并退出如果没有指定文件名，则使用标准输入。</code></pre><p><code>--help</code> 选项输出：</p><pre><code>$&gt; python -m jieba --helpJieba command line interface.positional arguments:  filename              input fileoptional arguments:  -h, --help            show this help message and exit  -d [DELIM], --delimiter [DELIM]                        use DELIM instead of &apos; / &apos; for word delimiter; or a                        space if it is used without DELIM  -p [DELIM], --pos [DELIM]                        enable POS tagging; if DELIM is specified, use DELIM                        instead of &apos;_&apos; for POS delimiter  -D DICT, --dict DICT  use DICT as dictionary  -u USER_DICT, --user-dict USER_DICT                        use USER_DICT together with the default dictionary or                        DICT (if specified)  -a, --cut-all         full pattern cutting (ignored with POS tagging)  -n, --no-hmm          don&apos;t use the Hidden Markov Model  -q, --quiet           don&apos;t print loading messages to stderr  -V, --version         show program&apos;s version number and exitIf no filename specified, use STDIN instead.</code></pre><h2 id="延迟加载机制"><a href="#延迟加载机制" class="headerlink" title="延迟加载机制"></a>延迟加载机制</h2><p>jieba 采用延迟加载，<code>import jieba</code> 和 <code>jieba.Tokenizer()</code> 不会立即触发词典的加载，一旦有必要才开始加载词典构建前缀字典。如果你想手工初始 jieba，也可以手动初始化。</p><pre><code>import jiebajieba.initialize()  # 手动初始化（可选）</code></pre><p>在 0.28 之前的版本是不能指定主词典的路径的，有了延迟加载机制后，你可以改变主词典的路径:</p><pre><code>jieba.set_dictionary(&apos;data/dict.txt.big&apos;)</code></pre><p>例子： <a href="https://github.com/fxsjy/jieba/blob/master/test/test_change_dictpath.py" target="_blank" rel="noopener">https://github.com/fxsjy/jieba/blob/master/test/test_change_dictpath.py</a></p><h1 id="其他词典"><a href="#其他词典" class="headerlink" title="其他词典"></a>其他词典</h1><ol><li><p>占用内存较小的词典文件<br><a href="https://github.com/fxsjy/jieba/raw/master/extra_dict/dict.txt.small" target="_blank" rel="noopener">https://github.com/fxsjy/jieba/raw/master/extra_dict/dict.txt.small</a></p></li><li><p>支持繁体分词更好的词典文件<br><a href="https://github.com/fxsjy/jieba/raw/master/extra_dict/dict.txt.big" target="_blank" rel="noopener">https://github.com/fxsjy/jieba/raw/master/extra_dict/dict.txt.big</a></p></li></ol><p>下载你所需要的词典，然后覆盖 jieba/dict.txt 即可；或者用 <code>jieba.set_dictionary(&#39;data/dict.txt.big&#39;)</code></p><h1 id="其他语言实现"><a href="#其他语言实现" class="headerlink" title="其他语言实现"></a>其他语言实现</h1><h2 id="结巴分词-Java-版本"><a href="#结巴分词-Java-版本" class="headerlink" title="结巴分词 Java 版本"></a>结巴分词 Java 版本</h2><p>作者：piaolingxue<br>地址：<a href="https://github.com/huaban/jieba-analysis" target="_blank" rel="noopener">https://github.com/huaban/jieba-analysis</a></p><h2 id="结巴分词-C-版本"><a href="#结巴分词-C-版本" class="headerlink" title="结巴分词 C++ 版本"></a>结巴分词 C++ 版本</h2><p>作者：yanyiwu<br>地址：<a href="https://github.com/yanyiwu/cppjieba" target="_blank" rel="noopener">https://github.com/yanyiwu/cppjieba</a></p><h2 id="结巴分词-Rust-版本"><a href="#结巴分词-Rust-版本" class="headerlink" title="结巴分词 Rust 版本"></a>结巴分词 Rust 版本</h2><p>作者：messense, MnO2<br>地址：<a href="https://github.com/messense/jieba-rs" target="_blank" rel="noopener">https://github.com/messense/jieba-rs</a></p><h2 id="结巴分词-Node-js-版本"><a href="#结巴分词-Node-js-版本" class="headerlink" title="结巴分词 Node.js 版本"></a>结巴分词 Node.js 版本</h2><p>作者：yanyiwu<br>地址：<a href="https://github.com/yanyiwu/nodejieba" target="_blank" rel="noopener">https://github.com/yanyiwu/nodejieba</a></p><h2 id="结巴分词-Erlang-版本"><a href="#结巴分词-Erlang-版本" class="headerlink" title="结巴分词 Erlang 版本"></a>结巴分词 Erlang 版本</h2><p>作者：falood<br>地址：<a href="https://github.com/falood/exjieba" target="_blank" rel="noopener">https://github.com/falood/exjieba</a></p><h2 id="结巴分词-R-版本"><a href="#结巴分词-R-版本" class="headerlink" title="结巴分词 R 版本"></a>结巴分词 R 版本</h2><p>作者：qinwf<br>地址：<a href="https://github.com/qinwf/jiebaR" target="_blank" rel="noopener">https://github.com/qinwf/jiebaR</a></p><h2 id="结巴分词-iOS-版本"><a href="#结巴分词-iOS-版本" class="headerlink" title="结巴分词 iOS 版本"></a>结巴分词 iOS 版本</h2><p>作者：yanyiwu<br>地址：<a href="https://github.com/yanyiwu/iosjieba" target="_blank" rel="noopener">https://github.com/yanyiwu/iosjieba</a></p><h2 id="结巴分词-PHP-版本"><a href="#结巴分词-PHP-版本" class="headerlink" title="结巴分词 PHP 版本"></a>结巴分词 PHP 版本</h2><p>作者：fukuball<br>地址：<a href="https://github.com/fukuball/jieba-php" target="_blank" rel="noopener">https://github.com/fukuball/jieba-php</a></p><h2 id="结巴分词-NET-C-版本"><a href="#结巴分词-NET-C-版本" class="headerlink" title="结巴分词 .NET(C#) 版本"></a>结巴分词 .NET(C#) 版本</h2><p>作者：anderscui<br>地址：<a href="https://github.com/anderscui/jieba.NET/" target="_blank" rel="noopener">https://github.com/anderscui/jieba.NET/</a></p><h2 id="结巴分词-Go-版本"><a href="#结巴分词-Go-版本" class="headerlink" title="结巴分词 Go 版本"></a>结巴分词 Go 版本</h2><ul><li>作者: wangbin 地址: <a href="https://github.com/wangbin/jiebago" target="_blank" rel="noopener">https://github.com/wangbin/jiebago</a></li><li>作者: yanyiwu 地址: <a href="https://github.com/yanyiwu/gojieba" target="_blank" rel="noopener">https://github.com/yanyiwu/gojieba</a></li></ul><h2 id="结巴分词Android版本"><a href="#结巴分词Android版本" class="headerlink" title="结巴分词Android版本"></a>结巴分词Android版本</h2><ul><li>作者   Dongliang.W  地址：<a href="https://github.com/452896915/jieba-android" target="_blank" rel="noopener">https://github.com/452896915/jieba-android</a></li></ul><h1 id="系统集成"><a href="#系统集成" class="headerlink" title="系统集成"></a>系统集成</h1><ol><li>Solr: <a href="https://github.com/sing1ee/jieba-solr" target="_blank" rel="noopener">https://github.com/sing1ee/jieba-solr</a></li></ol><h1 id="分词速度"><a href="#分词速度" class="headerlink" title="分词速度"></a>分词速度</h1><ul><li>1.5 MB / Second in Full Mode</li><li>400 KB / Second in Default Mode</li><li>测试环境: Intel(R) Core(TM) i7-2600 CPU @ 3.4GHz；《围城》.txt</li></ul><h1 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h1><h2 id="1-模型的数据是如何生成的？"><a href="#1-模型的数据是如何生成的？" class="headerlink" title="1. 模型的数据是如何生成的？"></a>1. 模型的数据是如何生成的？</h2><p>详见： <a href="https://github.com/fxsjy/jieba/issues/7" target="_blank" rel="noopener">https://github.com/fxsjy/jieba/issues/7</a></p><h2 id="2-“台中”总是被切成“台-中”？（以及类似情况）"><a href="#2-“台中”总是被切成“台-中”？（以及类似情况）" class="headerlink" title="2. “台中”总是被切成“台 中”？（以及类似情况）"></a>2. “台中”总是被切成“台 中”？（以及类似情况）</h2><p>P(台中) ＜ P(台)×P(中)，“台中”词频不够导致其成词概率较低</p><p>解决方法：强制调高词频</p><p><code>jieba.add_word(&#39;台中&#39;)</code> 或者 <code>jieba.suggest_freq(&#39;台中&#39;, True)</code></p><h2 id="3-“今天天气-不错”应该被切成“今天-天气-不错”？（以及类似情况）"><a href="#3-“今天天气-不错”应该被切成“今天-天气-不错”？（以及类似情况）" class="headerlink" title="3. “今天天气 不错”应该被切成“今天 天气 不错”？（以及类似情况）"></a>3. “今天天气 不错”应该被切成“今天 天气 不错”？（以及类似情况）</h2><p>解决方法：强制调低词频</p><p><code>jieba.suggest_freq((&#39;今天&#39;, &#39;天气&#39;), True)</code></p><p>或者直接删除该词 <code>jieba.del_word(&#39;今天天气&#39;)</code></p><h2 id="4-切出了词典中没有的词语，效果不理想？"><a href="#4-切出了词典中没有的词语，效果不理想？" class="headerlink" title="4. 切出了词典中没有的词语，效果不理想？"></a>4. 切出了词典中没有的词语，效果不理想？</h2><p>解决方法：关闭新词发现</p><p><code>jieba.cut(&#39;丰田太省了&#39;, HMM=False)</code><br><code>jieba.cut(&#39;我们中出了一个叛徒&#39;, HMM=False)</code></p><p><strong>更多问题请点击</strong>：<a href="https://github.com/fxsjy/jieba/issues?sort=updated&amp;state=closed" target="_blank" rel="noopener">https://github.com/fxsjy/jieba/issues?sort=updated&amp;state=closed</a></p><h1 id="修订历史"><a href="#修订历史" class="headerlink" title="修订历史"></a>修订历史</h1><p><a href="https://github.com/fxsjy/jieba/blob/master/Changelog" target="_blank" rel="noopener">https://github.com/fxsjy/jieba/blob/master/Changelog</a></p>]]></content>
      
      
      <categories>
          
          <category> 转载 </category>
          
          <category> Python </category>
          
          <category> Jieba </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jieba分词 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>spring validation校验对象多个字段返回的消息内容顺序随机问题</title>
      <link href="/posts/3aad92e6.html"/>
      <url>/posts/3aad92e6.html</url>
      
        <content type="html"><![CDATA[<h1 id="问题描述："><a href="#问题描述：" class="headerlink" title="问题描述："></a>问题描述：</h1><p>model中的代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@NotNull</span>(message = <span class="string">"id不能为空"</span>, groups = UserGroup.UPDATE<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">  <span class="title">protected</span> <span class="title">Integer</span> <span class="title">id</span></span>;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 姓名</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="meta">@NotBlank</span>(message = <span class="string">"请输入姓名"</span>, groups = UserGroup.ADD<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">  <span class="title">private</span> <span class="title">String</span> <span class="title">name</span></span>;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 性别</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="meta">@NotBlank</span>(message = <span class="string">"请输入性别"</span>, groups = UserGroup.ADD<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">  <span class="title">private</span> <span class="title">String</span> <span class="title">sex</span></span>;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 手机号</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="meta">@NotBlank</span>(message = <span class="string">"请输入手机号"</span>, groups = UserGroup.ADD<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">  <span class="title">private</span> <span class="title">String</span> <span class="title">phone</span></span>;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 邮箱</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="meta">@NotBlank</span>(message = <span class="string">"请输入邮箱"</span>, groups = UserGroup.ADD<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">  <span class="title">private</span> <span class="title">String</span> <span class="title">email</span></span>;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 公司名</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="meta">@NotBlank</span>(message = <span class="string">"请输入公司名"</span>, groups = UserGroup.ADD<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">  <span class="title">private</span> <span class="title">String</span> <span class="title">companyName</span></span>;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 职务</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="meta">@NotBlank</span>(message = <span class="string">"请输入职务"</span>, groups = UserGroup.ADD<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">  <span class="title">private</span> <span class="title">String</span> <span class="title">position</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义的分组接口如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserGroup</span> </span>&#123;</span><br><span class="line">  <span class="class"><span class="keyword">interface</span> <span class="title">ADD</span> </span>&#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="class"><span class="keyword">interface</span> <span class="title">UPDATE</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在使用<code>Spring</code>的<code>@Validated</code>注解对<code>对象</code>中的多个参数进行校验时，在<code>MethodArgumentNotValidException</code>异常拦截器处发现如果有多个条件不符和校验规则的参数，<code>MethodArgumentNotValidException</code>中的<code>bindingResult.getAllErrors()</code>异常消息集合中的数据是按照随机顺序返回的，按照正常逻辑来说，我们肯定是想要按顺序将第一个不符合规范字段错误信息返回给用户。</p><h1 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h1><p>经过一番搜索发现可以给类上每个验证的注解都指定不同的<code>group</code>，然后在创建一个<code>interface</code>接口添加<code>@GroupSequence</code>对加在字段上的那些接口进行汇总，如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserGroup</span> </span>&#123;</span><br><span class="line">  <span class="meta">@GroupSequence</span>(&#123;ADD.NAME<span class="class">.<span class="keyword">class</span>,</span></span><br><span class="line"><span class="class">                  <span class="title">ADD</span>.<span class="title">SEX</span>.<span class="title">class</span>,</span></span><br><span class="line"><span class="class">                  <span class="title">ADD</span>.<span class="title">PHONE</span>.<span class="title">class</span>,</span></span><br><span class="line"><span class="class">                  <span class="title">ADD</span>.<span class="title">EMAIL</span>.<span class="title">class</span>,</span></span><br><span class="line"><span class="class">                  <span class="title">ADD</span>.<span class="title">COMPANY_NAME</span>.<span class="title">class</span>,</span></span><br><span class="line"><span class="class">                  <span class="title">ADD</span>.<span class="title">POSITION</span>.<span class="title">class</span>&#125;)</span></span><br><span class="line"><span class="class">  <span class="title">interface</span> <span class="title">ADD</span> </span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">interface</span> <span class="title">NAME</span> </span>&#123;&#125;</span><br><span class="line">    <span class="class"><span class="keyword">interface</span> <span class="title">SEX</span> </span>&#123;&#125;</span><br><span class="line">    <span class="class"><span class="keyword">interface</span> <span class="title">PHONE</span> </span>&#123;&#125;</span><br><span class="line">    <span class="class"><span class="keyword">interface</span> <span class="title">EMAIL</span> </span>&#123;&#125;</span><br><span class="line">    <span class="class"><span class="keyword">interface</span> <span class="title">COMPANY_NAME</span> </span>&#123;&#125;</span><br><span class="line">    <span class="class"><span class="keyword">interface</span> <span class="title">POSITION</span> </span>&#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="class"><span class="keyword">interface</span> <span class="title">UPDATE</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Model</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@NotNull</span>(message = <span class="string">"id不能为空"</span>, groups = UserGroup.UPDATE<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">  <span class="title">protected</span> <span class="title">Integer</span> <span class="title">id</span></span>;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 姓名</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="meta">@NotBlank</span>(message = <span class="string">"请输入姓名"</span>, groups = UserGroup.ADD.NAME<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">  <span class="title">private</span> <span class="title">String</span> <span class="title">name</span></span>;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 性别 1.男 2.女 3.未知</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="meta">@NotBlank</span>(message = <span class="string">"请输入性别"</span>, groups = UserGroup.ADD.SEX<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">  <span class="title">private</span> <span class="title">String</span> <span class="title">sex</span></span>;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 手机号</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="meta">@NotBlank</span>(message = <span class="string">"请输入手机号"</span>, groups = UserGroup.ADD.PHONE<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">  <span class="title">private</span> <span class="title">String</span> <span class="title">phone</span></span>;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 邮箱</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="meta">@NotBlank</span>(message = <span class="string">"请输入邮箱"</span>, groups = UserGroup.ADD.EMAIL<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">  <span class="title">private</span> <span class="title">String</span> <span class="title">email</span></span>;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 公司名</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="meta">@NotBlank</span>(message = <span class="string">"请输入公司名"</span>, groups = UserGroup.ADD.COMPANY_NAME<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">  <span class="title">private</span> <span class="title">String</span> <span class="title">companyName</span></span>;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 职务</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="meta">@NotBlank</span>(message = <span class="string">"请输入职务"</span>, groups = UserGroup.ADD.POSITION<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">  <span class="title">private</span> <span class="title">String</span> <span class="title">position</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>@GroupSequence</code>注解中指定设置的接口数组顺序，然后在参数进行校验的时候直接在<code>@Validated</code>注解中放入<code>UserGroup.ADD.class</code>这个接口类即可<code>public Result add(@Validated(UserGroup.ADD.class) @RequestBody User user)</code>，<code>validation</code>就会按照顺序返回错误信息，在异常拦截器中直接这样取出第一个错误信息即可<code>MethodArgumentNotValidException.getBindingResult().getAllErrors().get(0).getDefaultMessage()</code></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> Spring </category>
          
          <category> BUG </category>
          
          <category> Validation </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 参数校验 </tag>
            
            <tag> 优化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[python爬虫]CrawlSpider爬虫入门学习</title>
      <link href="/posts/89d31750.html"/>
      <url>/posts/89d31750.html</url>
      
        <content type="html"><![CDATA[<h2 id="创建CrawlSpider爬虫"><a href="#创建CrawlSpider爬虫" class="headerlink" title="创建CrawlSpider爬虫"></a>创建CrawlSpider爬虫</h2><p><a href="/2019/07/11/2019-07-11-python爬虫-Scrapy入门使用教程/">上篇博客</a>中，写的创建爬虫的方式是通过 <code>scrapy genspider [爬虫名字] [域名]</code> 创建的。如果想要创建 <code>CrawlSpider</code> 爬虫，应该通过如下命令进行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scrapy genspider -t crawl [爬虫名字] [域名]</span><br></pre></td></tr></table></figure><ul><li><code>-t</code>: 是选择模板生成代码，因为是要编写 <code>CrawlSpider</code> 爬虫所以选择 <code>crawl</code> 模板</li></ul><p>输入 <code>scrapy genspider -t crawl qsbk_two www.qiushibaike.com</code> 后生成的python代码如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"><span class="keyword">from</span> scrapy.linkextractors <span class="keyword">import</span> LinkExtractor</span><br><span class="line"><span class="keyword">from</span> scrapy.spiders <span class="keyword">import</span> CrawlSpider, Rule</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QsbkTwoSpider</span><span class="params">(CrawlSpider)</span>:</span></span><br><span class="line">    name = <span class="string">'qsbk_two'</span></span><br><span class="line">    allowed_domains = [<span class="string">'www.qiushibaike.com'</span>]</span><br><span class="line">    start_urls = [<span class="string">'http://www.qiushibaike.com/'</span>]</span><br><span class="line"></span><br><span class="line">    rules = (</span><br><span class="line">        Rule(LinkExtractor(allow=<span class="string">r'Items/'</span>), callback=<span class="string">'parse_item'</span>, follow=<span class="literal">True</span>),</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse_item</span><span class="params">(self, response)</span>:</span></span><br><span class="line">        i = &#123;&#125;</span><br><span class="line">        <span class="comment">#i['domain_id'] = response.xpath('//input[@id="sid"]/@value').extract()</span></span><br><span class="line">        <span class="comment">#i['name'] = response.xpath('//div[@id="name"]').extract()</span></span><br><span class="line">        <span class="comment">#i['description'] = response.xpath('//div[@id="description"]').extract()</span></span><br><span class="line">        <span class="keyword">return</span> i</span><br></pre></td></tr></table></figure><p>查看代码可以发现除了编写爬虫需要继承的 <code>CrawlSpider</code> 类外，还多了两个新的依赖 <code>LinkExtractor</code> 和 <code>Rule</code></p><h3 id="LinkExtractor链接提取器"><a href="#LinkExtractor链接提取器" class="headerlink" title="LinkExtractor链接提取器"></a>LinkExtractor链接提取器</h3><p>使用<code>LinkExtractors</code>可以不用自己提取想要的url，然后发送请求。这些工作都可以交给<code>LinkExtractors</code>，他会在所有爬的页面中找到满足规则的url，实现自动的爬取。以下对<code>LinkExtractors</code>类做一个简单的介绍：</p><p><code>LinkExtractors</code> 类的构造方法如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, </span></span></span><br><span class="line"><span class="function"><span class="params">                allow=<span class="params">()</span>, </span></span></span><br><span class="line"><span class="function"><span class="params">                deny=<span class="params">()</span>, </span></span></span><br><span class="line"><span class="function"><span class="params">                allow_domains=<span class="params">()</span>, </span></span></span><br><span class="line"><span class="function"><span class="params">                deny_domains=<span class="params">()</span>, </span></span></span><br><span class="line"><span class="function"><span class="params">                restrict_xpaths=<span class="params">()</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">                tags=<span class="params">(<span class="string">'a'</span>, <span class="string">'area'</span>)</span>, </span></span></span><br><span class="line"><span class="function"><span class="params">                attrs=<span class="params">(<span class="string">'href'</span>,)</span>, </span></span></span><br><span class="line"><span class="function"><span class="params">                canonicalize=False,</span></span></span><br><span class="line"><span class="function"><span class="params">                unique=True, </span></span></span><br><span class="line"><span class="function"><span class="params">                process_value=None, </span></span></span><br><span class="line"><span class="function"><span class="params">                deny_extensions=None, </span></span></span><br><span class="line"><span class="function"><span class="params">                restrict_css=<span class="params">()</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">                strip=True)</span>:</span></span><br><span class="line">                <span class="comment"># 代码省略</span></span><br><span class="line">                <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>主要参数讲解</p><table><thead><tr><th align="center">参数名</th><th align="left">说明</th></tr></thead><tbody><tr><td align="center">allow</td><td align="left">允许的url。所有满足这个正则表达式的url都会被提取</td></tr><tr><td align="center">deny</td><td align="left">禁止的url。所有满足这个正则表达式的url都不会被提取</td></tr><tr><td align="center">allow_domains</td><td align="left">允许的域名。只有在这个里面指定的域名的url才会被提取</td></tr><tr><td align="center">deny_domains</td><td align="left">禁止的域名。所有在这个里面指定的域名的url都不会被提取</td></tr><tr><td align="center">restrict_xpaths</td><td align="left">严格的xpath。和allow共同过滤链接</td></tr></tbody></table><h3 id="Rule规则类"><a href="#Rule规则类" class="headerlink" title="Rule规则类"></a>Rule规则类</h3><p>定义爬虫的规则类。以下对这个类做一个简单的介绍：</p><p>构造函数如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, </span></span></span><br><span class="line"><span class="function"><span class="params">                link_extractor, </span></span></span><br><span class="line"><span class="function"><span class="params">                callback=None, </span></span></span><br><span class="line"><span class="function"><span class="params">                cb_kwargs=None, </span></span></span><br><span class="line"><span class="function"><span class="params">                follow=None, </span></span></span><br><span class="line"><span class="function"><span class="params">                process_links=None, </span></span></span><br><span class="line"><span class="function"><span class="params">                process_request=identity)</span>:</span></span><br><span class="line">    <span class="comment"># 代码省略</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>主要参数讲解</p><table><thead><tr><th align="center">参数名</th><th align="left">说明</th></tr></thead><tbody><tr><td align="center">link_extractor</td><td align="left">一个LinkExtractor对象，用于定义爬取规则</td></tr><tr><td align="center">callback</td><td align="left">满足这个规则的url，应该要执行哪个回调函数。因为CrawlSpider使用了parse作为回调函数，因此不要覆盖parse作为回调函数自己的回调函数</td></tr><tr><td align="center">follow</td><td align="left">指定根据该规则从response中提取的链接是否需要跟进</td></tr><tr><td align="center">process_links</td><td align="left">从link_extractor中获取到链接后会传递给这个函数，用来过滤不需要爬取的链接</td></tr></tbody></table><h2 id="糗事百科CrawlSpider案例"><a href="#糗事百科CrawlSpider案例" class="headerlink" title="糗事百科CrawlSpider案例"></a>糗事百科CrawlSpider案例</h2><p>依照上篇博客的代码在<code>spiders</code>包中新添加一个 <code>CrawlSpider</code> 爬虫类<br>代码如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"><span class="keyword">from</span> scrapy.linkextractors <span class="keyword">import</span> LinkExtractor</span><br><span class="line"><span class="keyword">from</span> scrapy.spiders <span class="keyword">import</span> CrawlSpider, Rule</span><br><span class="line"><span class="keyword">from</span> qsbk.items <span class="keyword">import</span> QsbkItem</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QsbkTwoSpider</span><span class="params">(CrawlSpider)</span>:</span></span><br><span class="line">    name = <span class="string">'qsbk_two'</span></span><br><span class="line">    allowed_domains = [<span class="string">'www.qiushibaike.com'</span>]</span><br><span class="line">    start_urls = [<span class="string">'https://www.qiushibaike.com/text/'</span>]</span><br><span class="line"></span><br><span class="line">    link_extractor = LinkExtractor(allow=<span class="string">'/text/page/\d+/'</span>)</span><br><span class="line">    rules = (</span><br><span class="line">        Rule(link_extractor=link_extractor, callback=<span class="string">'parse_item'</span>, follow=<span class="literal">True</span>),</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse_item</span><span class="params">(self, response)</span>:</span></span><br><span class="line">        outerbox = response.xpath(<span class="string">"//div[@id='content-left']/div"</span>)</span><br><span class="line">        items = []</span><br><span class="line">        <span class="keyword">for</span> box <span class="keyword">in</span> outerbox:</span><br><span class="line">            detail_url = str(box.xpath(<span class="string">"a[1]/@href"</span>).get()).strip()</span><br><span class="line">            author = str(box.xpath(<span class="string">"div[@class='author clearfix']/a/h2/text()"</span>).get()).strip()</span><br><span class="line">            content = str(box.xpath(<span class="string">"a/div[@class='content']/span/text()"</span>).get()).strip()</span><br><span class="line"></span><br><span class="line">            item = QsbkItem()</span><br><span class="line">            item[<span class="string">'detail_url'</span>] = detail_url</span><br><span class="line">            item[<span class="string">'author'</span>] = author</span><br><span class="line">            item[<span class="string">'content'</span>] = content</span><br><span class="line"></span><br><span class="line">            cmt_box = box.xpath(<span class="string">"a[@class='indexGodCmt']"</span>)</span><br><span class="line">            <span class="keyword">if</span> len(cmt_box) &gt; <span class="number">0</span>:</span><br><span class="line">                cmt_name = str(cmt_box[<span class="number">0</span>].xpath(<span class="string">"div/span[@class='cmt-name']/text()"</span>).get()).strip()[<span class="number">0</span>:<span class="number">-1</span>]</span><br><span class="line">                item[<span class="string">'cmt_name'</span>] = cmt_name</span><br><span class="line">                cmt_content = str(cmt_box[<span class="number">0</span>].xpath(<span class="string">"div/div/text()"</span>).get()).strip()</span><br><span class="line">                item[<span class="string">'cmt_content'</span>] = cmt_content</span><br><span class="line">            items.append(item)</span><br><span class="line">        <span class="keyword">return</span> items</span><br></pre></td></tr></table></figure><p><code>parse_item</code>方法中的代码和之前的爬虫代码相差不大，只是多了爬取审评字段，这里直接看代码不在过多描述，主要说下 <code>link_extractor</code> 和 <code>rules</code></p><ul><li><p><code>link_extractor</code>: 经检查发现每页的链接是<code>/text/page/[数字]/</code>这种形式，所以我们可以通过编写一个简单的正则对链接进行过滤 <code>/text/page/\d+/</code>。链接如果前边没域名<code>CrawlSpider</code>会自动将当前网站的域名拼接上去。</p></li><li><p><code>rules</code>: <code>link_extractor</code>参数传入了上边创建好的<code>LinkExtractor</code>对象，<code>callback</code> 参数指定了创建的 <code>parse_item</code> 为回调方法，<code>follow</code> 参数设置为 <code>True</code> 指定如果提取到链接则请求新的链接继续执行</p></li></ul><p>然后修改 <code>start.py</code> 中的启动命令为 <code>scrapy crawl qsbk_two</code> 来启动新创建的这个爬虫，然后可以看到<code>CrawlSpider</code>会自动爬取每页的数据，以爬取过的链接会自动过滤不会进行重复请求</p><h2 id="demo地址"><a href="#demo地址" class="headerlink" title="demo地址"></a>demo地址</h2><blockquote><p><a href="https://gitee.com/fengzxia/python_crawler_learning/blob/master/scrapy/qiushibaike/qsbk/spiders/qsbk_two.py" target="_blank" rel="noopener">https://gitee.com/fengzxia/python_crawler_learning/blob/master/scrapy/qiushibaike/qsbk/spiders/qsbk_two.py</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> 爬虫 </category>
          
          <category> Scrapy </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CrawlSpider </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[python爬虫]Scrapy入门使用教程</title>
      <link href="/posts/ae675e47.html"/>
      <url>/posts/ae675e47.html</url>
      
        <content type="html"><![CDATA[<h2 id="开发环境"><a href="#开发环境" class="headerlink" title="开发环境"></a>开发环境</h2><blockquote><p>python: 3.7<br>系统: windows10<br>编辑器: PyCharm Community</p></blockquote><h2 id="文档地址"><a href="#文档地址" class="headerlink" title="文档地址"></a>文档地址</h2><ul><li>Scrapy官方文档：<a href="http://doc.scrapy.org/en/latest" target="_blank" rel="noopener">http://doc.scrapy.org/en/latest</a></li><li>Scrapy中文文档：<a href="http://scrapy-chs.readthedocs.io/zh_CN/latest/index.html" target="_blank" rel="noopener">http://scrapy-chs.readthedocs.io/zh_CN/latest/index.html</a></li></ul><h2 id="Demo地址"><a href="#Demo地址" class="headerlink" title="Demo地址"></a>Demo地址</h2><blockquote><p><a href="https://gitee.com/fengzxia/python_crawler_learning/tree/master/scrapy/qiushibaike" target="_blank" rel="noopener">https://gitee.com/fengzxia/python_crawler_learning/tree/master/scrapy/qiushibaike</a></p></blockquote><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>通过 <code>pip install scrapy</code> 即可快速安装</p><blockquote><p>注意：</p><ol><li>在ubuntu上安装scrapy之前，需要先执行下边的命令安装依赖：<pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install python3-dev build-essential python3-pip libxml2-dev libxslt1-dev zlib1g-dev libffi-dev libssl-dev</span><br></pre></td></tr></table></figure></code></pre> 然后再通过 <code>pip install scrapy</code> 安装</li><li>如果在windows系统下，提示这个错误<code>ModuleNotFoundError: No module named &#39;win32api&#39;</code>，那么使用以下命令可以解决：<code>pip install pypiwin32</code></li></ol></blockquote><h2 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h2><h3 id="1-创建项目"><a href="#1-创建项目" class="headerlink" title="1. 创建项目"></a>1. 创建项目</h3><p>要使用Scrapy框架创建项目，需要通过命令来创建。首先进入到你想把这个项目存放的目录。然后使用以下命令创建：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scrapy startproject [项目名称]</span><br></pre></td></tr></table></figure><h3 id="2-目录结构介绍"><a href="#2-目录结构介绍" class="headerlink" title="2. 目录结构介绍"></a>2. 目录结构介绍</h3><p>以下介绍主要文件的作用</p><ol><li><code>items.py</code>: 用来存放爬虫爬取下来数据的模型</li><li><code>middlewares.py</code>: 用来存放各种中间件的文件</li><li><code>pipelines.py</code>: 用来将items的模型存储到本地磁盘中</li><li><code>settings.py</code>: 本爬虫的一些配置信息（比如请求头、多久发送一次请求、ip代理池等）</li><li><code>scrapy.cfg</code>: 项目的配置文件</li><li><code>spiders包</code>: 以后所有的爬虫，都是存放到这个里面</li></ol><h3 id="3-使用Scrapy框架爬取糗事百科"><a href="#3-使用Scrapy框架爬取糗事百科" class="headerlink" title="3. 使用Scrapy框架爬取糗事百科"></a>3. 使用Scrapy框架爬取糗事百科</h3><ol><li><p>使用命令创建一个爬虫</p><pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scrapy startproject qsbk</span><br></pre></td></tr></table></figure>创建了一个名叫qsbk的爬虫</code></pre></li><li><p>修改<code>settings.py</code>代码</p><pre><code>**在做爬虫之前，一定要记得修改`setting.py`中的设置，下边有两个地方是强烈建议设置的**1. `ROBOTSTXT_OBEY`: 设置为False。默认是True。即遵守机器协议，那么在爬虫的时候，scrapy首先去找`robots.txt`文件，如果没有找到。则直接停止爬取。2. `USER_AGENT`: 设置请求头，将爬虫伪装成正常请求，不设置直接请求会报错，错误信息如下</code></pre> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">2019-07-11 16:08:58 [scrapy.core.scraper] ERROR: Error downloading &lt;GET https:&#x2F;&#x2F;www.qiushibaike.com&#x2F;text&#x2F;1&gt;</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;C:\Users\fengz\AppData\Local\Programs\Python\Python37\lib\site-packages\scrapy\core\downloader\middleware.py&quot;, line 43, in process_request</span><br><span class="line">    defer.returnValue((yield download_func(request&#x3D;request,spider&#x3D;spider)))</span><br><span class="line">twisted.web._newclient.ResponseNeverReceived: [&lt;twisted.python.failure.Failure twisted.internet.error.ConnectionDone: Connection was closed cleanly.&gt;]</span><br></pre></td></tr></table></figure><h4 id="4-完整的爬虫代码"><a href="#4-完整的爬虫代码" class="headerlink" title="4. 完整的爬虫代码"></a>4. 完整的爬虫代码</h4></li><li><p><code>items.py</code> 部分代码</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QsbkItem</span><span class="params">(scrapy.Item)</span>:</span></span><br><span class="line">    author = scrapy.Field()</span><br><span class="line">    content = scrapy.Field()</span><br></pre></td></tr></table></figure></li><li><p><code>spiders</code>包下新建一个爬虫脚本 <code>qsbk_spider.py</code> 代码如下</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"><span class="keyword">from</span> qsbk.items <span class="keyword">import</span> QsbkItem</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QsbkSpider</span><span class="params">(scrapy.Spider)</span>:</span></span><br><span class="line">    name = <span class="string">"qsbk"</span></span><br><span class="line">    allowed_domains = [<span class="string">'qiushibaike.com'</span>]</span><br><span class="line">    start_urls = [<span class="string">'https://www.qiushibaike.com/text/1'</span>]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse</span><span class="params">(self, response)</span>:</span></span><br><span class="line">        outerbox = response.xpath(<span class="string">"//div[@id='content-left']/div"</span>)</span><br><span class="line">        items = []</span><br><span class="line">        <span class="keyword">for</span> box <span class="keyword">in</span> outerbox:</span><br><span class="line">            author = str(box.xpath(<span class="string">"div[@class='author clearfix']/a/h2/text()"</span>).extract_first()).strip()</span><br><span class="line">            content = str(box.xpath(<span class="string">"a/div[@class='content']/span/text()"</span>).extract_first()).strip()</span><br><span class="line">            item = QsbkItem()</span><br><span class="line">            item[<span class="string">'author'</span>] = author</span><br><span class="line">            item[<span class="string">'content'</span>] = content</span><br><span class="line">            items.append(item)</span><br><span class="line">        <span class="keyword">return</span> items</span><br></pre></td></tr></table></figure><p> 这里也可以通过输入 <code>scrapy genspider [爬虫名字] [域名]</code> 在 <code>spiders</code>包下来生成爬虫相关代码：</p><ol><li>通过命令生成爬虫代码 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scrapy genspider qsbk www.qiushibaike.com</span><br></pre></td></tr></table></figure></li><li>生成的代码如下，然后再稍作修改 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Qsbk</span> <span class="title">Spider</span><span class="params">(scrapy.Spider)</span>:</span></span><br><span class="line">    name = <span class="string">'qsbk '</span></span><br><span class="line">    allowed_domains = [<span class="string">'www.qiushibaike.com'</span>]</span><br><span class="line">    start_urls = [<span class="string">'http://www.qiushibaike.com/'</span>]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse</span><span class="params">(self, response)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure></li></ol><ul><li><p><code>name</code>: 这个爬虫的名字，名字必须是唯一的</p></li><li><p><code>allow_domains</code>: 允许的域名。爬虫只会爬取这个域名下的网页，其他不是这个域名下的网页会被自动忽略</p></li><li><p><code>start_urls</code>: 爬虫从这个变量中的url开始</p></li><li><p><code>parse方法</code>: 引擎会把下载器下载回来的数据扔给爬虫解析，爬虫再把数据传给这个parse方法。这个是个固定的写法。这个方法的作用有两个，第一个是提取想要的数据。第二个是生成下一个请求的url</p></li><li><p>这里使用的是<code>xpath</code>方式提取的数据</p></li><li><p><code>extract_first()</code>: 获取通过xpath提取的第一条数据，还有 <code>extract()</code>、<code>getall()</code>、<code>get()</code>写法</p><table><thead><tr><th align="center">方法名</th><th align="left">描述</th></tr></thead><tbody><tr><td align="center"><code>extract()</code></td><td align="left">返回的是一个list，里面包含了多个string，<br>如果只有一个string，则返回[‘我很孤独’]这样的形式</td></tr><tr><td align="center"><code>extract_first()</code></td><td align="left">返回的是string，list里面第一个string</td></tr><tr><td align="center"><code>getall()</code></td><td align="left">同<code>extract()</code>一样返回的是list</td></tr><tr><td align="center"><code>get()</code></td><td align="left">同<code>extract_first()</code>一样返回的是string</td></tr></tbody></table></li><li><p><code>strip()</code>: 去除字符串中的空格</p></li><li><p><code>str()</code>: 将内容转为 <code>字符串</code> 类型，因为有些时候 <code>extract_first()</code> 返回的类型不匹配，不能使用<code>strip()</code></p><blockquote><p>Scrapy为<code>QsbkSpider</code>的 <code>start_urls</code> 属性中的每个URL创建了 <code>scrapy.Request</code> 对象，并将 <code>parse</code> 方法作为回调函数(<code>callback</code>)赋值给了<code>Request</code>。<br><code>Request对象</code>经过调度，执行生成 <code>scrapy.http.Response</code> 对象并送回给<code>spider parse()</code> 方法。</p></blockquote><h3 id="提取数据"><a href="#提取数据" class="headerlink" title="提取数据"></a>提取数据</h3><h4 id="Selectors选择器简介"><a href="#Selectors选择器简介" class="headerlink" title="Selectors选择器简介"></a>Selectors选择器简介</h4><p>从网页中提取数据有很多方法。Scrapy使用了一种基于 <a href="http://www.w3.org/TR/xpath" target="_blank" rel="noopener">XPath</a> 和 <a href="http://www.w3.org/TR/selectors" target="_blank" rel="noopener">CSS</a> 表达式机制: <a href="https://scrapy-chs.readthedocs.io/zh_CN/latest/topics/selectors.html#topics-selectors" target="_blank" rel="noopener">Scrapy Selectors</a>。 关于selector和其他提取机制的信息请参考 <a href="https://scrapy-chs.readthedocs.io/zh_CN/latest/topics/selectors.html#topics-selectors" target="_blank" rel="noopener">Selector文档</a></p><p>这里给出XPath表达式的例子及对应的含义:</p></li><li><p><code>/html/head/title</code>: 选择HTML文档中 <code>&lt;head&gt;</code> 标签内的 <code>&lt;title&gt;</code> 元素</p></li><li><p><code>/html/head/title/text()</code>: 选择上面提到的 <code>&lt;title&gt;</code> 元素的文字</p></li><li><p><code>//td</code>: 选择所有的 <code>&lt;td&gt;</code> 元素</p></li><li><p><code>//div[@class=&quot;mine&quot;]</code>: 选择所有具有 <code>class=&quot;mine&quot;</code> 属性的 div 元素</p><p>上边仅仅是几个简单的XPath例子，XPath实际上要比这远远强大的多。 如果您想了解的更多，我们推荐 <a href="http://www.w3school.com.cn/xpath/index.asp" target="_blank" rel="noopener">这篇XPath教程</a> 。</p><p>为了配合XPath，Scrapy除了提供了 <code>Selector</code> 之外，还提供了方法来避免每次从response中提取数据时生成selector的麻烦。</p><p>Selector有四个基本的方法(点击相应的方法可以看到详细的API文档):</p></li><li><p><code>xpath()</code>: 传入xpath表达式，返回该表达式所对应的所有节点的selector list列表 。</p></li><li><p><code>css()</code>: 传入CSS表达式，返回该表达式所对应的所有节点的selector list列表.</p></li><li><p><code>extract()</code>: 序列化该节点为unicode字符串并返回list。</p></li><li><p><code>re()</code>: 根据传入的正则表达式对数据进行提取，返回unicode字符串list列表。</p><p>以上 <code>Selectors选择器</code> 内容摘抄自<a href="https://scrapy-chs.readthedocs.io/zh_CN/latest/intro/tutorial.html#selectors" target="_blank" rel="noopener">Scrapy中文文档</a></p></li></ul></li><li><p><code>pipelines.py</code>部分代码</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QsbkPipeline</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.items = []</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_item</span><span class="params">(self, item, spider)</span>:</span></span><br><span class="line">        self.items.append(dict(item))</span><br><span class="line">        print(<span class="string">"="</span> * <span class="number">40</span>)</span><br><span class="line">        <span class="keyword">return</span> item</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">close_spider</span><span class="params">(self, spider)</span>:</span></span><br><span class="line">        <span class="keyword">with</span> open(<span class="string">'qsbk.json'</span>, <span class="string">'w'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> fp:</span><br><span class="line">            json.dump(self.items, fp, ensure_ascii=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure><ul><li><p><code>process_item</code>: 每个item pipeline组件都需要调用该方法，这个方法必须返回一个 <code>Item</code> (或任何继承类)对象， 或是抛出 <code>DropItem</code> 异常，被丢弃的item将不会被之后的pipeline组件所处理。这里是将<code>item</code>数据存入<code>items</code>集合中</p></li><li><p><code>close_spider</code>: 当spider被关闭时，这个方法被调用。这里是将<code>items</code>集合中的数据转为json字符串保存到 <code>qsbk.json</code> 文件中</p></li><li><p><em>要想<code>pipelines.py</code>中的代码执行，必须在<code>settings.py</code>中设置<code>ITEM_PIPELINES属性</code>, 否则不会执行*</em></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ITEM_PIPELINES = &#123;</span><br><span class="line">    <span class="string">'qsbk.pipelines.QsbkPipeline'</span>: <span class="number">300</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>运行scrapy项目<br> 运行scrapy项目。需要在终端，进入项目所在的路径，然后 <code>scrapy crawl [爬虫名字]</code> 即可运行指定的爬虫。如果不想每次都在命令行中运行，那么可以把这个命令写在一个文件中。以后就在pycharm中执行运行这个文件就可以了。比如现在新创建一个文件叫做 <code>start.py</code>，然后在这个文件中填入以下代码</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> scrapy <span class="keyword">import</span> cmdline</span><br><span class="line"></span><br><span class="line">cmdline.execute(<span class="string">'scrapy crawl qsbk'</span>.split())</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> 爬虫 </category>
          
          <category> Scrapy </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spider </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在使用Java的序列化和反序列化时碰到的问题</title>
      <link href="/posts/3efb331f.html"/>
      <url>/posts/3efb331f.html</url>
      
        <content type="html"><![CDATA[<p>有时需要为对象做持久化，就是把内存里的对象保存到磁盘（暂且叫做磁盘吧，可以等同于sp、db、文件、网络等）上，等以后需要这个对象的时候再从磁盘上还原到内存，因此需要序列化和反序列化。</p><p>如果使用<code>ObjectOutputStream</code>方式序列化，可能出现的坑如下：</p><ul><li><p>类里面一定要生成<code>serialVersionUID</code>，否则旧数据会反序列化会失败。</p><p>  <strong><code>serialVersionUID</code> 是根据该类名、方法名等数据生产的一个整数，用来验证版本是否一致。如果不加这个字段，当你的类修改了字段，在反序列化的时候会直接报异常：InvalidCastException，导致无法完成反序列化。</strong> 举个例子：<code>类A</code>没有添加<code>serialVersionUID</code>，代码里有序列化和反序列化逻辑，app匆匆发版了。然后某一天由于需求变动，在<code>类A</code>里面增加了一个字段变成了<code>类AA</code>，再次发版，当新用户更新app后，使用反序列化以前的数据时，直接报异常。</p></li><li><p>一旦序列化保存到磁盘操作后，就不能修改类名，类路径，否则旧数据会反序列化会失败</p><p>  如果想要避免这种问题最好是将类序列化成json字符串进行保存，这样就不会出现这种情况。</p></li></ul><blockquote><p>作者：天空还是那么蓝<br>来源：CSDN<br>原文：<a href="https://blog.csdn.net/w958796636/article/details/54618089/" target="_blank" rel="noopener">https://blog.csdn.net/w958796636/article/details/54618089/</a><br>版权声明：本文为博主原创文章，转载请附上博文链接！</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> BUG </category>
          
          <category> 异常 </category>
          
          <category> 转载 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 序列化 </tag>
            
            <tag> InvalidCastException </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Arrays.asList存在的坑</title>
      <link href="/posts/43f97ef5.html"/>
      <url>/posts/43f97ef5.html</url>
      
        <content type="html"><![CDATA[<h2 id="引语"><a href="#引语" class="headerlink" title="引语:"></a>引语:</h2><p>阿里巴巴java开发规范说到使用工具类<code>Arrays.asList()</code>方法把数组转换成集合时,不能使用其修改集合相关的方法,它的<code>add/remove/clear</code>方法会抛出<code>UnsupportedOperationException()</code>,我们来看一下为什么会出现这种情况.</p><h2 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析:"></a>问题分析:</h2><p>我们做个测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">   List&lt;String&gt; list = Arrays.asList(<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>);</span><br><span class="line">   <span class="comment">// list.clear();</span></span><br><span class="line">   <span class="comment">// list.remove("a");</span></span><br><span class="line">   <span class="comment">// list.add("g");</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>被注释的三行可以分别解开注释,运行后确实出现了规约中所说的异常.我们来看下<code>Arrays.asList()</code>做了什么操作.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">List&lt;T&gt; <span class="title">asList</span><span class="params">(T... a)</span> </span>&#123;</span><br><span class="line"> <span class="keyword">return</span> <span class="keyword">new</span> ArrayList&lt;&gt;(a);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看上去是个很正常的方法,然而实际上你点进到ArrayList发现,其实ArrayList并不是我们平时用的ArrayList.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayList</span>&lt;<span class="title">E</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractList</span>&lt;<span class="title">E</span>&gt;</span></span><br><span class="line"><span class="class">       <span class="keyword">implements</span> <span class="title">RandomAccess</span>, <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span> </span>&#123;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = -<span class="number">2764017481108945198L</span>;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">final</span> E[] a;</span><br><span class="line"></span><br><span class="line">   ArrayList(E[] array) &#123;</span><br><span class="line">       a = Objects.requireNonNull(array);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> a.length;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> Object[] toArray() &#123;</span><br><span class="line">       <span class="keyword">return</span> a.clone();</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">   <span class="keyword">public</span> &lt;T&gt; T[] toArray(T[] a) &#123;</span><br><span class="line">       <span class="keyword">int</span> size = size();</span><br><span class="line">       <span class="keyword">if</span> (a.length &lt; size)</span><br><span class="line">           <span class="keyword">return</span> Arrays.copyOf(<span class="keyword">this</span>.a, size,</span><br><span class="line">                                (Class&lt;? extends T[]&gt;) a.getClass());</span><br><span class="line">       System.arraycopy(<span class="keyword">this</span>.a, <span class="number">0</span>, a, <span class="number">0</span>, size);</span><br><span class="line">       <span class="keyword">if</span> (a.length &gt; size)</span><br><span class="line">           a[size] = <span class="keyword">null</span>;</span><br><span class="line">       <span class="keyword">return</span> a;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">// 后面省略了</span></span><br></pre></td></tr></table></figure><p>而是Arrays里面的一个内部类.而且这个内部类没有<code>add,clear,remove</code>方法,所以抛出的异常其实来自于<code>AbstractList</code>.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">voidadd</span><span class="params">(<span class="keyword">int</span> index, E element)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">remove</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">   <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="官方文档解释"><a href="#官方文档解释" class="headerlink" title="官方文档解释"></a>官方文档解释</h2><p>此段内容摘抄自博客-&gt; <a href="https://blog.csdn.net/qq_34115899/article/details/80513271" target="_blank" rel="noopener">访问地址</a></p><blockquote><p>public static <T> List<T> asList(T… a)<br>返回一个受指定数组支持的固定大小的列表。（对返回列表的更改会“直接写”到数组。）此方法同 Collection.toArray() 一起，&gt; 充当了基于数组的 API 与基于 collection 的 API 之间的桥梁。返回的列表是可序列化的，并且实现了 RandomAccess。<br>此方法还提供了一个创建固定长度的列表的便捷方法，该列表被初始化为包含多个元素：<br>List<String> stooges = Arrays.asList(“Larry”, “Moe”, “Curly”);<br>参数：<br>a - 支持列表的数组。<br>返回：<br>指定数组的列表视图。</p></blockquote><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li><code>Arrays.asList()</code>不能乱用,底层其实还是数组;</li><li>使用<code>Arrays.asList()</code>生成的<strong>集合是大小固定的</strong>，无法进行添加和删除</li><li>如果想要将数组转换成一个可以具有正常添加和删除操作的List话，有两种方式:<ol><li>遍历数组，一个个添加到list中</li><li>用<code>Collections.addAll(list, a);</code></li></ol></li></ol><blockquote><p>作者：我想问问天<br>链接：<a href="https://juejin.im/post/5d10e52ee51d454f6f16ec11" target="_blank" rel="noopener">https://juejin.im/post/5d10e52ee51d454f6f16ec11</a><br>来源：掘金</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> 基础 </category>
          
          <category> 转载 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 集合 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot使用Redis来实现Session共享</title>
      <link href="/posts/7e7e2192.html"/>
      <url>/posts/7e7e2192.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>demo地址<br><a href="https://gitee.com/fengzxia/SpringBoot-Redis-Session" target="_blank" rel="noopener">https://gitee.com/fengzxia/SpringBoot-Redis-Session</a></p></blockquote><ol><li><p>创建一个Maven项目名为 <code>demo1</code>  </p></li><li><p>需要添加的依赖, 使用的springboot版本是  <code>2.1.4.RELEASE</code></p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.session<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-session-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>如果使用的是最新版本 <code>2.1.5.RELEASE</code> 或者其以后的版本，则还需要额外添加 <code>Spring Security</code> 依赖，（其他操作不受影响，仅仅只是多了一个依赖，当然也多了 Spring Security 的一些默认认证流程）</p></blockquote></li><li><p>添加redis配置</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">server:</span><br><span class="line">  port: 8081</span><br><span class="line">spring:</span><br><span class="line">  redis:</span><br><span class="line">    host: 127.0.0.1</span><br><span class="line">    port: 9455</span><br><span class="line">    password: 123456</span><br><span class="line">    database: 1</span><br></pre></td></tr></table></figure><blockquote><p>更加详细的配置可参看<a href="https://docs.spring.io/spring-session/docs/2.1.4.RELEASE/reference/html5/guides/boot-redis.html" target="_blank" rel="noopener">官方文档</a></p></blockquote></li><li><p>配置完成后 ，就可以使用 Spring Session 了，其实就是使用普通的 HttpSession ，其他的 Session 同步到 Redis 等操作，SpringBoot框架已经自动帮你完成了</p></li><li><p>创建controller来设置session</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"demo1"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo1Controller</span> </span>&#123;</span><br><span class="line">  <span class="meta">@GetMapping</span>(<span class="string">"set_session"</span>)</span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">setSession</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">    request.getSession().setAttribute(<span class="string">"projectName"</span>, <span class="string">"demo1"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"demo1 install session success"</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@GetMapping</span>(<span class="string">"get_session"</span>)</span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">getSession</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">    String projectName = (String) request.getSession().getAttribute(<span class="string">"projectName"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"demo1 get projectName is "</span> + projectName;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>参照上边的配置再创建一个项目为 <code>demo2</code></p><ol><li>修改 <code>server.port</code> 为 <code>8082</code></li><li>修改controller内容如下 <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"demo2"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo2Controller</span> </span>&#123;</span><br><span class="line">  <span class="meta">@GetMapping</span>(<span class="string">"set_session"</span>)</span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">setSession</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">    request.getSession().setAttribute(<span class="string">"projectName"</span>, <span class="string">"demo2"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"demo2 install session success"</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@GetMapping</span>(<span class="string">"get_session"</span>)</span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">getSession</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">    String projectName = (String) request.getSession().getAttribute(<span class="string">"projectName"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"demo2 get projectName is "</span> + projectName;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li><li><p>分别启动<code>demo1</code>和<code>demo2</code>两个项目，查看共享效果</p><ol><li>访问 <code>demo1</code> 设置session地址 <a href="http://localhost:8081/demo1/set_session" target="_blank" rel="noopener">localhost:8081/demo1/set_session</a> 将 <code>projectName</code>设置为 <code>demo1</code>，访问完后，数据已经自动同步到redis中<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pLmxvbGkubmV0LzIwMTkvMDYvMTkvNWQwOWNjZjJjNjExZDQ2MTU4LnBuZw?x-oss-process=image/format,png" alt="UTOOLS1560923374399.png"> </li><li>访问 <code>demo1</code> 获取session地址 <a href="http://localhost:8081/demo1/set_session" target="_blank" rel="noopener">localhost:8081/demo1/set_session</a> 查看 <code>projectName</code>如图<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pLmxvbGkubmV0LzIwMTkvMDYvMTkvNWQwOWNkNDFkMDhjMzg3MTU3LnBuZw?x-oss-process=image/format,png" alt="UTOOLS1560923453196.png"></li><li>访问 <code>demo2</code> 获取session地址 <a href="http://localhost:8082/demo2/get_session" target="_blank" rel="noopener">localhost:8082/demo2/get_session</a> 查看 <code>projectName</code>如图，看到的是demo1设置的<code>projectName</code><br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pLmxvbGkubmV0LzIwMTkvMDYvMTkvNWQwOWNkY2E2MzBhZTY0MzU1LnBuZw?x-oss-process=image/format,png" alt="UTOOLS1560923590048.png"></li><li>再调用 <code>demo2</code> 的设置session地址 <a href="http://localhost:8082/demo2/set_session" target="_blank" rel="noopener">localhost:8082/demo2/set_session</a>，查看redis中的数据，已经被修改<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pLmxvbGkubmV0LzIwMTkvMDYvMTkvNWQwOWNlNTUxNDM1MjU2NDA4LnBuZw?x-oss-process=image/format,png" alt="UTOOLS1560923729034.png"></li><li>再访问 <code>demo1</code> 查看session，展示的就是 <code>demo2</code><br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pLmxvbGkubmV0LzIwMTkvMDYvMTkvNWQwOWNlOTZlNzEyZTIxNTM4LnBuZw?x-oss-process=image/format,png" alt="UTOOLS1560923794859.png"></li></ol></li><li><p>至此SpringBoot使用Redis来实现Session共享设置成功</p></li></ol><blockquote><p>真正在项目实际应用中，是通过 <code>Nginx</code> 进行代理自动分配访问哪个项目，而不是想我这样手动修改请求的链接来查看效果</p></blockquote><p>参考博客:  <a href="https://bestzuo.cn/posts/859382359.html" target="_blank" rel="noopener">https://bestzuo.cn/posts/859382359.html</a></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> Spring </category>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> session共享 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springboot+logback进行日志输出时报current ElementPath is [[configuration][root][springProfile]]错误</title>
      <link href="/posts/733ae9b5.html"/>
      <url>/posts/733ae9b5.html</url>
      
        <content type="html"><![CDATA[<p>在<code>logback</code>使用了<code>&lt;springProfile&gt;</code>标签，获取到项目所处的环境是线上还是线下，根据这个来指定部分日志是否记录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"> &lt;springProfile name&#x3D;&quot;prod&quot;&gt;</span><br><span class="line">      &lt;appender-ref ref&#x3D;&quot;LOGSTASH&quot;&#x2F;&gt;</span><br><span class="line">&lt;&#x2F;springProfile&gt;</span><br></pre></td></tr></table></figure><p>但是在启动的时候报错，信息如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Exception in thread &quot;main&quot; java.lang.IllegalStateException: Logback configuration error detected: </span><br><span class="line">ERROR in ch.qos.logback.core.joran.spi.Interpreter@118:32 - no applicable action for [springProfile], current ElementPath  is [[configuration][root][springProfile]]</span><br><span class="line">ERROR in ch.qos.logback.core.joran.spi.Interpreter@119:39 - no applicable action for [appender-ref], current ElementPath  is [[configuration][root][springProfile][appender-ref]]</span><br></pre></td></tr></table></figure><p>大概意思就是配置中没有找到<code>&lt;springProfile&gt;</code>标签，运气很好直接在springboot官方文档  <code>https://docs.spring.io/spring-boot/docs/current/reference/html/boot-features-logging.html#boot-features-logback-extensions</code> 中找到错误的原因：</p><blockquote><p>Spring Boot includes a number of extensions to Logback that can help with advanced configuration. You can use these extensions in your logback-spring.xml configuration file.<br>[Note]<br>Because the standard logback.xml configuration file is loaded too early, you cannot use extensions in it. You need to either use logback-spring.xml or define a logging.config property.<br>[Warning]<br>The extensions cannot be used with Logback’s configuration scanning. If you attempt to do so, making changes to the configuration file results in an error similar to one of the following being logged:<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ERROR in ch.qos.logback.core.joran.spi.Interpreter@4:71 - no applicable action for [springProperty], current ElementPath is [[configuration][springProperty]]</span><br><span class="line">ERROR in ch.qos.logback.core.joran.spi.Interpreter@4:71 - no applicable action for [springProfile], current ElementPath is [[configuration][springProfile]]</span><br></pre></td></tr></table></figure></p></blockquote><ul><li>文档中将的很清楚，在springboot中包含了很多logback的扩展可以支持我们进行一些更高级的配置，比如逻辑判断</li><li>如果使用<code>logback.xml</code>的话会使logback的配置加载的过早，无法使用扩展配置，需要修改logback的配置文件命名为<code>logback-spring.xml</code>或者在<code>application.yml</code>中定义<code>logging.config</code>指定<code>logback.xml</code>配置路径才能使用</li><li>如果直接使用<code>logback.xml</code>配置方式的话会导致<code>current ElementPath is [[configuration][springProfile]]</code>等错误<br>检查logback的命名发现项目中我名字为<code>logback.mxl</code>修改成<code>logback-spring.xml</code>后即可正常启动项目</li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> Spring </category>
          
          <category> SpringBoot </category>
          
          <category> BUG </category>
          
          <category> logback </category>
          
          <category> 异常 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IllegalStateException </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用LocalDate进行时间类型格式转换的时候报UnsupportedTemporalTypeException: Unsupported field: HourOfDay错误</title>
      <link href="/posts/b0bd65cf.html"/>
      <url>/posts/b0bd65cf.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>参考博客<br><a href="https://www.cnblogs.com/krcys/p/9146339.html" target="_blank" rel="noopener">https://www.cnblogs.com/krcys/p/9146339.html</a></p></blockquote><p>在使用java8中的LocalDate进行时间格式化，报了一个异常，代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">LocalDate now = LocalDate.now();</span><br><span class="line">String day = now.format(DateTimeFormatter.ofPattern(<span class="string">"yyyy-MM-dd"</span>));</span><br><span class="line">String time = now.format(DateTimeFormatter.ofPattern(<span class="string">"yyyy-MM-dd HH:mm:ss"</span>));</span><br></pre></td></tr></table></figure><p>在执行到<code>String time = now.format(DateTimeFormatter.ofPattern(&quot;yyyy-MM-dd HH:mm:ss&quot;));</code>抛出异常，错误信息如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">java.time.temporal.UnsupportedTemporalTypeException: Unsupported field: HourOfDay</span><br><span class="line">at java.time.LocalDate.get0(LocalDate.java:680)</span><br><span class="line">at java.time.LocalDate.getLong(LocalDate.java:659)</span><br><span class="line">at java.time.format.DateTimePrintContext.getValue(DateTimePrintContext.java:298)</span><br><span class="line">at java.time.format.DateTimeFormatterBuilder$NumberPrinterParser.format(DateTimeFormatterBuilder.java:2540)</span><br><span class="line">at java.time.format.DateTimeFormatterBuilder$CompositePrinterParser.format(DateTimeFormatterBuilder.java:2179)</span><br><span class="line">at java.time.format.DateTimeFormatter.formatTo(DateTimeFormatter.java:1746)</span><br><span class="line">at java.time.format.DateTimeFormatter.format(DateTimeFormatter.java:1720)</span><br><span class="line">at java.time.LocalDate.format(LocalDate.java:1691)</span><br></pre></td></tr></table></figure><p>到jdk源码中查看：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">get0</span><span class="params">(TemporalField field)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> ((ChronoField) field) &#123;</span><br><span class="line">        <span class="keyword">case</span> DAY_OF_WEEK: <span class="keyword">return</span> getDayOfWeek().getValue();</span><br><span class="line">        <span class="keyword">case</span> ALIGNED_DAY_OF_WEEK_IN_MONTH: <span class="keyword">return</span> ((day - <span class="number">1</span>) % <span class="number">7</span>) + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">case</span> ALIGNED_DAY_OF_WEEK_IN_YEAR: <span class="keyword">return</span> ((getDayOfYear() - <span class="number">1</span>) % <span class="number">7</span>) + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">case</span> DAY_OF_MONTH: <span class="keyword">return</span> day;</span><br><span class="line">        <span class="keyword">case</span> DAY_OF_YEAR: <span class="keyword">return</span> getDayOfYear();</span><br><span class="line">        <span class="keyword">case</span> EPOCH_DAY: <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedTemporalTypeException(<span class="string">"Invalid field 'EpochDay' for get() method, use getLong() instead"</span>);</span><br><span class="line">        <span class="keyword">case</span> ALIGNED_WEEK_OF_MONTH: <span class="keyword">return</span> ((day - <span class="number">1</span>) / <span class="number">7</span>) + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">case</span> ALIGNED_WEEK_OF_YEAR: <span class="keyword">return</span> ((getDayOfYear() - <span class="number">1</span>) / <span class="number">7</span>) + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">case</span> MONTH_OF_YEAR: <span class="keyword">return</span> month;</span><br><span class="line">        <span class="keyword">case</span> PROLEPTIC_MONTH: <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedTemporalTypeException(<span class="string">"Invalid field 'ProlepticMonth' for get() method, use getLong() instead"</span>);</span><br><span class="line">        <span class="keyword">case</span> YEAR_OF_ERA: <span class="keyword">return</span> (year &gt;= <span class="number">1</span> ? year : <span class="number">1</span> - year);</span><br><span class="line">        <span class="keyword">case</span> YEAR: <span class="keyword">return</span> year;</span><br><span class="line">        <span class="keyword">case</span> ERA: <span class="keyword">return</span> (year &gt;= <span class="number">1</span> ? <span class="number">1</span> : <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedTemporalTypeException(<span class="string">"Unsupported field: "</span> + field);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>说明我在<code>DateTimeFormatter.ofPattern(&quot;yyyy-MM-dd HH:mm:ss&quot;)</code>中的的<code>HH:mm:ss</code>是不在case之中的。</p><h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><p>因为<code>LocalDate</code>中是不包含时分秒的，想要格式化时分秒需要用<code>LocalDateTime</code>这个类，里边包含的有时分秒</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">LocalDateTime now = LocalDateTime.now();</span><br><span class="line">String day = now.format(DateTimeFormatter.ofPattern(<span class="string">"yyyy-MM-dd"</span>));</span><br><span class="line">String time = now.format(DateTimeFormatter.ofPattern(<span class="string">"yyyy-MM-dd HH:mm:ss"</span>));</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> 基础 </category>
          
          <category> BUG </category>
          
          <category> 异常 </category>
          
          <category> 转载 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LocalDate </tag>
            
            <tag> UnsupportedTemporalTypeException </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>spring-jpa通过自定义sql执行修改碰到的问题</title>
      <link href="/posts/707abbe2.html"/>
      <url>/posts/707abbe2.html</url>
      
        <content type="html"><![CDATA[<p>在编写自定义SQL的时候需要注意</p><ul><li><code>@Query</code> 注解只能用来查询，想要进行添加、修改和删除操作需要配合 <code>@Modifying</code> 注解一同使用  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Modifying</span></span><br><span class="line"><span class="meta">@Query</span>(<span class="string">"update AdminUser set username=:#&#123;#adminUser.username&#125;,password=:#&#123;#adminUser.password&#125; where id=:#&#123;#adminUser.id&#125;"</span>)</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">updateInfoById</span><span class="params">(@Param(<span class="string">"adminUser"</span>)</span> AdminUser adminUser)</span>;</span><br></pre></td></tr></table></figure>  否则执行会报错错误信息如下，提示不支持修改操作  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">org.springframework.dao.InvalidDataAccessApiUsageException: org.hibernate.hql.internal.QueryExecutionRequestException: Not supported for DML operations [update com.leimo.module.adminuser.entity.AdminUser set username&#x3D;:__$synthetic$__1,password&#x3D;:__$synthetic$__2,updateTime&#x3D;:__$synthetic$__3 where id&#x3D;:__$synthetic$__4]; nested exception is java.lang.IllegalStateException: org.hibernate.hql.internal.QueryExecutionRequestException: Not supported for DML operations [update com.leimo.module.adminuser.entity.AdminUser set username&#x3D;:__$synthetic$__1,password&#x3D;:__$synthetic$__2,updateTime&#x3D;:__$synthetic$__3 where id&#x3D;:__$synthetic$__4]</span><br><span class="line">at org.springframework.orm.jpa.EntityManagerFactoryUtils.convertJpaAccessExceptionIfPossible(EntityManagerFactoryUtils.java:370) ~[spring-orm-5.1.6.RELEASE.jar:5.1.6.RELEASE]</span><br><span class="line">at org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:255) ~[spring-orm-5.1.6.RELEASE.jar:5.1.6.RELEASE]</span><br><span class="line">at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.translateExceptionIfPossible(AbstractEntityManagerFactoryBean.java:527) ~[spring-orm-5.1.6.RELEASE.jar:5.1.6.RELEASE]</span><br></pre></td></tr></table></figure></li><li>只是添加了 <code>@Modifying</code> 注解在执行修改操作的时候仍然会报错，提示在进行删除和修改的时候需要给方法加上事务  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">org.springframework.dao.InvalidDataAccessApiUsageException: Executing an update&#x2F;delete query; nested exception is javax.persistence.TransactionRequiredException: Executing an update&#x2F;delete query</span><br><span class="line">at org.springframework.orm.jpa.EntityManagerFactoryUtils.convertJpaAccessExceptionIfPossible(EntityManagerFactoryUtils.java:402) ~[spring-orm-5.1.6.RELEASE.jar:5.1.6.RELEASE]</span><br><span class="line">at org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:255) ~[spring-orm-5.1.6.RELEASE.jar:5.1.6.RELEASE]</span><br><span class="line">at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.translateExceptionIfPossible(AbstractEntityManagerFactoryBean.java:527) ~[spring-orm-5.1.6.RELEASE.jar:5.1.6.RELEASE]</span><br></pre></td></tr></table></figure>  在可以直接在Repository的修改接口上添加 <code>@org.springframework.transaction.annotation.Transactional</code> 注解就可以正常执行修改语句了，或者在调用改接口的方法上添加 <code>@Transactional</code> 事务注解即可  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Transactional</span></span><br><span class="line">   <span class="meta">@Modifying</span></span><br><span class="line">   <span class="meta">@Query</span>(<span class="string">"update AdminUser set username=:#&#123;#adminUser.username&#125;,password=:#&#123;#adminUser.password&#125; where id=:#&#123;#adminUser.id&#125;"</span>)</span><br><span class="line">   <span class="function"><span class="keyword">int</span> <span class="title">updateInfoById</span><span class="params">(@Param(<span class="string">"adminUser"</span>)</span> AdminUser adminUser)</span>;</span><br></pre></td></tr></table></figure><blockquote><p>参考博客<br><a href="https://www.jianshu.com/p/9d5bf0e4943f" target="_blank" rel="noopener">https://www.jianshu.com/p/9d5bf0e4943f</a></p></blockquote></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> Spring </category>
          
          <category> BUG </category>
          
          <category> 异常 </category>
          
          <category> Spring-data-jpa </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jap更新 </tag>
            
            <tag> InvalidDataAccessApiUsageException </tag>
            
            <tag> TransactionRequiredException </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jpa执行插入报error performing isolated work错误</title>
      <link href="/posts/438db51a.html"/>
      <url>/posts/438db51a.html</url>
      
        <content type="html"><![CDATA[<h2 id="碰到的问题"><a href="#碰到的问题" class="headerlink" title="碰到的问题"></a>碰到的问题</h2><p>在使用jpa进行添加操作的时候报错</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">2019-05-21 20:44:04.992 ERROR 13460 --- [ctor-http-nio-3] o.h.engine.jdbc.spi.SqlExceptionHelper   : Table &#39;national_marketing.hibernate_sequence&#39; doesn&#39;t exist</span><br><span class="line">277</span><br><span class="line">2019-05-21 20:44:05.044 ERROR 13460 --- [ctor-http-nio-3] a.w.r.e.AbstractErrorWebExceptionHandler : [a8da1078] 500 Server Error for HTTP PUT &quot;&#x2F;admin&#x2F;admin_user&#x2F;add_admin_user&quot;</span><br><span class="line"></span><br><span class="line">org.springframework.dao.InvalidDataAccessResourceUsageException: error performing isolated work; SQL [n&#x2F;a]; nested exception is org.hibernate.exception.SQLGrammarException: error performing isolated work</span><br><span class="line">at org.springframework.orm.jpa.vendor.HibernateJpaDialect.convertHibernateAccessException(HibernateJpaDialect.java:279) ~[spring-orm-5.1.6.RELEASE.jar:5.1.6.RELEASE]</span><br><span class="line">at org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:253) ~[spring-orm-5.1.6.RELEASE.jar:5.1.6.RELEASE]</span><br><span class="line">at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.translateExceptionIfPossible(AbstractEntityManagerFactoryBean.java:527) ~[spring-orm-5.1.6.RELEASE.jar:5.1.6.RELEASE]</span><br><span class="line">at org.springframework.dao.support.ChainedPersistenceExceptionTranslator.translateExceptionIfPossible(ChainedPersistenceExceptionTranslator.java:61) ~[spring-tx-5.1.6.RELEASE.jar:5.1.6.RELEASE]</span><br><span class="line">at org.springframework.dao.support.DataAccessUtils.translateIfNecessary(DataAccessUtils.java:242) ~[spring-tx-5.1.6.RELEASE.jar:5.1.6.RELEASE]</span><br><span class="line">at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:153) ~[spring-tx-5.1.6.RELEASE.jar:5.1.6.RELEASE]</span><br><span class="line">at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.1.6.RELEASE.jar:5.1.6.RELEASE]</span><br></pre></td></tr></table></figure><h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><p>在使用Jpa对数据库进行操作是时，设置的自增字段在进行插入操作时也必须set,否则会报错添加失败。<br>通过使用 <code>@GeneratedValue</code> 注解能实现自增字段自动添加。<br><strong>但是只使用 <code>@GeneratedValue</code>注解在注解中不传入参数，会报错 <code>error performing isolated work</code></strong><br><img src="https://img-blog.csdnimg.cn/20190521204519962.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMzNDMwMDgz,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><p>给 <code>@GeneratedValue</code>注解中添加参数：<code>@GeneratedValue（strategy = GenerationType.IDENTITY）</code>这样即可正常添加成功</p><h2 id="参考博客"><a href="#参考博客" class="headerlink" title="参考博客"></a>参考博客</h2><blockquote><p><a href="https://blog.csdn.net/zxohoo/article/details/80464895" target="_blank" rel="noopener">https://blog.csdn.net/zxohoo/article/details/80464895</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> Spring </category>
          
          <category> BUG </category>
          
          <category> 异常 </category>
          
          <category> 转载 </category>
          
          <category> Spring-data-jpa </category>
          
      </categories>
      
      
        <tags>
            
            <tag> InvalidDataAccessResourceUsageException </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用spring-boot-admin对springboot1.x版本的项目进行监听</title>
      <link href="/posts/3a8da9de.html"/>
      <url>/posts/3a8da9de.html</url>
      
        <content type="html"><![CDATA[<p><strong>项目中SpringBoot的版本为<code>1.5.10.RELEASE</code>，spring-boot-admin的版本为<code>1.5.7</code>，如果是其他版本的springboot请自行对照maven项目版本进行配置spring-boot-admin</strong></p><h2 id="Server配置"><a href="#Server配置" class="headerlink" title="Server配置"></a>Server配置</h2><p>需要的依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>de.codecentric<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-admin-starter-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>通过<code>&lt;dependencyManagement&gt;</code>标签引用 <code>spring-boot-admin</code> 的父级依赖，然后在<code>&lt;dependencies&gt;</code>标签中可以不需要添加版本号方便版本号统一管理，也可不用<code>dependencyManagement</code>自己直接指定版本号</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>de.codecentric<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-admin-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-boot-admin.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br></pre></td></tr></table></figure><p>引入依赖后修改项目启动的端口号（也可不修改，默认8080），打开<code>application.yml</code>文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">server:</span><br><span class="line">  port: 8081</span><br></pre></td></tr></table></figure><p>配置后，启动访问 <a href="http://localhost:8081" target="_blank" rel="noopener">http://localhost:8081</a> 如下图，暂时没有client项目启动所以列表为空:<br><img src="https://img-blog.csdnimg.cn/20190518140623177.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMzNDMwMDgz,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="Client配置"><a href="#Client配置" class="headerlink" title="Client配置"></a>Client配置</h2><p>需要的依赖（依赖的版本号同Server一样），因为<code>spring-boot-admin-starter-client</code>中已经包含了<code>spring-boot-starter-actuator</code>包所以这里没有引入</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>de.codecentric<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-admin-starter-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>&lt;dependencyManagement&gt;</code>标签</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>de.codecentric<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-admin-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-boot-admin.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br></pre></td></tr></table></figure><p>打开<code>application.yml</code>文件，添加配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">management:</span><br><span class="line">  # 指定客户端监听接口的路径</span><br><span class="line">  context-path: &#x2F;client_jar</span><br><span class="line">  security:</span><br><span class="line">  # 关闭自带的安全拦截</span><br><span class="line">    enabled: false</span><br><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">  # 指定项目名</span><br><span class="line">    name: client-jar</span><br><span class="line">  boot:</span><br><span class="line">    admin:</span><br><span class="line">      # 指定服务端项目地址（为上边server项目配置的端口号）</span><br><span class="line">      url: http:&#x2F;&#x2F;localhost:8081</span><br><span class="line">server:</span><br><span class="line">  # 指定项目端口号</span><br><span class="line">  port: 8082</span><br></pre></td></tr></table></figure><p><strong>如果项目是配置成WAR包启动的话，yml中需要添加<code>spring.boot.admin.client.service-base-url=项目访问地址</code>，如果不添加的话项目监控无法识别项目访问地址，会抛异常信息如下，已经很明确的指出如果是部署到Server容器启动需要指定<code>service-base-url</code>填入项目访问路径</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">2019-05-18 14:36:34.124 [registrationTask1] ERROR org.springframework.scheduling.support.TaskUtils$LoggingErrorHandler:95 - Unexpected error occurred in scheduled task.</span><br><span class="line">java.lang.IllegalStateException: service-base-url must be set when deployed to servlet-container</span><br><span class="line">at de.codecentric.boot.admin.client.registration.DefaultApplicationFactory.getServiceUrl(DefaultApplicationFactory.java:68)</span><br><span class="line">at de.codecentric.boot.admin.client.registration.DefaultApplicationFactory.getManagementUrl(DefaultApplicationFactory.java:95)</span><br><span class="line">at de.codecentric.boot.admin.client.registration.DefaultApplicationFactory.getHealthUrl(DefaultApplicationFactory.java:115)</span><br><span class="line">at de.codecentric.boot.admin.client.registration.DefaultApplicationFactory.createApplication(DefaultApplicationFactory.java:50)</span><br><span class="line">at de.codecentric.boot.admin.client.registration.ApplicationRegistrator.createApplication(ApplicationRegistrator.java:140)</span><br><span class="line">at de.codecentric.boot.admin.client.registration.ApplicationRegistrator.register(ApplicationRegistrator.java:65)</span><br><span class="line">at de.codecentric.boot.admin.client.registration.RegistrationApplicationListener$1.run(RegistrationApplicationListener.java:80)</span><br><span class="line">at org.springframework.scheduling.support.DelegatingErrorHandlingRunnable.run(DelegatingErrorHandlingRunnable.java:54)</span><br><span class="line">at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)</span><br><span class="line">at java.util.concurrent.FutureTask.runAndReset$$$capture(FutureTask.java:308)</span><br><span class="line">at java.util.concurrent.FutureTask.runAndReset(FutureTask.java)</span><br><span class="line">at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$301(ScheduledThreadPoolExecutor.java:180)</span><br><span class="line">at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:294)</span><br><span class="line">at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)</span><br><span class="line">at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)</span><br><span class="line">at java.lang.Thread.run(Thread.java:745)</span><br></pre></td></tr></table></figure><p>然后启动项目，查看Server端页面，在列表中展示了我们已经启动的client项目，Status为<code>UP</code>代表项目正常运行<br><img src="https://img-blog.csdnimg.cn/20190518142500199.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMzNDMwMDgz,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>点击<code>details</code>按钮进入详情页查看项目信息<br><img src="https://img-blog.csdnimg.cn/20190518142633617.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMzNDMwMDgz,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="添加安全验证"><a href="#添加安全验证" class="headerlink" title="添加安全验证"></a>添加安全验证</h2><h3 id="给server端添加"><a href="#给server端添加" class="headerlink" title="给server端添加"></a>给server端添加</h3><ul><li><p>需要添加的的依赖</p>  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 继承自spring-boot-admin-dependencies，给server添加登录页面 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>de.codecentric<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-admin-server-ui-login<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 引入springboot权限配置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><code>application.yml</code>文件添加<code>security.user.name</code>和<code>security.user.password</code>配置，指定账号密码<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">security:</span><br><span class="line">  user:</span><br><span class="line">    name: admin</span><br><span class="line">    password: 123456</span><br></pre></td></tr></table></figure></li></ul></li><li><p>服务端完整配置如下</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">server:</span><br><span class="line">  port: 8081</span><br><span class="line">security:</span><br><span class="line">  user:</span><br><span class="line">    name: admin</span><br><span class="line">    password: 123456</span><br></pre></td></tr></table></figure></li><li><p>添加Security的权限拦截，参考自spring-boot-admin官方文档 <a href="http://codecentric.github.io/spring-boot-admin/1.5.7/#_securing_spring_boot_admin_server" target="_blank" rel="noopener">http://codecentric.github.io/spring-boot-admin/1.5.7/#_securing_spring_boot_admin_server</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lx.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.builders.HttpSecurity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 权限拦截配置</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 段誉</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2019-05-17 13:04</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecurityConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">// Page with login form is served as /login.html and does a POST on /login</span></span><br><span class="line">    http.formLogin().loginPage(<span class="string">"/login.html"</span>).loginProcessingUrl(<span class="string">"/login"</span>).permitAll();</span><br><span class="line">    <span class="comment">// The UI does a POST on /logout on logout</span></span><br><span class="line">    http.logout().logoutUrl(<span class="string">"/logout"</span>);</span><br><span class="line">    <span class="comment">// The ui currently doesn't support csrf</span></span><br><span class="line">    http.csrf().disable();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Requests for the login page and the static assets are allowed</span></span><br><span class="line">    http.authorizeRequests()</span><br><span class="line">            .antMatchers(<span class="string">"/login.html"</span>, <span class="string">"/**/*.css"</span>, <span class="string">"/img/**"</span>, <span class="string">"/third-party/**"</span>)</span><br><span class="line">            .permitAll();</span><br><span class="line">    <span class="comment">// ... and any other request needs to be authorized</span></span><br><span class="line">    http.authorizeRequests().antMatchers(<span class="string">"/**"</span>).authenticated();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Enable so that the clients can authenticate via HTTP basic for registering</span></span><br><span class="line">    http.httpBasic();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置过后启动项目，如下图，输入之前配置的账号密码<code>admin</code>和<code>123456</code>即可登录成功<br><img src="https://img-blog.csdnimg.cn/2019051814572755.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMzNDMwMDgz,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190518145812338.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMzNDMwMDgz,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p></li><li><p>服务端配置过账号密码后客户端也需要添加配置，打开client的<code>application.yml</code>文件添加<code>spring.boot.admin.username</code>和<code>spring.boot.admin.password</code>设置要和server中设置的一致</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: client-jar</span><br><span class="line">  boot:</span><br><span class="line">    admin:</span><br><span class="line">      url: http:&#x2F;&#x2F;localhost:8081</span><br><span class="line">      # 指定连接服务端的账号密码</span><br><span class="line">      username: admin</span><br><span class="line">      password: 123456</span><br></pre></td></tr></table></figure></li><li><p>客户端完整配置如下</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">management:</span><br><span class="line">  context-path: &#x2F;client_jar</span><br><span class="line">  security:</span><br><span class="line">    enabled: true</span><br><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: client-jar</span><br><span class="line">  boot:</span><br><span class="line">    admin:</span><br><span class="line">      url: http:&#x2F;&#x2F;localhost:8081</span><br><span class="line">      username: admin</span><br><span class="line">      password: 123456</span><br><span class="line">server:</span><br><span class="line">  port: 8082</span><br></pre></td></tr></table></figure><p>然后再启动项目client项目就可以在server中看到了<br><img src="https://img-blog.csdnimg.cn/20190521140220639.png" alt="在这里插入图片描述"></p></li></ul><h3 id="给client端添加"><a href="#给client端添加" class="headerlink" title="给client端添加"></a>给client端添加</h3><p>需要添加的依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>打开<code>application.yml</code>文件，将<code>management.security.enabled</code>设置为<strong>true</strong>，表示开启安全验证，添加<code>security.user.username</code>、<code>security.user.password</code>和<code>security.basic.path</code>配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">management:</span><br><span class="line">  security:</span><br><span class="line">    enabled: true</span><br><span class="line">    </span><br><span class="line">security:</span><br><span class="line">  user:</span><br><span class="line">    # 设置访问客户端接口的账号密码</span><br><span class="line">    name: client</span><br><span class="line">    password: 123456</span><br><span class="line">  basic:</span><br><span class="line">    # 指定security拦截的路径 &#x2F;client_jar&#x2F;**：只拦截项目监控的相关接口</span><br><span class="line">    path: &#x2F;client_jar&#x2F;**</span><br></pre></td></tr></table></figure><p>重启项目，访问项目监听接口中的任意代码，发现会弹出登录弹窗,例如访问<code>/loggers</code>接口<br><img src="https://img-blog.csdnimg.cn/20190521135044996.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMzNDMwMDgz,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>输入配置的账号密码后即可正常返回数据<br><img src="https://img-blog.csdnimg.cn/20190521135121306.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMzNDMwMDgz,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>这个时候访问服务端监听页面发现<code>client-jar</code>客户端连接不上<img src="https://img-blog.csdnimg.cn/20190521135245563.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMzNDMwMDgz,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>是因为客户端也设置了账号密码但是在连接到服务端时没有传入账号密码导致的需要添加<code>spring.boot.admin.client.metadata.user.name</code>和<code>spring.boot.admin.client.metadata.user.password</code>传入设置的账号密码就可以了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  boot:</span><br><span class="line">    admin:</span><br><span class="line">      client:</span><br><span class="line">       # metadata传递的参数为map类，所以user.name和user.password不是user对象下的属性而是map的key值</span><br><span class="line">        metadata:</span><br><span class="line">          user.name: client</span><br><span class="line">          user.password: 123456</span><br></pre></td></tr></table></figure><p>完整配置信息如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">management:</span><br><span class="line">  context-path: &#x2F;client_jar</span><br><span class="line">  security:</span><br><span class="line">    enabled: true</span><br><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: client-jar</span><br><span class="line">  boot:</span><br><span class="line">    admin:</span><br><span class="line">      url: http:&#x2F;&#x2F;localhost:8081</span><br><span class="line">      username: admin</span><br><span class="line">      password: 123456</span><br><span class="line">      client:</span><br><span class="line">        metadata:</span><br><span class="line">          user.name: client</span><br><span class="line">          user.password: 123456</span><br><span class="line">server:</span><br><span class="line">  port: 8082</span><br><span class="line"></span><br><span class="line">security:</span><br><span class="line">  user:</span><br><span class="line">    name: client</span><br><span class="line">    password: 123456</span><br><span class="line">  basic:</span><br><span class="line">    path: &#x2F;client_jar&#x2F;**</span><br></pre></td></tr></table></figure><p>再重新client端，然后登陆server端页面，可以正常监听client端<br><img src="https://img-blog.csdnimg.cn/20190521140220639.png" alt="在这里插入图片描述"></p><h2 id="Demo地址"><a href="#Demo地址" class="headerlink" title="Demo地址"></a>Demo地址</h2><blockquote><p><a href="https://gitee.com/fengzxia/springboot-admin-and-actuator-learn" target="_blank" rel="noopener">https://gitee.com/fengzxia/springboot-admin-and-actuator-learn</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> Spring </category>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 项目监控 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在安装python第三方库lxml时报Could not install packages due to an EnvironmentError错误</title>
      <link href="/posts/10b78372.html"/>
      <url>/posts/10b78372.html</url>
      
        <content type="html"><![CDATA[<p>在安装python第三方库<code>lxml</code>时报错，信息如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Could not install packages due to an EnvironmentError: </span><br><span class="line">    HTTPSConnectionPool(host&#x3D;&#39;files.pythonhosted.org&#39;, port&#x3D;443): Max retries exceeded with url: </span><br><span class="line">    &#x2F;packages&#x2F;b8&#x2F;5a&#x2F;bb7f48b4e06ed60055c8bf2ea7d8259dae40a55dc03104cd7b0782699b9a&#x2F;lxml-4.3.3-cp37-cp37m-win_amd64.whl (Caused by ConnectTimeoutError(&lt;pip._vendor.urllib3.connection.VerifiedHTTPSConnection object at 0x000001F4B935A198&gt;, &#39;Connection to files.pythonhosted.org timed out. (connect timeout&#x3D;15)&#39;))</span><br></pre></td></tr></table></figure><p>原因是因为下载地址使用的是默认仓库地址需要梯子导致的，可以通过切换仓库地址解决：</p><ol><li><p>临时更改</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install 插件名字 -i https:&#x2F;&#x2F;pypi.tuna.tsinghua.edu.cn&#x2F;simple</span><br></pre></td></tr></table></figure></li><li><p>永久更改</p><ol><li>Windows<br> 文件路径：<code>C:\Users\Money\AppData\Local\pip\pip.ini</code></li><li>Linux<br> 文件路径：<code>~/.config/pip/pip.conf</code></li><li>注意:<ul><li>pip和pip3并存时，只需要修改<code>~/.pip/pip.conf</code>。</li><li>没有文件就创建一个</li></ul></li><li>修改的内容 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[global]</span><br><span class="line">index-url &#x3D; https:&#x2F;&#x2F;pypi.tuna.tsinghua.edu.cn&#x2F;simple</span><br></pre></td></tr></table></figure></li></ol></li><li><p>在<code>pycharm</code>中解决:</p><ol><li><p>打开 <code>settings-&gt;Project:reptile-&gt;Project Interpreter</code><br> [外链图片转存中…(img-AnPSSNpe-1576823145739)]</p></li><li><p>点击右边的加号<br> [外链图片转存中…(img-QaDYK7n6-1576823145740)]</p></li><li><p>点击<code>Manage Repositories</code>按钮，可以看到只有<code>https://pypi.python.org/simple</code>，<strong>截图有两个链接是因为我已经添加过<code>https://pypi.tuna.tsinghua.edu.cn/simple</code>地址</strong><br> [外链图片转存中…(img-vkPhovjV-1576823145741)]</p><ol start="4"><li><p>点击右边的加号或者选中<code>https://pypi.python.org/simple</code>链接点击编辑输入<code>https://pypi.tuna.tsinghua.edu.cn/simple</code>地址，点击ok，然后在第二步的页面输入想要安装的插件进行搜索，例如<code>lxml</code></p><p>[外链图片转存中…(img-UZRxn3Af-1576823145742)]</p></li></ol></li><li><p>选择刚才添加的链接进行install，即可安装成功</p></li></ol></li></ol>]]></content>
      
      
      <categories>
          
          <category> BUG </category>
          
          <category> 异常 </category>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> EnvironmentError错误 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows下安装MongoDB后启动服务时弹窗报错</title>
      <link href="/posts/43932a66.html"/>
      <url>/posts/43932a66.html</url>
      
        <content type="html"><![CDATA[<p>今天在安装MongoDB的时候总是到start service时弹出一个弹窗报错，错误信息如下<br><img src="https://img-blog.csdnimg.cn/2019042310073534.png" alt="在这里插入图片描述"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Service MongoDB Server&#39;(MongoDB)failed to start.</span><br><span class="line">Verify that you have sufficient privileges to start system</span><br><span class="line">services.</span><br><span class="line"></span><br><span class="line">Cancel Retry |ignore</span><br></pre></td></tr></table></figure><p>安装包的版本是<code>mongodb-win32-x86_64-2008plus-ssl-4.0.9-signed.msi</code></p><ul><li>在安装的时候可以手动的指定data数据保存地址，和log日志指定地址</li></ul><p>解决办法：</p><ol><li><p>先尝试使用命令的方式直接启动（<strong>要用管理员权限打开控制台</strong>），输入<code>mongod -dbpath D:\MongoDB的安装目录\data</code>，需要现有data目录才行<br>   <img src="https://img-blog.csdnimg.cn/20190423102208973.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMzNDMwMDgz,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>   <strong>想要像我这样不需要进入MongoDB的bin目录就执行MongoDB命令需要配置环境变量</strong><br>   <img src="https://img-blog.csdnimg.cn/2019042310270880.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMzNDMwMDgz,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p></li><li><p>打开一个新的控制台（<strong>也要用管理员权限打开</strong>）,键入<code>mongo</code>链接数据库，如下如图展示说明连接成功<br><img src="https://img-blog.csdnimg.cn/20190423102921319.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMzNDMwMDgz,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p></li><li><p>卸载之前安装后无法启动的MongoDB服务，找到该服务右键点击属性打开<br><img src="https://img-blog.csdnimg.cn/20190423103312484.png" alt="在这里插入图片描述"></p><pre><code>![在这里插入图片描述](https://img-blog.csdnimg.cn/20190423103354122.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMzNDMwMDgz,size_16,color_FFFFFF,t_70)在控制台输入`sc delete MongoDB`将该服务卸载，MongoDB是上边截图中的服务名称</code></pre></li><li><p>安装新服务，指定数据源和日志路径，</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongod -dbpath &quot;D:\MongoDB\data&quot; -logpath &quot;D:\MongoDB\log\MongoDB.log&quot; -install -serviceName &quot;MongoDB&quot;</span><br></pre></td></tr></table></figure><p> 安装成功后检查<code>MongoDB Server</code>的可执行文件路径，已经被修改成功<br> <img src="https://img-blog.csdnimg.cn/20190423104746459.png" alt="在这里插入图片描述"></p></li><li><p>右键选择启动服务，然后新打开控制台（<strong>需要用管理员权限打开</strong>）再尝试以<code>mongo</code>命令连接，如下图证明连接成功<br><img src="https://img-blog.csdnimg.cn/20190423105008598.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMzNDMwMDgz,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p></li><li><p>至此MongoDB安装完成</p></li><li><p>参考博客</p><blockquote><p><a href="https://blog.csdn.net/python_neophyte/article/details/82558314" target="_blank" rel="noopener">https://blog.csdn.net/python_neophyte/article/details/82558314</a><br><a href="https://www.jianshu.com/p/31541c6d374c" target="_blank" rel="noopener">https://www.jianshu.com/p/31541c6d374c</a></p></blockquote></li></ol>]]></content>
      
      
      <categories>
          
          <category> BUG </category>
          
          <category> 异常 </category>
          
          <category> DB </category>
          
          <category> NoSQL </category>
          
          <category> MongoDB </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MongoDB启动服务失败 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>windows下MongBD从官网下载速度很慢解决办法</title>
      <link href="/posts/bb5d726a.html"/>
      <url>/posts/bb5d726a.html</url>
      
        <content type="html"><![CDATA[<h1 id="MongDB下载地址"><a href="#MongDB下载地址" class="headerlink" title="MongDB下载地址"></a>MongDB下载地址</h1><blockquote><p><a href="https://www.mongodb.com/download-center/community" target="_blank" rel="noopener">https://www.mongodb.com/download-center/community</a></p></blockquote><p><img src="https://img-blog.csdnimg.cn/20190422155040994.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMzNDMwMDgz,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h1 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h1><h2 id="1-使用cmd命令ping-dl-mongodb-org得到ip地址。"><a href="#1-使用cmd命令ping-dl-mongodb-org得到ip地址。" class="headerlink" title="1.使用cmd命令ping dl.mongodb.org得到ip地址。"></a>1.使用cmd命令ping dl.mongodb.org得到ip地址。</h2><p><img src="https://img-blog.csdnimg.cn/20190422155122433.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMzNDMwMDgz,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="2-修改C-Windows-System32-drivers-etc-下hosts文件在末尾加上-52-206-222-245-dl-mongodb-org。重新打开浏览器下载。"><a href="#2-修改C-Windows-System32-drivers-etc-下hosts文件在末尾加上-52-206-222-245-dl-mongodb-org。重新打开浏览器下载。" class="headerlink" title="2.修改C:\Windows\System32\drivers\etc\ 下hosts文件在末尾加上 52.206.222.245 dl.mongodb.org。重新打开浏览器下载。"></a>2.修改<code>C:\Windows\System32\drivers\etc\</code> 下hosts文件在末尾加上 <code>52.206.222.245 dl.mongodb.org</code>。重新打开浏览器下载。</h2><ul><li><strong>这里必须将浏览器关闭重新才会生效</strong></li><li><strong>配置中的ip要根据自己ping到的是什么就填什么</strong><br><img src="https://img-blog.csdnimg.cn/20190422155401376.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMzNDMwMDgz,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><h2 id="3-再进行下载查看速度会有明显变化"><a href="#3-再进行下载查看速度会有明显变化" class="headerlink" title="3.再进行下载查看速度会有明显变化"></a>3.再进行下载查看速度会有明显变化</h2><img src="https://img-blog.csdnimg.cn/20190422155505874.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMzNDMwMDgz,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><blockquote><p>参考博客：<a href="https://www.jianshu.com/p/09500a0f3023" target="_blank" rel="noopener">https://www.jianshu.com/p/09500a0f3023</a></p></blockquote></li></ul>]]></content>
      
      
      <categories>
          
          <category> DB </category>
          
          <category> NoSQL </category>
          
          <category> 转载 </category>
          
          <category> MongoDB </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 下载慢 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用Spring Cache + Redis + Jackson Serializer缓存数据库查询结果中序列化问题的处理</title>
      <link href="/posts/f6f65c4b.html"/>
      <url>/posts/f6f65c4b.html</url>
      
        <content type="html"><![CDATA[<h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><p>我们希望通过缓存来减少对关系型数据库的查询次数，减轻数据库压力。在执行DAO类的<code>select***()</code>, <code>query***()</code>方法时，先从Redis中查询有没有缓存数据，如果有则直接从Redis拿到结果，如果没有再向数据库发起查询请求取数据。</p><h2 id="序列化问题"><a href="#序列化问题" class="headerlink" title="序列化问题"></a>序列化问题</h2><p>要把<code>对象</code>做为<code>key-value</code>对保存在redis中，就必须要解决对象的序列化问题。Spring Data Redis给我们提供了一些现成的方案：</p><ul><li><p><code>JdkSerializationRedisSerializer</code>. 使用JDK提供的序列化功能。 优点是反序列化时不需要提供类型信息(class)，但缺点是序列化后的结果非常庞大，是JSON格式的5倍左右，这样就会消耗redis服务器的大量内存。</p></li><li><p><code>Jackson2JsonRedisSerializer</code>. 使用Jackson库将对象序列化为JSON字符串。优点是速度快，序列化后的字符串短小精悍。但缺点也非常致命，那就是此类的构造函数中有一个类型参数，必须提供要序列化对象的类型信息(.class对象)。 通过查看源代码，发现其只在反序列化过程中用到了类型信息。</p></li><li><p><code>GenericJackson2JsonRedisSerializer</code>. 和 <code>Jackson2JsonRedisSerializer</code> 类似。但是它不需要提供序列化对象的类型信息。</p></li></ul><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>如果用方案一，就必须付出缓存多占用4倍内存的代价，实在承受不起。  </p><p>如果用方案二，则必须给每一种domain对象都配置一个Serializer，即如果我的应用里有100种domain对象，那就必须在spring配置文件中配置100个Jackson2JsonRedisSerializer，这显然也是不现实的。</p><p>如果用方案三，就是为了解决Jackson必须提供类型信息的问题，可以同时支持多种不同类型的domain对象。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>所以选择使用<code>GenericJackson2JsonRedisSerializer</code>来配置序列化。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> RedisCacheManager <span class="title">jsonCacheManager</span><span class="params">(RedisConnectionFactory factory)</span> </span>&#123;</span><br><span class="line">    RedisCacheConfiguration config = RedisCacheConfiguration.defaultCacheConfig()</span><br><span class="line">            .serializeValuesWith(RedisSerializationContext.SerializationPair</span><br><span class="line">                .fromSerializer(<span class="keyword">new</span> GenericJackson2JsonRedisSerializer()));</span><br><span class="line">    <span class="keyword">return</span> RedisCacheManager.builder(factory)</span><br><span class="line">            .cacheDefaults(config)</span><br><span class="line">            .build();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Jackson2JsonRedisSerializer和GenericJackson2JsonRedisSerializer的区别"><a href="#Jackson2JsonRedisSerializer和GenericJackson2JsonRedisSerializer的区别" class="headerlink" title="Jackson2JsonRedisSerializer和GenericJackson2JsonRedisSerializer的区别"></a>Jackson2JsonRedisSerializer和GenericJackson2JsonRedisSerializer的区别</h2><h3 id="一、使用Jackson2JsonRedisSerializer序列化反序列化带泛型的List数据"><a href="#一、使用Jackson2JsonRedisSerializer序列化反序列化带泛型的List数据" class="headerlink" title="一、使用Jackson2JsonRedisSerializer序列化反序列化带泛型的List数据"></a>一、使用Jackson2JsonRedisSerializer序列化反序列化带泛型的List数据</h3><p>1、使用Jackson2JsonRedisSerializer序列化value的代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">redisTemplate.setKeySerializer(<span class="keyword">new</span> StringRedisSerializer());</span><br><span class="line">redisTemplate.setValueSerializer(<span class="keyword">new</span> Jackson2JsonRedisSerializer(Object<span class="class">.<span class="keyword">class</span>))</span>;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">User user = <span class="keyword">new</span> User();</span><br><span class="line">user.setUserId(<span class="number">1</span>);</span><br><span class="line">user.setUsername(<span class="string">"张三"</span>);</span><br><span class="line">List&lt;User&gt; userList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">userList.add(user);</span><br><span class="line"><span class="comment">//不能直接将对象存储进redis中否则在进行反序列化的时候会报</span></span><br><span class="line"><span class="comment">// java.lang.ClassCastException: java.util.LinkedHashMap cannot be cast to com.lx.entity.User错误</span></span><br><span class="line"><span class="comment">//可以先转为json字符串再进行存储</span></span><br><span class="line">String value = JSON.toJSONString(userList);</span><br><span class="line">redisTemplate.opsForValue().set(<span class="string">"jackson2JsonRedisSerializer"</span>, value, <span class="number">5</span>,</span><br><span class="line">        TimeUnit.MINUTES);</span><br></pre></td></tr></table></figure><p>2、使用Jackson2JsonRedisSerializer序列化后的数据形式</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">"userId"</span>:<span class="number">1</span>,</span><br><span class="line">    <span class="attr">"username"</span>:<span class="string">"张三"</span></span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>3、使用Jackson2JsonRedisSerializer反序列化时报错</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">List&lt;User&gt; userListRedis = redisTemplate.opsForValue().get(<span class="string">"jackson2JsonRedisSerializer"</span>);</span><br><span class="line">userListRedis.forEach(u -&gt; System.out.println(JSON.toJSONString(u)));</span><br></pre></td></tr></table></figure><p>错误信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java.lang.ClassCastException: java.util.LinkedHashMap cannot be cast to com.lx.entity.User</span><br></pre></td></tr></table></figure><ul><li>原因: <strong>序列化带泛型的数据时，会以map的结构进行存储，反序列化时不能将map解析成对象。</strong></li></ul><p>4、解决方案：序列化存储时，转成JSON字符串<br>使用<code>jackson</code>或者<code>fastjson</code>都可以，我这里使用的是<code>fastjson</code>,<br>需要的依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.47<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">User user = <span class="keyword">new</span> User();</span><br><span class="line">user.setUserId(<span class="number">1</span>);</span><br><span class="line">user.setUsername(<span class="string">"张三"</span>);</span><br><span class="line">List&lt;User&gt; userList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">userList.add(user);</span><br><span class="line"></span><br><span class="line">redisTemplate.opsForValue().set(<span class="string">"jackson2JsonRedisSerializer"</span>, JSON.toJSONString(userList), <span class="number">5</span>, TimeUnit.MINUTES);</span><br><span class="line"></span><br><span class="line">String res = (String) redisTemplate.opsForValue().get(<span class="string">"jackson2JsonRedisSerializer"</span>);</span><br><span class="line">JSON.parseArray(res, User<span class="class">.<span class="keyword">class</span>).<span class="title">forEach</span>(<span class="title">u</span> -&gt; <span class="title">System</span>.<span class="title">out</span>.<span class="title">println</span>(<span class="title">JSON</span>.<span class="title">toJSONString</span>(<span class="title">u</span>)))</span>;</span><br></pre></td></tr></table></figure><h3 id="二、使用GenericJackson2JsonRedisSerializer序列化反序列化带泛型的List数据"><a href="#二、使用GenericJackson2JsonRedisSerializer序列化反序列化带泛型的List数据" class="headerlink" title="二、使用GenericJackson2JsonRedisSerializer序列化反序列化带泛型的List数据"></a>二、使用GenericJackson2JsonRedisSerializer序列化反序列化带泛型的List数据</h3><p>1、使用GenericJackson2JsonRedisSerializer序列化value的代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">redisTemplate.setKeySerializer(<span class="keyword">new</span> StringRedisSerializer());</span><br><span class="line">redisTemplate.setValueSerializer(<span class="keyword">new</span> GenericJackson2JsonRedisSerializer());</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">User user = <span class="keyword">new</span> User();</span><br><span class="line">user.setUserId(<span class="number">1</span>);</span><br><span class="line">user.setUsername(<span class="string">"李四"</span>);</span><br><span class="line">List&lt;User&gt; userList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">userList.add(user);</span><br><span class="line">redisTemplate.opsForValue().set(<span class="string">"genericJackson2JsonRedisSerializer"</span>,userList,<span class="number">5</span>,TimeUnit.MINUTES);</span><br></pre></td></tr></table></figure><p>2、使用GenericJackson2JsonRedisSerializer序列化后的数据形式</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">    <span class="string">"java.util.ArrayList"</span>,</span><br><span class="line">    [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"@class"</span>: <span class="string">"com.lx.entity.User"</span>,</span><br><span class="line">            <span class="attr">"userId"</span>: <span class="number">1</span>,</span><br><span class="line">            <span class="attr">"username"</span>: <span class="string">"李四"</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>3、使用GenericJackson2JsonRedisSerializer可以正常反序列化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">List&lt;User&gt; userListRedis = (List&lt;User&gt;) redisTemplate.opsForValue().get(<span class="string">"genericJackson2JsonRedisSerializer"</span>);</span><br><span class="line">userListRedis.forEach(u -&gt; System.out.println(JSON.toJSONString(u)));</span><br></pre></td></tr></table></figure><p>4、可以正常反序列化的原因<br>使用<code>GenericJackson2JsonRedisSerializer</code>序列化时，会保存序列化的对象的包名和类名，反序列化时以这个作为标示就可以反序列化成指定的对象。</p><p>5、也可以以JSON字符串保存</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">redisTemplate.opsForValue().set(<span class="string">"genericJackson2JsonRedisSerializer"</span>,JSON.toJSONString(userList),<span class="number">5</span>,TimeUnit.MINUTES);</span><br><span class="line"></span><br><span class="line">List&lt;User&gt; userListRedis = (List&lt;User&gt;) redisTemplate.opsForValue().get(<span class="string">"genericJackson2JsonRedisSerializer"</span>);</span><br><span class="line">userListRedis.forEach(u -&gt; System.out.println(JSON.toJSONString(u)));</span><br></pre></td></tr></table></figure><h3 id="四、GenericJackson2JsonRedisSerializer和Jackson2JsonRedisSerializerdo效率"><a href="#四、GenericJackson2JsonRedisSerializer和Jackson2JsonRedisSerializerdo效率" class="headerlink" title="四、GenericJackson2JsonRedisSerializer和Jackson2JsonRedisSerializerdo效率"></a>四、GenericJackson2JsonRedisSerializer和Jackson2JsonRedisSerializerdo效率</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">User user = <span class="keyword">new</span> User();</span><br><span class="line">user.setUserId(<span class="number">1</span>);</span><br><span class="line">user.setUsername(<span class="string">"李四"</span>);</span><br><span class="line">List&lt;User&gt; userList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++) &#123;</span><br><span class="line">  userList.add(user);</span><br><span class="line">&#125;</span><br><span class="line">redisTemplate.opsForValue().set(<span class="string">"serializer"</span>, JSON.toJSONString(userList),<span class="number">5</span>,TimeUnit.MINUTES);</span><br><span class="line"><span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">System.out.println(<span class="string">"Serializer序列化需要的时间:"</span> + (end - start));</span><br></pre></td></tr></table></figure><p>测试后:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">jackson2JsonRedisSerializer序列化需要的时间:687</span><br><span class="line">genericJackson2JsonRedisSerializer序列化需要的时间:22</span><br></pre></td></tr></table></figure><h3 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h3><ul><li><p>使用<code>Jackson2JsonRedisSerializer</code>需要指明序列化的类Class，可以使用<code>Obejct.class</code></p></li><li><p>使用<code>GenericJackson2JsonRedisSerializer</code>和<code>Jackson2JsonRedisSerializerdo</code>都可以正常序列化非泛型数组对象。<code>GenericJackson2JsonRedisSerializer</code>也可以正常反序列化非泛型数组对象，但是<code>Jackson2JsonRedisSerializerdo</code>因为“序列化带泛型的数据时，会以map的结构进行存储，反序列化时不能将map解析成对象”，所以不能反序列化，解决办法: 存储以JSON字符串存储</p></li><li><p>使用<code>GenericJacksonRedisSerializer</code>比<code>Jackson2JsonRedisSerializer</code>效率高</p></li><li><p><code>GenericJacksonRedisSerializer</code>和<code>Jackson2JsonRedisSerializer</code>都是以JSON格式去存储数据，都可以作为Redis的序列化方式</p></li></ul><h2 id="demo测试地址"><a href="#demo测试地址" class="headerlink" title="demo测试地址"></a>demo测试地址</h2><blockquote><p><a href="https://gitee.com/fengzxia/spring-boot-redis-cache/blob/master/src/test/java/com/lx/TestSerializer.java" target="_blank" rel="noopener">https://gitee.com/fengzxia/spring-boot-redis-cache/blob/master/src/test/java/com/lx/TestSerializer.java</a></p></blockquote><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><blockquote><p><a href="https://blog.csdn.net/neosmith/article/details/46800235" target="_blank" rel="noopener">https://blog.csdn.net/neosmith/article/details/46800235</a><br><a href="https://blog.csdn.net/bai_bug/article/details/81222519" target="_blank" rel="noopener">https://blog.csdn.net/bai_bug/article/details/81222519</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> Spring </category>
          
          <category> Redis </category>
          
          <category> Jackson </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 序列化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot+Redis作为二级缓存整合</title>
      <link href="/posts/90da3b9e.html"/>
      <url>/posts/90da3b9e.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>原文链接：<a href="https://juejin.im/post/5c9e23e36fb9a05e58493c50?utm_source=gold_browser_extension" target="_blank" rel="noopener">https://juejin.im/post/5c9e23e36fb9a05e58493c50?utm_source=gold_browser_extension</a></p></blockquote><h2 id="一、redis简介"><a href="#一、redis简介" class="headerlink" title="一、redis简介"></a>一、redis简介</h2><h3 id="1、概述"><a href="#1、概述" class="headerlink" title="1、概述"></a>1、概述</h3><p>  Redis 是一个高性能的key-value数据库。 redis的出现，很大程度补偿了memcached这类key/value存储的不足，在部 分场合可以对关系数据库起到很好的补充作用。它提供了Java，C/C++，C#，PHP，JavaScript，Perl，Object-C，Python，Ruby，Erlang等客户端，使用很方便。</p><h3 id="2、优点"><a href="#2、优点" class="headerlink" title="2、优点"></a>2、优点</h3><ol><li>数据操作全在内存，读写性能强。</li><li>数据结构丰富，支持string，hash，list，set及zset(sorted set)。</li><li>支持主从复制，以及数据持久化等<h2 id="二、redis的搭建"><a href="#二、redis的搭建" class="headerlink" title="二、redis的搭建"></a>二、redis的搭建</h2><h3 id="1、安装"><a href="#1、安装" class="headerlink" title="1、安装"></a>1、安装</h3>按顺序执行如下命令:<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">wget http:&#x2F;&#x2F;download.redis.io&#x2F;releases&#x2F;redis-5.0.4.tar.gz</span><br><span class="line">tar xzf redis-5.0.4.tar.gz</span><br><span class="line">cd redis-5.0.4</span><br><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure><h3 id="2、测试"><a href="#2、测试" class="headerlink" title="2、测试"></a>2、测试</h3>开启服务<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-server</span><br></pre></td></tr></table></figure>启动客户机交互测试，默认6379端口，没有密码<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">redis-cli -p 6379</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; set k1 k2</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; get k1</span><br><span class="line">&quot;k2&quot;</span><br><span class="line">127.0.0.1:6379&gt;</span><br></pre></td></tr></table></figure></li></ol><h2 id="三、基本环境配置"><a href="#三、基本环境配置" class="headerlink" title="三、基本环境配置"></a>三、基本环境配置</h2><h4 id="1、pom依赖"><a href="#1、pom依赖" class="headerlink" title="1、pom依赖"></a>1、pom依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--指定jdk版本--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--统一编码格式--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">mybatis.version</span>&gt;</span>2.0.0<span class="tag">&lt;/<span class="name">mybatis.version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-cache<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mybatis.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2、yml配置"><a href="#2、yml配置" class="headerlink" title="2、yml配置"></a>2、yml配置</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">server:</span><br><span class="line">  port: 80</span><br><span class="line">spring:</span><br><span class="line">  http:</span><br><span class="line">    encoding:</span><br><span class="line">      charset: UTF-8</span><br><span class="line">  cache:</span><br><span class="line">    type: redis</span><br><span class="line">  redis:</span><br><span class="line">    host: 127.0.0.1</span><br><span class="line">    port: 9455</span><br><span class="line">    password: 123456</span><br><span class="line">  datasource:</span><br><span class="line">    driver-class-name: com.mysql.jdbc.Driver</span><br><span class="line">    username: root</span><br><span class="line">    password: root</span><br><span class="line">    url: jdbc:mysql:&#x2F;&#x2F;127.0.0.1:3306&#x2F;redis-cache?useSSL&#x3D;false</span><br><span class="line">logging:</span><br><span class="line">  level:</span><br><span class="line">    com.lx: debug</span><br></pre></td></tr></table></figure><h4 id="3、测试连接"><a href="#3、测试连接" class="headerlink" title="3、测试连接"></a>3、测试连接</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lx;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.StringRedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringRunner;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RunWith</span>(SpringRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">SpringBootTest</span></span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">RediscacheApplicationTest</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Autowired</span></span><br><span class="line">  <span class="keyword">private</span> StringRedisTemplate stringRedisTemplate;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Test</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    stringRedisTemplate.opsForValue().set(<span class="string">"k1"</span>, <span class="string">"v1"</span>);</span><br><span class="line">    System.out.println(stringRedisTemplate.opsForValue().get(<span class="string">"k1"</span>));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="四、三个基本缓存注解"><a href="#四、三个基本缓存注解" class="headerlink" title="四、三个基本缓存注解"></a>四、三个基本缓存注解</h2><h4 id="1、-Cacheable"><a href="#1、-Cacheable" class="headerlink" title="1、@Cacheable"></a>1、@Cacheable</h4><ul><li><p><code>@Cacheable</code>可以标记在一个方法上，也可以标记在一个类上。当标记在一个方法上时表示该方法是支持缓存的，当标记在一个类上时则表示该类所有的方法都是支持缓存的。对于一个支持缓存的方法，Spring会在其被调用后将其返回值缓存起来，以保证下次利用同样的参数来执行该方法时可以直接从缓存中获取结果，而不需要再次执行该方法。</p></li><li><p>判断缓存中如果存在则直接获取，不存在则新增</p><h4 id="2、-CachePut"><a href="#2、-CachePut" class="headerlink" title="2、@CachePut"></a>2、@CachePut</h4></li><li><p><code>@CachePut</code>可以声明一个方法支持缓存功能。与<code>@Cacheable</code>不同的是使用<code>@CachePut</code>标注的方法在执行前不会去检查缓存中是否存在之前执行过的结果，而是每次都会执行该方法，并将执行结果以键值对的形式存入指定的缓存中。</p></li><li><p>不判断是否新增，每次都将查询到的数据存入缓存中 </p></li></ul><h4 id="3、-CacheEvict"><a href="#3、-CacheEvict" class="headerlink" title="3、@CacheEvict"></a>3、@CacheEvict</h4><ul><li><p><code>@CacheEvict</code>是用来标注在需要清除缓存元素的方法或类上的。当标记在一个类上时表示其中所有的方法的执行都会触发缓存的清除操作。<code>@CacheEvict</code>可以指定的属性有<code>value、key、condition、allEntries和beforeInvocation</code>。</p></li><li><p>每次执行都会删除指定的缓存</p><h4 id="三者共有属性"><a href="#三者共有属性" class="headerlink" title="三者共有属性"></a>三者共有属性</h4></li><li><p><strong>value(cacheName)</strong><br><code>@Cacheable、@CachePut</code>标注时表示生成的缓存的名称，<code>@CacheEvict</code>标注时表示将要清空的缓存的名称。</p></li><li><p><strong>key</strong><br>在同一名称（类别）下的缓存，需要唯一的key值来标识唯一的缓存，如未指定则会使用默认策略生成的key。</p></li><li><p><strong>condition</strong><br>表示缓存操作发生的条件。</p></li></ul><h4 id="CacheEvict的allEntries和beforeInvocation属性"><a href="#CacheEvict的allEntries和beforeInvocation属性" class="headerlink" title="@CacheEvict的allEntries和beforeInvocation属性"></a>@CacheEvict的allEntries和beforeInvocation属性</h4><ul><li><p><strong>allEntries</strong><br>  allEntries是boolean类型，表示是否需要清除同一名称的缓存中的所有元素。默认为false，表示不需要。当指定了allEntries为true时，Spring Cache将忽略指定的key，清除所有同一名称的缓存。</p></li><li><p><strong>beforeInvocation</strong><br>  清除操作默认是在对应方法成功执行之后触发的，即方法如果因为抛出异常而未能成功返回时也不会触发清除操作。使用beforeInvocation可以改变触发清除操作的时间，当我们指定该属性值为true时，Spring会在调用该方法之前清除缓存中的指定元素。</p></li></ul><h4 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Cacheable</span>(cacheNames = <span class="string">"User"</span>, key = <span class="string">"#userId"</span>)</span><br><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/testCacheable/&#123;userId&#125;"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">testCacheable</span><span class="params">(@PathVariable(<span class="string">"userId"</span>)</span> Integer userId) </span>&#123;</span><br><span class="line">  <span class="comment">//方法体</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="五、demo地址"><a href="#五、demo地址" class="headerlink" title="五、demo地址"></a>五、demo地址</h2><blockquote><p><a href="https://gitee.com/fengzxia/spring-boot-redis-cache" target="_blank" rel="noopener">https://gitee.com/fengzxia/spring-boot-redis-cache</a>  </p></blockquote><p>实体类等内容不再展示， 这里只展示使用缓存注解的controller代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lx.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.lx.dao.UserDao;</span><br><span class="line"><span class="keyword">import</span> com.lx.entity.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cache.annotation.CacheEvict;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cache.annotation.CachePut;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cache.annotation.Cacheable;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PathVariable;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PostMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用户操作</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 段誉</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2019-04-11 9:52</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Autowired</span></span><br><span class="line">  <span class="keyword">private</span> UserDao userDao;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@PostMapping</span>(<span class="string">"user"</span>)</span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">userAdd</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> userDao.userInsert(user) != <span class="number">0</span> ? <span class="string">"success"</span> : <span class="string">"fail"</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@desc</span> 测试CachePut注解</span></span><br><span class="line"><span class="comment">   * 缓存名字为"User","userId"作为key</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@Author</span> 段誉</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@Date</span> 2019/4/11 9:56</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@method</span></span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="meta">@Cacheable</span>(cacheNames = <span class="string">"User"</span>, key = <span class="string">"#userId"</span>)</span><br><span class="line">  <span class="meta">@GetMapping</span>(<span class="string">"/testCacheable/&#123;userId&#125;"</span>)</span><br><span class="line">  <span class="function"><span class="keyword">public</span> User <span class="title">testCacheable</span><span class="params">(@PathVariable(<span class="string">"userId"</span>)</span> Integer userId) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> userDao.userQuery(userId);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@desc</span> 缓存名字为"User","userId"作为key</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@Author</span> 段誉</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@Date</span> 2019/4/11 9:56</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@method</span></span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="meta">@CachePut</span>(cacheNames = <span class="string">"User"</span>, key = <span class="string">"#userId"</span>)</span><br><span class="line">  <span class="meta">@GetMapping</span>(<span class="string">"/testCachePut/&#123;userId&#125;"</span>)</span><br><span class="line">  <span class="function"><span class="keyword">public</span> User <span class="title">testCachePut</span><span class="params">(@PathVariable(<span class="string">"userId"</span>)</span> Integer userId) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> userDao.userQuery(userId);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@desc</span> 测试CacheEvict注解清空指定用户缓存</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@Author</span> 段誉</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@Date</span> 2019/4/11 9:56</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@method</span></span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="meta">@CacheEvict</span>(cacheNames = <span class="string">"User"</span>, key = <span class="string">"#userId"</span>)</span><br><span class="line">  <span class="meta">@GetMapping</span>(<span class="string">"/testCacheEvict/&#123;userId&#125;"</span>)</span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">testCacheEvict</span><span class="params">(@PathVariable(<span class="string">"userId"</span>)</span> Integer userId) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"cache for "</span> + userId + <span class="string">" has been flushed"</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@desc</span> 测试CacheEvict注解的allEntries属性清空所有用户缓存</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@Author</span> 段誉</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@Date</span> 2019/4/11 9:56</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@method</span></span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="meta">@CacheEvict</span>(cacheNames = <span class="string">"User"</span>, allEntries = <span class="keyword">true</span>)</span><br><span class="line">  <span class="meta">@GetMapping</span>(<span class="string">"/testAllEntries"</span>)</span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">testAllEntries</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"All caches have been flushed"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>需要在<code>Application.class</code>类上添加<code>@EnableCaching</code>注解后才能使配置的缓存生效</strong></li></ul><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p><strong>返回的对象必须要有一个无参构造函数才能正常返回结果否则报如下错误</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[&#x2F;].[dispatcherServlet]:</span><br><span class="line">175 - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; </span><br><span class="line">nested exception is org.springframework.data.redis.serializer.SerializationException: Could not read JSON: </span><br><span class="line">Cannot construct instance of &#96;com.leimo.response.Result&#96; (no Creators, like default construct, exist): </span><br><span class="line">cannot deserialize from Object value (no delegate- or property-based Creator)</span><br></pre></td></tr></table></figure><h2 id="六、CacheManager的定制"><a href="#六、CacheManager的定制" class="headerlink" title="六、CacheManager的定制"></a>六、CacheManager的定制</h2><h3 id="1、未定制前"><a href="#1、未定制前" class="headerlink" title="1、未定制前"></a>1、未定制前</h3><p>当我们使用引入redis的starter时，容器中默认使用的是<code>RedisCacheManager</code>。它在操作redis时使用的是<code>RedisTemplate&lt;Object, Object&gt;</code>,默认采用JDK的序列化机制，例如redis中查看用户的缓存：<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pLmxvbGkubmV0LzIwMTkvMDQvMTEvNWNhZWFkNDU3ZjFhNi5wbmc" alt="UTOOLS1554951491908.png"></p><p>我们可以通过定制CacheManager改变采取的序列化机制。</p><h3 id="2、进行定制"><a href="#2、进行定制" class="headerlink" title="2、进行定制"></a>2、进行定制</h3><h4 id="配置类"><a href="#配置类" class="headerlink" title="配置类"></a>配置类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.cache.RedisCacheConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.cache.RedisCacheManager;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.connection.RedisConnectionFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.serializer.GenericJackson2JsonRedisSerializer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.serializer.RedisSerializationContext;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisConfig</span> </span>&#123;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@desc</span> 序列化缓存定制</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@Author</span> 段誉</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@Date</span> 2019/4/11 13:01</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@method</span></span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="meta">@Bean</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> RedisCacheManager <span class="title">jsonCacheManager</span><span class="params">(RedisConnectionFactory factory)</span> </span>&#123;</span><br><span class="line">    RedisCacheConfiguration config = RedisCacheConfiguration.defaultCacheConfig()</span><br><span class="line">            .serializeValuesWith(RedisSerializationContext.SerializationPair</span><br><span class="line">                .fromSerializer(<span class="keyword">new</span> GenericJackson2JsonRedisSerializer()));</span><br><span class="line">    <span class="keyword">return</span> RedisCacheManager.builder(factory)</span><br><span class="line">            .cacheDefaults(config)</span><br><span class="line">            .build();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>缓存之后查看<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pLmxvbGkubmV0LzIwMTkvMDQvMTEvNWNhZWNkNTMwM2IwNy5wbmc" alt="UTOOLS1554959697256.png"></p><p>到此，已经完成Json的序列化。其他配置可根据<code>RedisCacheConfiguration</code>中的不同方法配置。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> Spring </category>
          
          <category> SpringBoot </category>
          
          <category> Redis </category>
          
          <category> 转载 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二级缓存 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决java.lang.IllegalStateException: Unable to find a @SpringBootConfiguration, you need to use错误</title>
      <link href="/posts/c83b5e46.html"/>
      <url>/posts/c83b5e46.html</url>
      
        <content type="html"><![CDATA[<p>今天在学习springboot结合redis实现二级缓存时，项目依赖引入完成后想要测试redis是否可以连接成功，结果在测试时出现如下错误日志</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">java.lang.IllegalStateException: Unable to find a @SpringBootConfiguration, you need to use @ContextConfiguration or @SpringBootTest(classes&#x3D;...) with your test</span><br><span class="line"></span><br><span class="line">at org.springframework.util.Assert.state(Assert.java:73)</span><br><span class="line">at org.springframework.boot.test.context.SpringBootTestContextBootstrapper.getOrFindConfigurationClasses(SpringBootTestContextBootstrapper.java:243)</span><br><span class="line">at org.springframework.boot.test.context.SpringBootTestContextBootstrapper.processMergedContextConfiguration(SpringBootTestContextBootstrapper.java:155)</span><br><span class="line">at org.springframework.test.context.support.AbstractTestContextBootstrapper.buildMergedContextConfiguration(AbstractTestContextBootstrapper.java:395)</span><br><span class="line">at org.springframework.test.context.support.AbstractTestContextBootstrapper.buildDefaultMergedContextConfiguration(AbstractTestContextBootstrapper.java:312)</span><br><span class="line">at org.springframework.test.context.support.AbstractTestContextBootstrapper.buildMergedContextConfiguration(AbstractTestContextBootstrapper.java:265)</span><br><span class="line">at org.springframework.test.context.support.AbstractTestContextBootstrapper.buildTestContext(AbstractTestContextBootstrapper.java:108)</span><br><span class="line">at org.springframework.boot.test.context.SpringBootTestContextBootstrapper.buildTestContext(SpringBootTestContextBootstrapper.java:99)</span><br><span class="line">at org.springframework.test.context.TestContextManager.&lt;init&gt;(TestContextManager.java:139)</span><br><span class="line">at org.springframework.test.context.TestContextManager.&lt;init&gt;(TestContextManager.java:124)</span><br></pre></td></tr></table></figure><p>测试用例代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * redis连接测试</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 段誉</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2019-04-11 9:27</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RunWith</span>(SpringRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">SpringBootTest</span></span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">RediscacheApplicationTest</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Autowired</span></span><br><span class="line">  <span class="keyword">private</span> StringRedisTemplate stringRedisTemplate;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Test</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    stringRedisTemplate.opsForValue().set(<span class="string">"k1"</span>, <span class="string">"v1"</span>);</span><br><span class="line">    System.out.println(stringRedisTemplate.opsForValue().get(<span class="string">"k1"</span>));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><p>是因为我在搭建好springboot项目后没有创建<code>Application.java</code>项目启动类导致的</p><h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><p>创建完<code>Application.java</code>后，再重新运行测试类正常运行<br><img src="https://img-blog.csdnimg.cn/20190411094001939.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMzNDMwMDgz,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="参考博客"><a href="#参考博客" class="headerlink" title="参考博客"></a>参考博客</h2><blockquote><p><a href="https://blog.csdn.net/weixin_39220472/article/details/80206449" target="_blank" rel="noopener">https://blog.csdn.net/weixin_39220472/article/details/80206449</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> Spring </category>
          
          <category> SpringBoot </category>
          
          <category> BUG </category>
          
          <category> 异常 </category>
          
          <category> 转载 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IllegalStateException </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot邮件发送</title>
      <link href="/posts/4d14a8a8.html"/>
      <url>/posts/4d14a8a8.html</url>
      
        <content type="html"><![CDATA[<h2 id="添加依赖依赖"><a href="#添加依赖依赖" class="headerlink" title="添加依赖依赖"></a>添加依赖依赖</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--邮件发送需要的依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-mail<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--邮件发送模板需要的依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--web请求接口用到--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h2><p>在<code>application.yml</code>中配置发送邮件相关的参数，具体如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  mail:</span><br><span class="line">    host: smtp.qq.com</span><br><span class="line">    # 填入自己申请的邮箱信息</span><br><span class="line">    username:</span><br><span class="line">    password:</span><br><span class="line">    default-encoding: UTF-8</span><br></pre></td></tr></table></figure><p>重要的参数就这些，其它的使用默认的即可，以下为解释：</p><ul><li><code>host</code>: 邮箱服务器地址，这个根据自己使用的什么邮箱有区别，比如:  <ol><li><code>smtp.163.com</code>: 163邮箱</li><li><code>smtp.126.com</code>: 126邮箱</li><li><code>smtp.qq.com</code>: qq邮箱</li></ol></li><li><code>username</code>: 邮箱登录的用户名</li><li><code>password</code>: 第三方登陆授权码（需要自己在邮箱中申请）</li><li><code>default-encoding</code>: 编码方式</li></ul><h2 id="POP3-SMTP-服务"><a href="#POP3-SMTP-服务" class="headerlink" title="POP3/SMTP 服务"></a>POP3/SMTP 服务</h2><p>上面提到了授权码的概念，首先要明确一个概念就是授权码跟我们直接登陆邮箱的密码不是一样的，授权码可以理解为第三方客户端登陆邮箱的密码，要想获取授权码需要我们去自己所用邮箱的官网设置开启 <code>POP3/SMTP</code>以及<code>IMAP/SMTP</code>服务，我这里就以自己使用的<code>qq</code>账号为例介绍打开该服务以及获取授权码的步骤，如图：<br><img src="https://img-blog.csdnimg.cn/20190408205742344.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMzNDMwMDgz,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190408205750542.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMzNDMwMDgz,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>登陆qq邮箱，按照图示步骤进行操作，在选择了服务之后会弹窗展示授权码，这里的授权码就是上边配置文件中<code>password</code>需要填写的值(只写<code>IMAP/SMTP</code>的授权码就可以)。</p><h2 id="发送不同格式的邮件"><a href="#发送不同格式的邮件" class="headerlink" title="发送不同格式的邮件"></a>发送不同格式的邮件</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MailServiceImpl</span> <span class="keyword">implements</span> <span class="title">IMailService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 发送邮件接口</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="meta">@Autowired</span></span><br><span class="line">  <span class="keyword">private</span> JavaMailSender jms;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 发送模板邮件时解析模板</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="meta">@Autowired</span></span><br><span class="line">  <span class="keyword">private</span> TemplateEngine templateEngine;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 读取配置文件中的邮件发送者账号</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="meta">@Value</span>(<span class="string">"$&#123;spring.mail.username&#125;"</span>)</span><br><span class="line">  <span class="keyword">private</span> String from;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 简单文本邮件</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> toUser 邮件接收者</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">simpleMil</span><span class="params">(String toUser)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//初始化简单的邮件对象</span></span><br><span class="line">    SimpleMailMessage message = <span class="keyword">new</span> SimpleMailMessage();</span><br><span class="line">    <span class="comment">//邮件发送者</span></span><br><span class="line">    message.setFrom(from);</span><br><span class="line">    <span class="comment">//邮件接收者</span></span><br><span class="line">    message.setTo(toUser);</span><br><span class="line">    <span class="comment">//邮件标题</span></span><br><span class="line">    message.setSubject(<span class="string">"文字格式邮件"</span>);</span><br><span class="line">    <span class="comment">//邮件内容</span></span><br><span class="line">    message.setText(<span class="string">"文字格式内容"</span>);</span><br><span class="line">    <span class="comment">//发送邮件</span></span><br><span class="line">    jms.send(message);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * html邮件</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">htmlMail</span><span class="params">(String toUser)</span> <span class="keyword">throws</span> MessagingException </span>&#123;</span><br><span class="line">    MimeMessage message = jms.createMimeMessage();</span><br><span class="line">    MimeMessageHelper helper = <span class="keyword">new</span> MimeMessageHelper(message, <span class="keyword">true</span>);</span><br><span class="line">    helper.setFrom(from);</span><br><span class="line">    helper.setTo(toUser);</span><br><span class="line">    helper.setSubject(<span class="string">"html格式标题"</span>);</span><br><span class="line">    String content = <span class="string">"&lt;p style='color:yellow;'&gt;这是一封html格式的文件&lt;/p&gt;&lt;h1&gt;这是一封html格式的文件&lt;/h1&gt;"</span>;</span><br><span class="line">    <span class="comment">//true表示以html格式发送邮件</span></span><br><span class="line">    helper.setText(content, <span class="keyword">true</span>);</span><br><span class="line">    jms.send(message);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 带附件邮件</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">attachmentMail</span><span class="params">(String toUser)</span> <span class="keyword">throws</span> MessagingException </span>&#123;</span><br><span class="line">    MimeMessage message = jms.createMimeMessage();</span><br><span class="line">    MimeMessageHelper helper = <span class="keyword">new</span> MimeMessageHelper(message, <span class="keyword">true</span>);</span><br><span class="line">    helper.setFrom(from);</span><br><span class="line">    helper.setTo(toUser);</span><br><span class="line">    helper.setSubject(<span class="string">"带附件"</span>);</span><br><span class="line">    helper.setText(<span class="string">"这是一封带附件的邮件"</span>);</span><br><span class="line">    <span class="comment">//加载文件路径</span></span><br><span class="line">    FileSystemResource fs = <span class="keyword">new</span> FileSystemResource(<span class="keyword">new</span> File(<span class="keyword">this</span>.getClass().getResource(<span class="string">"/"</span>).getPath()</span><br><span class="line">            + <span class="string">"\\自己菜与大佬菜的区别.jpg"</span>));</span><br><span class="line">    <span class="comment">//添加附件</span></span><br><span class="line">    helper.addAttachment(<span class="string">"自己菜与大佬菜的区别.jpg"</span>, fs);</span><br><span class="line">    jms.send(message);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 带图片邮件</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">imgMail</span><span class="params">(String toUser)</span> <span class="keyword">throws</span> MessagingException </span>&#123;</span><br><span class="line">    MimeMessage message = jms.createMimeMessage();</span><br><span class="line">    MimeMessageHelper helper = <span class="keyword">new</span> MimeMessageHelper(message, <span class="keyword">true</span>);</span><br><span class="line">    helper.setFrom(from);</span><br><span class="line">    helper.setTo(toUser);</span><br><span class="line">    helper.setSubject(<span class="string">"带图片邮件"</span>);</span><br><span class="line">    <span class="comment">//设置资源的cid</span></span><br><span class="line">    String content = <span class="string">"&lt;html&gt;&lt;body&gt;小菜鸡图片&lt;img src='cid:img'/&gt;&lt;/body&gt;&lt;/html&gt;"</span>;</span><br><span class="line">    helper.setText(content, <span class="keyword">true</span>);</span><br><span class="line">    FileSystemResource fs = <span class="keyword">new</span> FileSystemResource(<span class="keyword">new</span> File(<span class="keyword">this</span>.getClass().getResource(<span class="string">"/"</span>).getPath()</span><br><span class="line">            + <span class="string">"\\自己菜与大佬菜的区别.jpg"</span>));</span><br><span class="line">    helper.addInline(<span class="string">"img"</span>, fs);</span><br><span class="line">    jms.send(message);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 模板邮件</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">templateMail</span><span class="params">(String toUser)</span> <span class="keyword">throws</span> MessagingException </span>&#123;</span><br><span class="line">    MimeMessage message = jms.createMimeMessage();</span><br><span class="line">    MimeMessageHelper helper = <span class="keyword">new</span> MimeMessageHelper(message, <span class="keyword">true</span>);</span><br><span class="line">    helper.setFrom(from);</span><br><span class="line">    helper.setTo(toUser);</span><br><span class="line">    helper.setSubject(<span class="string">"模板邮件"</span>);</span><br><span class="line">    Context context = <span class="keyword">new</span> Context();</span><br><span class="line">    context.setVariable(<span class="string">"username"</span>, <span class="string">"段誉"</span>);</span><br><span class="line">    <span class="comment">//thymeleaf模板默认会从src/resources/templates目录下寻找文件，填入我们定义的模板名，不需要写后缀</span></span><br><span class="line">    String template = templateEngine.process(<span class="string">"MailTemplate"</span>, context);</span><br><span class="line">    helper.setText(template, <span class="keyword">true</span>);</span><br><span class="line">    jms.send(message);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="模板邮件的模板"><a href="#模板邮件的模板" class="headerlink" title="模板邮件的模板"></a>模板邮件的模板</h3><p>接下来在<code>src/main/resources/templates</code>目录下新建<code>MailTemplate.html</code>文件，内容如下</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Insert title here<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>您好，<span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"$&#123;username&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span>:这是来自测试的邮件模板！<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="测试结果不再展示，更改配置后可自行测试"><a href="#测试结果不再展示，更改配置后可自行测试" class="headerlink" title="测试结果不再展示，更改配置后可自行测试"></a>测试结果不再展示，更改配置后可自行测试</h2><h2 id="demo地址"><a href="#demo地址" class="headerlink" title="demo地址"></a>demo地址</h2><blockquote><p><a href="https://gitee.com/fengzxia/spring-boot-mail" target="_blank" rel="noopener">https://gitee.com/fengzxia/spring-boot-mail</a></p></blockquote><h2 id="来源"><a href="#来源" class="headerlink" title="来源"></a>来源</h2><blockquote><p>作者：诺丨言<br>链接：<a href="https://juejin.im/post/5ca8578bf265da30893a052d" target="_blank" rel="noopener">https://juejin.im/post/5ca8578bf265da30893a052d</a><br>来源：掘金</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> Spring </category>
          
          <category> SpringBoot </category>
          
          <category> 转载 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 邮件发送 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在docker中安装es（单机版）</title>
      <link href="/posts/d9b5a8fb.html"/>
      <url>/posts/d9b5a8fb.html</url>
      
        <content type="html"><![CDATA[<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="如果不会安装docker可参考下边这篇博客"><a href="#如果不会安装docker可参考下边这篇博客" class="headerlink" title="如果不会安装docker可参考下边这篇博客"></a>如果不会安装docker可参考下边这篇博客</h3><blockquote><p>博客地址：<a href="http://www.geekfaith.com/article/173" target="_blank" rel="noopener">http://www.geekfaith.com/article/173</a></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 9200:9200 -p 9300:9300 -v &#x2F;opt&#x2F;myapp&#x2F;elasticsearch&#x2F;config&#x2F;elasticsearch.yml:&#x2F;usr&#x2F;share&#x2F;elasticsearch&#x2F;config&#x2F;elasticsearch.yml -v  &#x2F;opt&#x2F;myapp&#x2F;elasticsearch&#x2F;config&#x2F;jvm.options:&#x2F;usr&#x2F;share&#x2F;elasticsearch&#x2F;config&#x2F;jvm.options --name elasticsearch elasticsearch</span><br></pre></td></tr></table></figure><ul><li>-p：将docker镜像中的端口号映射宿主机器端口号，<code>宿主机器端口号:docker容器端口号</code> ，可写多个，如果多个端口号是连续的，可以直接用-连接，如：4560-4600:4560-4600</li><li>-v：将docker镜像中的文件映射到宿主机器指定的文件，可以是文件夹，<code>-v 宿主机文件:容器文件</code>映射后可直接修改宿主机上的文件就可以改变docker中的配置，也可写多个。docker镜像中软件的配置文档默认在<code>/usr/share”/{软件名}</code>下</li><li>–name：指定镜像名称,<code>--name 容器名称</code></li></ul><blockquote><p><strong>默认安装的是docker镜像中最新版本的es镜像，如果想要安装指定版本，需要先下载镜像，比如我想安装5.几版本的es<br>先通过docker下载该版本的镜像</strong></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull elasticsearch:5.6.9</span><br></pre></td></tr></table></figure><p>下载完镜像后再输入上边的安装命令，docker会使用已下载的镜像安装</p><h2 id="碰到的问题"><a href="#碰到的问题" class="headerlink" title="碰到的问题"></a>碰到的问题</h2><h3 id="1-只能访问9200端口，在项目中不能使用9300端口操作"><a href="#1-只能访问9200端口，在项目中不能使用9300端口操作" class="headerlink" title="1.只能访问9200端口，在项目中不能使用9300端口操作"></a>1.只能访问9200端口，在项目中不能使用9300端口操作</h3><p>期初以为是防火墙给拦截，后台查看防火墙发现并未被拦截，检查docker容器中es的配置文件，容器目录(<code>/usr/share/elasticsearch/config/elasticsearch.yml</code>)，使用vim查看文件发现只有一行配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http.host: 0.0.0.0</span><br></pre></td></tr></table></figure><p>这里只是设置了9200端口可以外网访问</p><p>还需要添加如下配置才能访问9300端口，添加后重启es即可访问</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">bootstrap.system_call_filter: false</span><br><span class="line">network.bind_host: 0.0.0.0</span><br><span class="line">network.publish_host: 填写docker容器的内网ip</span><br><span class="line">network.host: 0.0.0.0</span><br></pre></td></tr></table></figure><h3 id="配置过9300端口外网启动后，启动es可能会报如下错误"><a href="#配置过9300端口外网启动后，启动es可能会报如下错误" class="headerlink" title="配置过9300端口外网启动后，启动es可能会报如下错误"></a>配置过9300端口外网启动后，启动es可能会报如下错误</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">ERROR: [2] bootstrap checks failed</span><br><span class="line">ERROR: [2] bootstrap checks failed[1]: initial heap size [31457280] not equal to maximum heap size [480247808];</span><br><span class="line">this can cause resize pauses and prevents mlockall from locking the entire heap[2]: max virtual memory areas vm.max_map_count [65530] is too low, increase to </span><br><span class="line">at least [262144][2018-11-01T11:49:45,152][INFO ][o.e.n.Node               ] [qfspMqR] stopping ...2018-11-01 11:49:45,155 pool-1-thread-1 </span><br><span class="line">ERROR Unable to unregister MBeans java.security.AccessControlException: access denied (&quot;javax.management.MBeanServerPermission&quot; &quot;createMBeanServer&quot;)</span><br><span class="line">at java.security.AccessControlContext.checkPermission(AccessControlContext.java:472) at </span><br><span class="line">java.security.AccessController.checkPermission(AccessController.java:884) at java.lang.SecurityManager.checkPermission(SecurityManager.java:549) at </span><br><span class="line">java.lang.management.ManagementFactory.getPlatformMBeanServer(ManagementFactory.java:465) at </span><br><span class="line">org.apache.logging.log4j.core.jmx.Server.unregisterLoggerContext(Server.java:246) at org.apache.logging.log4j.core.LoggerContext.stop(LoggerContext.java:338) </span><br><span class="line">at org.apache.logging.log4j.core.LoggerContext$1.run(LoggerContext.java:279) at </span><br><span class="line">org.apache.logging.log4j.core.util.DefaultShutdownCallbackRegistry$RegisteredCancellable.run(DefaultShutdownCallbackRegistry.java:109) at </span><br><span class="line">org.apache.logging.log4j.core.util.DefaultShutdownCallbackRegistry.run(DefaultShutdownCallbackRegistry.java:74) at java.lang.Thread.run(Thread.java:748)</span><br></pre></td></tr></table></figure><p>这个是因为linux的单个进程的线程数不够，需要调大，临时加大的方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">sysctl -w vm.max_map_count&#x3D;262144</span><br><span class="line"></span><br><span class="line">#查看修改结果</span><br><span class="line">sysctl -a|grep vm.max_map_count</span><br><span class="line">示例：</span><br><span class="line">[root@localhost config]# sysctl -a|grep vm.max_map_count</span><br><span class="line">vm.max_map_count &#x3D; 262144</span><br></pre></td></tr></table></figure><p>永久修改方法，按照如下命令一次输入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">cat &#x2F;etc&#x2F;sysctl.conf | grep -v &quot;vm.max_map_count&quot; &gt; &#x2F;tmp&#x2F;system_sysctl.conf</span><br><span class="line"></span><br><span class="line">echo &quot;vm.max_map_count&#x3D;262144&quot; &gt;&gt; &#x2F;tmp&#x2F;system_sysctl.conf</span><br><span class="line"></span><br><span class="line">mv &#x2F;tmp&#x2F;system_sysctl.conf &#x2F;etc&#x2F;sysctl.conf    #会提示是否覆盖，输入”y“即可</span><br><span class="line">然后输入命令更新配置</span><br><span class="line">cat &#x2F;etc&#x2F;sysctl.conf</span><br><span class="line"></span><br><span class="line">sysctl -p</span><br></pre></td></tr></table></figure><h4 id="看上边的日志，可以发现还报一个错误"><a href="#看上边的日志，可以发现还报一个错误" class="headerlink" title="看上边的日志，可以发现还报一个错误"></a>看上边的日志，可以发现还报一个错误</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bootstrap checks failed[1]: initial heap size [31457280] not equal to maximum heap size [480247808];</span><br></pre></td></tr></table></figure><p>因为服务器内存不够，es默认的jvm分配过多,修改<code>/usr/share/elasticsearch/config/jvm.options</code>(容器目录)的-Xms和-Xmx,默认是4g</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-Xms256m</span><br><span class="line">-Xmx256m</span><br></pre></td></tr></table></figure><p>修改后重启即可使用</p><h3 id="进入docker容器命令"><a href="#进入docker容器命令" class="headerlink" title="进入docker容器命令"></a>进入docker容器命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec -i -t 容器名 bash</span><br></pre></td></tr></table></figure><h3 id="docker中默认未安装vim编辑器，需要自己下载"><a href="#docker中默认未安装vim编辑器，需要自己下载" class="headerlink" title="docker中默认未安装vim编辑器，需要自己下载"></a>docker中默认未安装vim编辑器，需要自己下载</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get install vim</span><br></pre></td></tr></table></figure><p>如果安装时提示如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Reading package lists... Done</span><br><span class="line">        Building dependency tree       </span><br><span class="line">        Reading state information... Done</span><br><span class="line">        E: Unable to locate package vim</span><br></pre></td></tr></table></figure><p>这时候需要敲：<code>apt-get update</code>，这个命令的作用是：同步<code>/etc/apt/sources.list</code>和<code>/etc/apt/sources.list.d</code>中列出的源的索引，这样才能获取到最新的软件包。<br>然后再输入<code>apt-get install vim</code>就可安装成功</p><h3 id="查看docker容器ip"><a href="#查看docker容器ip" class="headerlink" title="查看docker容器ip"></a>查看docker容器ip</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker inspect &#123;容器名&#125; | grep IPAddress</span><br></pre></td></tr></table></figure><h3 id="查看启动日志"><a href="#查看启动日志" class="headerlink" title="查看启动日志"></a>查看启动日志</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker logs -f --tail&#x3D;10 &#123;容器名称&#125;</span><br></pre></td></tr></table></figure><p>查看指定docker容器的日志，ctrl+c 结束查看</p><ul><li><code>–tail</code>：从倒数第几行开始查看</li><li><code>-f</code>：带上日志时间查看</li></ul>]]></content>
      
      
      <categories>
          
          <category> DB </category>
          
          <category> NoSQL </category>
          
          <category> ELK </category>
          
          <category> Elasticsearch </category>
          
          <category> Docker </category>
          
          <category> Elasticsearch </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>360浏览器兼容模式下ajax请求第二次访问，不会请求接口问题</title>
      <link href="/posts/516d82c4.html"/>
      <url>/posts/516d82c4.html</url>
      
        <content type="html"><![CDATA[<h2 id="bug原因"><a href="#bug原因" class="headerlink" title="bug原因"></a>bug原因</h2><p>代码如下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">    url: <span class="string">'$&#123;root&#125;/ajax/user/or_shop_and_elect'</span>,</span><br><span class="line">    dataType: <span class="string">'json'</span>,</span><br><span class="line">    <span class="keyword">async</span>: <span class="literal">false</span>,</span><br><span class="line">    success: <span class="function"><span class="keyword">function</span> (<span class="params">rs</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> rs !== <span class="string">'boolean'</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (rs.code === <span class="number">30000</span>) &#123;</span><br><span class="line">                <span class="built_in">window</span>.location.href =</span><br><span class="line">                        $&#123;root&#125;respMsg.data</span><br><span class="line">                        + <span class="string">"?skipUrl=$&#123;root&#125;/web/user/user_center"</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (rs) &#123;</span><br><span class="line">            $.askAlert(</span><br><span class="line">                    <span class="string">'$&#123;root&#125;/web/elect_center/save_elect'</span>,</span><br><span class="line">                    <span class="string">'$&#123;root&#125;/web/company/open_free_shop'</span>);</span><br><span class="line">            e.preventDefault();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>在360浏览器兼容模式下，页面通过ajax方式请求一个接口时，会将返回的结果给缓存，当第二次去请求的时候不会调用后台的接口，这就导致了当我第一次访问过此接口后返回true，当我将结果修改为false是，返回的仍是true而不是false</p><h4 id="360的兼容模式默认是IE，GET请求有缓存。"><a href="#360的兼容模式默认是IE，GET请求有缓存。" class="headerlink" title="360的兼容模式默认是IE，GET请求有缓存。"></a>360的兼容模式默认是IE，GET请求有缓存。</h4><h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><p>解决办法：</p><ul><li>第一种：在ajax请求的时候添加参数<code>cache: false</code></li><li>第二种：将接口改为使用post请求</li><li>第三种：在url后边拼一个时间戳，写法如下：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">url: <span class="string">'$&#123;root&#125;/ajax/user/or_shop_and_elect?t='</span> + <span class="built_in">Date</span>.now()</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
          <category> Ajax </category>
          
          <category> BUG </category>
          
          <category> 接口 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 浏览器缓存 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker将服务器上的kibana容器打包并导入</title>
      <link href="/posts/b4ca0942.html"/>
      <url>/posts/b4ca0942.html</url>
      
        <content type="html"><![CDATA[<p>之所以用到容器打包是因为之前在kibana中安装x-pack的时候要求服务器内存必须在2G以上，在安装kibana的服务器上内存不够只有2G，无法安装。只能是在本地使用虚拟机设置足够的内存进行安装。</p><h3 id="注意：在导入镜像后必须安照4、5命令进行操作一次否则docker容器无法启动成功，这个点很坑，找了很久才解决"><a href="#注意：在导入镜像后必须安照4、5命令进行操作一次否则docker容器无法启动成功，这个点很坑，找了很久才解决" class="headerlink" title="注意：在导入镜像后必须安照4、5命令进行操作一次否则docker容器无法启动成功，这个点很坑，找了很久才解决"></a>注意：在导入镜像后必须安照4、5命令进行操作一次否则docker容器无法启动成功，这个点很坑，找了很久才解决</h3><h2 id="1-将虚拟机上的kibana容器导出，然后拷贝到服务器上"><a href="#1-将虚拟机上的kibana容器导出，然后拷贝到服务器上" class="headerlink" title="1.将虚拟机上的kibana容器导出，然后拷贝到服务器上"></a>1.将虚拟机上的kibana容器导出，然后拷贝到服务器上</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker export kibana &gt; &#x2F;opt&#x2F;myapp&#x2F;kibana.tar      #中间的kibana可以替换为kibana的容器id</span><br></pre></td></tr></table></figure><h2 id="2-在虚拟机上输入docker-inspect-kibana-查看kibana的信息"><a href="#2-在虚拟机上输入docker-inspect-kibana-查看kibana的信息" class="headerlink" title="2.在虚拟机上输入docker inspect kibana 查看kibana的信息"></a>2.在虚拟机上输入docker inspect kibana 查看kibana的信息</h2><p><img src="https://img-blog.csdnimg.cn/2019040416582670.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMzNDMwMDgz,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>需要将红框中的<strong>Env、Cmd、Entrypoint</strong>这三个信息复制保存，稍后在服务上导入镜像时用到</p><h2 id="3-导入镜像-并指定镜像名称为kibana-x-pack"><a href="#3-导入镜像-并指定镜像名称为kibana-x-pack" class="headerlink" title="3.导入镜像,并指定镜像名称为kibana-x-pack"></a>3.导入镜像,并指定镜像名称为kibana-x-pack</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker import - kibana-x-pack &lt; kibana.tar</span><br></pre></td></tr></table></figure><h2 id="4-在服务器上创建个kibana文件夹，然后进入，在里边创建Dockerfile文件，添加上边第2步保存的信息"><a href="#4-在服务器上创建个kibana文件夹，然后进入，在里边创建Dockerfile文件，添加上边第2步保存的信息" class="headerlink" title="4.在服务器上创建个kibana文件夹，然后进入，在里边创建Dockerfile文件，添加上边第2步保存的信息"></a>4.在服务器上创建个kibana文件夹，然后进入，在里边创建Dockerfile文件，添加上边第2步保存的信息</h2><p><img src="https://img-blog.csdnimg.cn/20190404170006661.png" alt="在这里插入图片描述"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">FROM            格式为 FROM &lt;image&gt;或FROM &lt;image&gt;:&lt;tag&gt;。</span><br><span class="line"></span><br><span class="line">ENV             格式为 ENV &lt;key&gt; &lt;value&gt;。 指定一个容器环境变量。</span><br><span class="line"></span><br><span class="line">CMD             支持三种格式</span><br><span class="line">CMD [&quot;executable&quot;,&quot;param1&quot;,&quot;param2&quot;] 使用 exec 执行，推荐方式；</span><br><span class="line">CMD command param1 param2 在 &#x2F;bin&#x2F;sh 中执行，提供给需要交互的应用；</span><br><span class="line">CMD [&quot;param1&quot;,&quot;param2&quot;] 提供给 ENTRYPOINT 的默认参数；</span><br><span class="line"></span><br><span class="line">ENTRYPOINT      两种格式：</span><br><span class="line">ENTRYPOINT [&quot;executable&quot;, &quot;param1&quot;, &quot;param2&quot;]</span><br><span class="line">ENTRYPOINT command param1 param2（shell中执行）。</span><br><span class="line">配置容器启动后执行的命令，并且不可被 docker run 提供的参数覆盖。</span><br><span class="line">每个 Dockerfile 中只能有一个 ENTRYPOINT，当指定多个时，只有最后一个起效。</span><br></pre></td></tr></table></figure><h2 id="5-输入docker-build构建kibana镜像"><a href="#5-输入docker-build构建kibana镜像" class="headerlink" title="5.输入docker build构建kibana镜像"></a>5.输入docker build构建kibana镜像</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -t kibana-x-pack .</span><br></pre></td></tr></table></figure><h2 id="6-使用docker-run命令启动，启动成功说明配置成功"><a href="#6-使用docker-run命令启动，启动成功说明配置成功" class="headerlink" title="6.使用docker run命令启动，启动成功说明配置成功"></a>6.使用docker run命令启动，启动成功说明配置成功</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d kibana-x-pack -p 5601:5601 --name kibana</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ELK </category>
          
          <category> Kibana </category>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 迁移 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>破解elasticsearch的x-pack</title>
      <link href="/posts/faade1c4.html"/>
      <url>/posts/faade1c4.html</url>
      
        <content type="html"><![CDATA[<p>我安装的es版本是5.6的，其他版本同样适用：</p><h2 id="1-给ElasricSearch和Kibana安装X-Pack"><a href="#1-给ElasricSearch和Kibana安装X-Pack" class="headerlink" title="1.给ElasricSearch和Kibana安装X-Pack"></a>1.给ElasricSearch和Kibana安装X-Pack</h2><h3 id="1-ElasticSearch安装X-Pack"><a href="#1-ElasticSearch安装X-Pack" class="headerlink" title="1.ElasticSearch安装X-Pack"></a>1.ElasticSearch安装X-Pack</h3><p>进入es的bin目录，执行下边的命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.&#x2F;elasticsearch-plugin install x-pack                  #在线安装</span><br></pre></td></tr></table></figure><p>在线安装可能会很慢，建议使用离线安装，官网下载地址：<a href="https://artifacts.elastic.co/downloads/packs/x-pack/x-pack-5.6.13.zip" target="_blank" rel="noopener">https://artifacts.elastic.co/downloads/packs/x-pack/x-pack-5.6.13.zip</a><br>我下载好的压缩文件在<code>/opt/myapp</code>目录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.&#x2F;elasticsearch-plugin install file:&#x2F;&#x2F;&#x2F;opt&#x2F;myapp&#x2F;x-pack-5.6.12.zip            #离线安装</span><br></pre></td></tr></table></figure><p>安装成功后，需要先禁用x-pack的权限功能，打开es的配置文件，<code>./config/elasticsearch.yml</code>,在末尾添加</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#禁用权限功能</span><br><span class="line">xpack.security.enabled: false</span><br></pre></td></tr></table></figure><h3 id="2-kibana安装X-Pack"><a href="#2-kibana安装X-Pack" class="headerlink" title="2.kibana安装X-Pack"></a>2.kibana安装X-Pack</h3><ul><li><strong>kibana在安装X-Pack时，服务器内存必须大于2G才可以安装成功</strong><br>同ElasticSearch一样，进入kibana的bin目录安装，下载的x-pack离线文件中包含了elasticsearch和kibana的x-pack插件，所以kibana在安装的时候不需要再进行下载<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">.&#x2F;kibana-plugin install x-pack                   #在线安装</span><br><span class="line">.&#x2F;kibana-plugin install file:&#x2F;&#x2F;&#x2F;opt&#x2F;myapp&#x2F;x-pack-5.6.12.zip    #离线安装</span><br></pre></td></tr></table></figure></li></ul><h2 id="2-替换X-Pack文件"><a href="#2-替换X-Pack文件" class="headerlink" title="2.替换X-Pack文件"></a>2.替换X-Pack文件</h2><p>安装成功后，进入es的<code>./plugins/x-pack</code>目录找到<code>x-pack-5.6.9.jar</code>这个jar包,用解压工具打开，分别进入到<br><code>org\elasticsearch\license</code>目录和<code>org\elasticsearch\xpack</code>找到<code>LicenseVerifier</code>、<code>XPackBuild.class</code>这两个文件替换，使用<strong>下边的项目</strong>按照jar包中的路径进行调整包路径，然后编辑把这两个文件替换置x-pack-5.6.9.jar包中</p><blockquote><p><a href="https://gitee.com/fengzxia/es_crack_x_pack" target="_blank" rel="noopener">https://gitee.com/fengzxia/es_crack_x_pack</a></p></blockquote><h2 id="3-去官网申请license证书"><a href="#3-去官网申请license证书" class="headerlink" title="3.去官网申请license证书"></a>3.去官网申请license证书</h2><blockquote><p><a href="https://license.elastic.co/registration" target="_blank" rel="noopener">https://license.elastic.co/registration</a></p></blockquote><ol><li>邮箱认真写，用来接收json文件的</li><li>country写china,其它都可以随便写</li><li>点击申请后邮箱马上会收到一个证书JSON文件</li></ol><p>下载证书json文件后修改以下几个内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1. &quot;type&quot;:&quot;basic&quot; 替换为 “type”:&quot;platinum&quot; # 基础版变更为铂金版</span><br><span class="line">2. &quot;expiry_date_in_millis&quot;:1561420799999 替换为 &quot;expiry_date_in_millis&quot;:3107746200000# 1年变为50年</span><br></pre></td></tr></table></figure><h2 id="4-上传license证书"><a href="#4-上传license证书" class="headerlink" title="4.上传license证书"></a>4.上传license证书</h2><p>启动elasticsearch、kibana，根据邮件中发送的上传证书教程，将修改后的证书上传到es中，打开kibana进入Monitoring中查看激活日期，如下图已经变成到2068年表示激活成功<br><img src="https://img-blog.csdnimg.cn/20190404164935487.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMzNDMwMDgz,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="5-启用权限功能"><a href="#5-启用权限功能" class="headerlink" title="5.启用权限功能"></a>5.启用权限功能</h2><p>打开elasticsearch的<code>./config/elasticsearch.yml</code>文件将<code>xpack.security.enabled</code>设置为<code>true</code>，重启elasticserch，再访问kibana,就会跳转置登陆页面，然后输入默认的账号：<code>elastic</code>，密码：<code>changeme</code>，便能登陆成功<br><img src="https://img-blog.csdnimg.cn/20190404165127431.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMzNDMwMDgz,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="6-破解在docker中安装的elasticsearch和kibana的X-Pack"><a href="#6-破解在docker中安装的elasticsearch和kibana的X-Pack" class="headerlink" title="6.破解在docker中安装的elasticsearch和kibana的X-Pack"></a>6.破解在docker中安装的elasticsearch和kibana的X-Pack</h2><p>在docker中安装和直接在linux中安装操作一样，docker容器中的es和kibana配置都在<code>/usr/share/</code>目录下，相较于在linux中安装多了一步将修改后x-pack.jar拷贝至docker容器中：</p><h3 id="1-将宿主机的文件拷贝置容器中"><a href="#1-将宿主机的文件拷贝置容器中" class="headerlink" title="1.将宿主机的文件拷贝置容器中"></a>1.将宿主机的文件拷贝置容器中</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker cp 宿主机的文件路径 容器名称:容器的目录</span><br></pre></td></tr></table></figure><h3 id="2-将容器中的文件拷贝置宿主机上"><a href="#2-将容器中的文件拷贝置宿主机上" class="headerlink" title="2.将容器中的文件拷贝置宿主机上"></a>2.将容器中的文件拷贝置宿主机上</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker cp 容器名:容器中的文件路径 宿主机的文件目录</span><br></pre></td></tr></table></figure><h3 id="kibana在docker中安装，服务器内存必须大于2G才可以安装成功"><a href="#kibana在docker中安装，服务器内存必须大于2G才可以安装成功" class="headerlink" title="kibana在docker中安装，服务器内存必须大于2G才可以安装成功"></a>kibana在docker中安装，服务器内存必须大于2G才可以安装成功</h3><p><strong>注意：在kibana中安装x-pack时要求服务器内存必须要大于2G才可以安装，否则无法安装成功,内存不够请参考<a href="https://blog.csdn.net/qq_33430083/article/details/89028840" target="_blank" rel="noopener">docker将服务器上的kibana容器打包并导入这篇博客</a></strong></p>]]></content>
      
      
      <categories>
          
          <category> DB </category>
          
          <category> NoSQL </category>
          
          <category> ELK </category>
          
          <category> Elasticsearch </category>
          
          <category> x-pack </category>
          
          <category> Elasticsearch </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 破解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>idea减小启动项目时占用的内存</title>
      <link href="/posts/e30ff31b.html"/>
      <url>/posts/e30ff31b.html</url>
      
        <content type="html"><![CDATA[<p>有些时候在本地调试需要启动3，4个项目，但是因为电脑内存不足，在启动后很容易崩溃，在网上浏览找到了一种比较实用的解决方法：<br>很简单无论是jar项目还是war包项目只需要在项目运行的配置VM options添加<code>-Xmx128m -Xms64m -Xmn32m -Xss16m</code>这段代码就可以了<br><img src="https://img-blog.csdnimg.cn/20190404155320420.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMzNDMwMDgz,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>启动前<br><img src="https://img-blog.csdnimg.cn/20190404155650677.png" alt="在这里插入图片描述"><br>启动后<br><img src="https://img-blog.csdnimg.cn/20190404160017338.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMzNDMwMDgz,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>如上图所示连启动4个项目也就占用了10%的内存，我的电脑只有8G内存</p>]]></content>
      
      
      <categories>
          
          <category> idea </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 减小占用内存 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在img标签中没有写图片url但拼接了oss链接，导致接口被请求多次的bug</title>
      <link href="/posts/73978cee.html"/>
      <url>/posts/73978cee.html</url>
      
        <content type="html"><![CDATA[<h2 id="bug原因"><a href="#bug原因" class="headerlink" title="bug原因"></a>bug原因</h2><p>在编写浏览记录拦截器的时候，debug发现拦截器总是执行多次，而且第二次总是没有获取到产品id参数，起初以为是项目配置的原因导致拦截器初始化了多次，但检查配置没有，debug检查两次请求拦截器的内存地址都是一样的，所以不是因为配置的原因导致的后来在controller层断点才发现是因为接口被多次请求，然后猜测可能是页面上有哪些地方重复调用品牌详情接口了，通过F12看控制台的Network<br><img src="https://img-blog.csdnimg.cn/20190404154127316.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMzNDMwMDgz,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>发现品牌详情接口被多次请求，除了第一次以外，后边的请求拼接的参数是图片oss裁剪的链接。</p><ul><li><strong>原因是因为在测试阶段添加的一些测试数据没有图片，在页面渲染数据的时候图片链接没有进行非空判断直接写死了oss裁剪地址导致的，在img标签里以问号开头就会默认拼接当前页面路径，然后页面在加载img中的资源时又重新请求了接口导致的</strong><br><img src="https://img-blog.csdnimg.cn/20190404154627383.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMzNDMwMDgz,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2>在渲染img的src路径时添加判断图片链接为空时不添加oss裁剪</li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> Spring </category>
          
          <category> BUG </category>
          
          <category> 接口 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 接口多次请求 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cron表达式学习</title>
      <link href="/posts/9c0cd83e.html"/>
      <url>/posts/9c0cd83e.html</url>
      
        <content type="html"><![CDATA[<p>一个cron表达式有至少6个（也可能7个）有空格分隔的时间元素。按顺序依次为：</p><ul><li>秒（0~59）</li><li>分钟（0~59）</li><li>小时（0~23）</li><li>天（0~31）</li><li>月（0~11）</li><li>星期(写法1：1~7 1=SUN；写法2：SUN,MON,TUE,WED,THU,FRI,SAT)</li><li>年份(1970-2099)</li></ul><p>其中每个元素可以式一个值（如6），一个连续区间（9-12），一个间隔时间（8-18/4）（/4表示每隔4小时），一个列表（1,3,5），通配符。由于”日期”和”星期”这两个元素互斥的，必须要对其中一个设置。</p><p>配置实列：</p><ul><li>每个5秒执行一次: <code>/5 * ?</code></li><li>每隔1分钟执行一次: <code>0 /1 ?</code></li><li>每天上午10点，下午两点，4点: <code>0 0 10,14,16 ?</code></li><li>朝九晚五工作时间内每半小时: <code>0 0/30 9-17 ?</code></li><li>表示每个星期三中午12点: <code>0 0 12 ? * WED</code></li><li>每天中午12点触发: <code>0 0 12 ?</code></li><li>每天上午10:15触发(结尾有空格,为了方便看清加了引号): <code>&quot;0 15 10 ? &quot;</code></li><li>每天上午10:15触发: <code>0 15 10 ?</code></li><li>每天上午10:15触发: <code>0 15 10 ? *</code></li><li>2005年每天上午10:15触发: <code>0 15 10 ? 2005</code></li><li>在每天下午2点到下午2:59期间的每1分钟触发: <code>0 14 * ?</code></li><li>在每天下午2点到下午2:55期间的每5分钟触发: <code>0 0/5 14 ?</code></li><li>在每天下午2点到2:55期间和下午6点到6:55期间的每5分钟触发: <code>0 0/5 14,18 ?</code></li><li>在每天下午2点到下午2:05期间的每1分钟触发: <code>0 0-5 14 ?</code></li><li>每年三月的星期三的下午2:10和2:44触发: <code>0 10,44 14 ? 3 WED</code></li><li>周一至周五的上午10:15触发: <code>0 15 10 ? * MON-FRI</code></li><li>每月15日上午10:15触发: <code>0 15 10 15 * ?</code></li><li>每月最后一日的上午10:15触发: <code>0 15 10 L * ?</code></li><li>每月的最后一个星期五上午10:15触发: <code>0 15 10 ? * 6L</code></li><li>2002年至2005年的每月的最后一个星期五上午10:15触发: <code>0 15 10 ? * 6L 2002-2005</code></li><li>每月的第三个星期五上午10:15触发: <code>0 10 10 ? * 6#3</code></li></ul><p>有些子表达式能包含一些范围或列表<br>例如: 子表达式(星期)可以为 <code>MON-FRI</code>, <code>MON,WED,FRI</code>, <code>MON-WED,SAT</code>, <code>*</code>字符代表所有可能的值,<code>/</code>字符用来指定数值的增量</p><p>例如: 在子表达式(分钟)里的 <code>0/15</code> 表示从第0分钟开始，每15分钟在子表达式(分钟)里的 <code>3/20</code> 表示从第3分钟开始，每20分钟(它和<code>3,23,43</code>)的含义一样 <code>?</code> 字符仅被用于 “日期” 和 “星期” 两个子表达式，表示不指定值，当两个子表达式其中之一被指定了值以后，为了避免冲突，需要将另一个子表达式的值设置为<code>?</code></p><p><code>L</code> 字符仅被用于”日期”和”星期”两个子表达式，它是单词”last”的缩写如果在”L”前有具体的内容，它就具有其他的含义了。</p><p>例如: “6L” 表示这个月的倒数第6天 <strong>在使用“L”参数时，不要指定列表或范围，因为这会导致问题”W”字符代表着“平日(Mon-Fri)”，并且仅能用于日期中。它用来指定日离指定日最近的一个平日。大部分的商业处理都是基于工作周的，所以 W 字符可能是非常重要的</strong>  </p><p>例如，日期中的<code>15W</code>意味着“离该月15号的最近一个平日。”假如15号是星期六，那么trigger会在14号（星期五）触发，因为星期四比星期一离15号更近。C: 代表“Calendar”的意思。它的意思是计划所关联的日期，如果日期没有被关联，则相当于日历中所有日期。</p><p>例如，5C在日期字段就相当于日历5日以后的第一天。1C在星期字段中相当于星期日后的第一天</p><table><thead><tr><th>字段</th><th>允许值</th><th>允许的特殊字符</th></tr></thead><tbody><tr><td>秒</td><td>0~59</td><td>, - * /</td></tr><tr><td>分</td><td>0~59</td><td>, - * /</td></tr><tr><td>小时</td><td>0~23</td><td>, - * /</td></tr><tr><td>日期</td><td>1-31</td><td>, - * ? / L W C</td></tr><tr><td>月份</td><td>1<del>12或者JAN</del>DEC</td><td>, - * /</td></tr><tr><td>星期</td><td>1<del>7或者SUN</del>SAT</td><td>, - * ? / L C #</td></tr><tr><td>年(可选)</td><td>留空，1970~2099</td><td>, - * /</td></tr></tbody></table>]]></content>
      
      
      
        <tags>
            
            <tag> 定时任务 </tag>
            
            <tag> cron表达式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Boot实现定时任务的4种方式</title>
      <link href="/posts/493442a1.html"/>
      <url>/posts/493442a1.html</url>
      
        <content type="html"><![CDATA[<h2 id="实现定时任务的几种方式"><a href="#实现定时任务的几种方式" class="headerlink" title="实现定时任务的几种方式"></a>实现定时任务的几种方式</h2><ul><li><p>Timer: 这是java自带的java.util.Timer类，这个类运行你调度一个java.util.TimerTask任务。使用这种方式可以让程序按照某一个频度执行，但不能在指定时间运行。一般用的较少。<strong>多线程并行处理定时任务，Timer运行多个TimeTask时，只要其中之一没有捕获抛出的异常，其它任务便会自动终止运行</strong></p></li><li><p>ScheduledExecutorService: 也是jdk自带的一个类；是基于线程池设计的定时任务类，每个调度任务都会分配到线程池中的一个线程去执行，<strong>任务并发执行，互不影响</strong></p></li><li><p>Spring Task: Spring3.0以后自带的task，可以将它看成一个轻量级的Quartz，而且使用起来比Quartz简单许多<strong>所有的定时任务都在同一线程上串行，想要异步执行需要自己添加线程池</strong></p></li><li><p>Quartz: 这是一个功能比较强大的调度器，可以让你的程序在指定时间执行，也可以按照某一个频度执行，配置起来稍显复杂</p><h3 id="使用Timer"><a href="#使用Timer" class="headerlink" title="使用Timer"></a>使用Timer</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestTimer</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    TimerTask timerTask = <span class="keyword">new</span> TimerTask() &#123;</span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"task run:"</span> + System.currentTimeMillis());</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">//多线程并行处理定时任务时，Timer运行多个TimeTask时，只要其中之一没有捕获抛出的异常，其它任务便会自动终止运行</span></span><br><span class="line">    <span class="comment">//并不推荐使用</span></span><br><span class="line">    Timer timer = <span class="keyword">new</span> Timer();</span><br><span class="line">    <span class="comment">//安排指定的任务在指定的时间开始进行重复的固定延迟执行，这里是延时10毫秒每3秒执行一次</span></span><br><span class="line">    timer.schedule(timerTask, <span class="number">10</span>, <span class="number">3000</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="使用ScheduledExecutorService"><a href="#使用ScheduledExecutorService" class="headerlink" title="使用ScheduledExecutorService"></a>使用ScheduledExecutorService</h3><p>该方法跟Timer类似</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestScheduledExecutorService</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    ScheduledExecutorService service = Executors.newSingleThreadScheduledExecutor();</span><br><span class="line">    <span class="comment">// 参数：1.任务体，2.首次执行的延时时间</span></span><br><span class="line">    <span class="comment">//      3.任务执行间隔，4.间隔时间单位</span></span><br><span class="line">    service.scheduleAtFixedRate(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"task ScheduledExecutorService:"</span> + System.currentTimeMillis());</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;, <span class="number">0</span>, <span class="number">3</span>, TimeUnit.SECONDS);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用Spring-Task"><a href="#使用Spring-Task" class="headerlink" title="使用Spring Task"></a>使用Spring Task</h3><p>在spring boot中我们可以直接使用注解的方式来实现定时任务，非常简单，需要的依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--通过注解的方式生成部分常用代码，减少重复代码编写--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>创建任务类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestSpringTask</span> </span>&#123;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 通过表达式来配置任务执行时间</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="meta">@Scheduled</span>(cron = <span class="string">"0/5 * * * * *"</span>)</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">scheduled</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    log.info(<span class="string">"=====&gt;&gt;&gt;&gt;&gt;使用cron:&#123;&#125;"</span>, System.currentTimeMillis());</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 按一定频率执行的定时任务</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="meta">@Scheduled</span>(fixedRate = <span class="number">5000</span>)</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">scheduled1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    log.info(<span class="string">"=====&gt;&gt;&gt;&gt;&gt;使用fixedRate:&#123;&#125;"</span>, System.currentTimeMillis());</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 功能同fixedRate，但是可以配合initialDelay属性设置任务延时执行</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="meta">@Scheduled</span>(fixedDelay = <span class="number">5000</span>)</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">scheduled2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    log.info(<span class="string">"=====&gt;&gt;&gt;&gt;&gt;使用fixedDelay:&#123;&#125;"</span>, System.currentTimeMillis());</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>Application</code>类上添加<code>@EnableScheduling</code>注解开启对定时任务的支持</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="comment">//开启对定时任务的支持(所有的定时任务都在同一线程上串行)</span></span><br><span class="line"><span class="meta">@EnableScheduling</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    SpringApplication.run(Application<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后启动项目查看打印</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">2019-04-03 11:15:10.001  INFO 9252 --- [   scheduling-1] com.lx.timer.springtask.TestSpringTask   : &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&gt;&gt;&gt;&gt;&gt;使用cron:1554261310001</span><br><span class="line">2019-04-03 11:15:12.209  INFO 9252 --- [   scheduling-1] com.lx.timer.springtask.TestSpringTask   : &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&gt;&gt;&gt;&gt;&gt;使用fixedRate:1554261312209</span><br><span class="line">2019-04-03 11:15:12.211  INFO 9252 --- [   scheduling-1] com.lx.timer.springtask.TestSpringTask   : &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&gt;&gt;&gt;&gt;&gt;使用fixedDelay:1554261312211</span><br><span class="line">2019-04-03 11:15:15.002  INFO 9252 --- [   scheduling-1] com.lx.timer.springtask.TestSpringTask   : &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&gt;&gt;&gt;&gt;&gt;使用cron:1554261315002</span><br></pre></td></tr></table></figure><p>可以看到三个定时任务都已经执行，并且使同一个线程中串行执行，如果只有一个定时任务，这样做肯定没问题，当定时任务增多，如果一个任务卡死，会导致其他任务也无法执行，所以我们需要修改为多线程执行</p><h4 id="修改Spring-Task为多线程执行"><a href="#修改Spring-Task为多线程执行" class="headerlink" title="修改Spring Task为多线程执行"></a>修改Spring Task为多线程执行</h4><p>新建一个AsyncConfig类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="comment">//开启异步事件的支持</span></span><br><span class="line"><span class="meta">@EnableAsync</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AsyncConfig</span> </span>&#123;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 以下参数均从yml配置文件中获取</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">  <span class="meta">@Value</span>(<span class="string">"$&#123;async.core-pool-size&#125;"</span>)</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> corePoolSize;</span><br><span class="line">  <span class="meta">@Value</span>(<span class="string">"$&#123;async.max-pool-size&#125;"</span>)</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> maxPoolSize;</span><br><span class="line">  <span class="meta">@Value</span>(<span class="string">"$&#123;async.queue-capacity&#125;"</span>)</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> quequeCapacity;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Bean</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Executor <span class="title">taskExecutor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ThreadPoolTaskExecutor executor = <span class="keyword">new</span> ThreadPoolTaskExecutor();</span><br><span class="line">    executor.setCorePoolSize(corePoolSize);</span><br><span class="line">    executor.setMaxPoolSize(maxPoolSize);</span><br><span class="line">    executor.setQueueCapacity(quequeCapacity);</span><br><span class="line">    executor.initialize();</span><br><span class="line">    <span class="keyword">return</span> executor;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后再定时任务的类或者方法上添加<code>@Async</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="comment">//对当前类开启异步（开启后每个方法的执行均在不同的线程中），也可以加在方法上</span></span><br><span class="line"><span class="meta">@Async</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestSpringTask</span> </span>&#123;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 通过表达式来配置任务执行时间</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="meta">@Scheduled</span>(cron = <span class="string">"0/5 * * * * *"</span>)</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">scheduled</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    log.info(<span class="string">"=====&gt;&gt;&gt;&gt;&gt;使用cron:&#123;&#125;"</span>, System.currentTimeMillis());</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 按一定频率执行的定时任务</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="meta">@Scheduled</span>(fixedRate = <span class="number">5000</span>)</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">scheduled1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    log.info(<span class="string">"=====&gt;&gt;&gt;&gt;&gt;使用fixedRate:&#123;&#125;"</span>, System.currentTimeMillis());</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 功能同fixedRate，但是可以配合initialDelay属性设置任务延时执行</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="meta">@Scheduled</span>(fixedDelay = <span class="number">5000</span>)</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">scheduled2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    log.info(<span class="string">"=====&gt;&gt;&gt;&gt;&gt;使用fixedDelay:&#123;&#125;"</span>, System.currentTimeMillis());</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重启项目，可以看到每个任务都是在不同的线程</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">2019-04-03 11:19:47.020  INFO 13420 --- [ taskExecutor-4] com.lx.timer.springtask.TestSpringTask   : &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&gt;&gt;&gt;&gt;&gt;使用fixedRate:1554261587020</span><br><span class="line">2019-04-03 11:19:47.024  INFO 13420 --- [ taskExecutor-5] com.lx.timer.springtask.TestSpringTask   : &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&gt;&gt;&gt;&gt;&gt;使用fixedDelay:1554261587024</span><br><span class="line">2019-04-03 11:19:50.002  INFO 13420 --- [ taskExecutor-6] com.lx.timer.springtask.TestSpringTask   : &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&gt;&gt;&gt;&gt;&gt;使用cron:1554261590002</span><br><span class="line">2019-04-03 11:19:52.020  INFO 13420 --- [ taskExecutor-7] com.lx.timer.springtask.TestSpringTask   : &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&gt;&gt;&gt;&gt;&gt;使用fixedRate:1554261592020</span><br><span class="line">2019-04-03 11:19:52.025  INFO 13420 --- [ taskExecutor-8] com.lx.timer.springtask.TestSpringTask   : &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&gt;&gt;&gt;&gt;&gt;使用fixedDelay:1554261592025</span><br></pre></td></tr></table></figure><h4 id="执行时间的配置"><a href="#执行时间的配置" class="headerlink" title="执行时间的配置"></a>执行时间的配置</h4><p>在上面的定时任务中，我们在方法上使用<code>@Scheduled</code>注解来设置任务的执行时间，并且使用3三种属性配置方式</p><ul><li>fixedRate: 定义一个按照一定频率执行的定时任务</li><li>fixedDelay: 定义一个按一定频率执行的定时任务，与上边不同的是，该属性可以配合initialDelay，定义该任务延迟执行时间</li><li>cron: 通过表达式来配置任务执行时间</li></ul><h4 id="cron表达式详细参考下边的博客"><a href="#cron表达式详细参考下边的博客" class="headerlink" title="cron表达式详细参考下边的博客"></a>cron表达式详细参考下边的博客</h4><blockquote><p><a href="https://blog.csdn.net/qq_33430083/article/details/89024540" target="_blank" rel="noopener">https://blog.csdn.net/qq_33430083/article/details/89024540</a></p></blockquote><h3 id="整合Quartz"><a href="#整合Quartz" class="headerlink" title="整合Quartz"></a>整合Quartz</h3><p>添加依赖<br>如果SpringBoot版本是2.0.0以后的，则在spring-boot-starter中已经包含了quart的依赖，则可以直接使用spring-boot-starter-quartz依赖:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-quartz<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如果是1.5.9则要使用以下添加依赖:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.quartz-scheduler<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>quartz<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context-support<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>注意：如果项目中springboot使用的是springboot2.0以后的版本，去引用<code>quartz</code>和<code>spring-context-support</code>包的话，quartz任务并不会执行</strong></p><h4 id="1-创建任务类"><a href="#1-创建任务类" class="headerlink" title="1.创建任务类"></a>1.创建任务类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestQuartz</span> <span class="keyword">extends</span> <span class="title">QuartzJobBean</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 执行定时任务</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> jobExecutionContext</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@throws</span> JobExecutionException</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">executeInternal</span><span class="params">(JobExecutionContext jobExecutionContext)</span> <span class="keyword">throws</span> JobExecutionException </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"quartz task"</span> + System.currentTimeMillis());</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-创建配置类QuartzConfig"><a href="#2-创建配置类QuartzConfig" class="headerlink" title="2.创建配置类QuartzConfig"></a>2.创建配置类QuartzConfig</h4><p>执行方式有两种写法一种是使用<code>CronScheduleBuilder</code>类执行cron表达式<br>另一种是使用<code>SimpleScheduleBuilder</code>类指定间隔时间</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QuartzConfig</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Bean</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> JobDetail <span class="title">teatQuartzDetail</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> JobBuilder.newJob(TestQuartz<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line">            .withIdentity("testQuartz").storeDurably().build();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Bean</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Trigger <span class="title">testQuartzTrigger</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//使用cron表达式</span></span><br><span class="line">    CronScheduleBuilder cronScheduleBuilder = CronScheduleBuilder.cronSchedule(<span class="string">"*/5 * * * * ?"</span>);</span><br><span class="line">    <span class="comment">//指定间隔时间</span></span><br><span class="line"><span class="comment">//    SimpleScheduleBuilder scheduleBuilder = SimpleScheduleBuilder.simpleSchedule()</span></span><br><span class="line"><span class="comment">//            //设置时间周期单位秒，也可选择其他函数</span></span><br><span class="line"><span class="comment">//            .withIntervalInSeconds(3)</span></span><br><span class="line"><span class="comment">//            .repeatForever();</span></span><br><span class="line">    <span class="keyword">return</span> TriggerBuilder.newTrigger().forJob(teatQuartzDetail())</span><br><span class="line">            .withIdentity(<span class="string">"testQuartz"</span>)</span><br><span class="line">            .withSchedule(cronScheduleBuilder)</span><br><span class="line">            .build();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-启动项目"><a href="#3-启动项目" class="headerlink" title="3.启动项目"></a>3.启动项目</h4><p>控制台打印如下，配置成功</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">quartz task1554273605007</span><br><span class="line">quartz task1554273610000</span><br><span class="line">quartz task1554273615000</span><br></pre></td></tr></table></figure><h2 id="Spring-Task和Quarz的区别"><a href="#Spring-Task和Quarz的区别" class="headerlink" title="Spring Task和Quarz的区别"></a>Spring Task和Quarz的区别</h2><p>Quartz在项目启动的时候会执行，使用注解的方式会在项目启动完成后时间算起执行，少一次执行调度</p><h2 id="Demo地址"><a href="#Demo地址" class="headerlink" title="Demo地址"></a>Demo地址</h2><blockquote><p><a href="https://gitee.com/fengzxia/spring-boot-timer-learn" target="_blank" rel="noopener">https://gitee.com/fengzxia/spring-boot-timer-learn</a></p></blockquote><h2 id="参考博客地址"><a href="#参考博客地址" class="headerlink" title="参考博客地址"></a>参考博客地址</h2><blockquote><p><a href="https://juejin.im/post/5ca24fb1e51d454a490a4809?utm_source=gold_browser_extension" target="_blank" rel="noopener">https://juejin.im/post/5ca24fb1e51d454a490a4809?utm_source=gold_browser_extension</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> Spring </category>
          
          <category> SpringBoot </category>
          
          <category> 转载 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 定时任务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>spring-boot集成redis实现消息发布订阅模式，以及多个订阅模式的实现</title>
      <link href="/posts/1a2c31cb.html"/>
      <url>/posts/1a2c31cb.html</url>
      
        <content type="html"><![CDATA[<ul><li><strong>demo地址</strong><blockquote><p><a href="https://gitee.com/fengzxia/springboot-redis-queue" target="_blank" rel="noopener">https://gitee.com/fengzxia/springboot-redis-queue</a></p></blockquote><h2 id="1-需要的依赖"><a href="#1-需要的依赖" class="headerlink" title="1.需要的依赖"></a>1.需要的依赖</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">  &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;spring-boot-starter&lt;&#x2F;artifactId&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">  &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;spring-boot-starter-data-redis&lt;&#x2F;artifactId&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure><h2 id="2-配置redis以及连接池"><a href="#2-配置redis以及连接池" class="headerlink" title="2.配置redis以及连接池"></a>2.配置redis以及连接池</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># redis</span><br><span class="line">spring:</span><br><span class="line">  redis:</span><br><span class="line">    host: 127.0.0.1</span><br><span class="line">    port: 6379</span><br><span class="line">#    password:</span><br><span class="line">    database: 1</span><br><span class="line">    timeout: 5000</span><br><span class="line">    jedis:</span><br><span class="line">      pool:</span><br><span class="line">        max-active: 8</span><br><span class="line">        max-wait: 1</span><br><span class="line">        max-idle: 500</span><br><span class="line">        min-idle: 0</span><br></pre></td></tr></table></figure><h2 id="3-创建消息的发布者和消息处理者类"><a href="#3-创建消息的发布者和消息处理者类" class="headerlink" title="3.创建消息的发布者和消息处理者类"></a>3.创建消息的发布者和消息处理者类</h2><h3 id="消息发布者"><a href="#消息发布者" class="headerlink" title="消息发布者"></a>消息发布者</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableScheduling</span><span class="comment">//开启定时器功能</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MessageSender</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Autowired</span></span><br><span class="line">  <span class="keyword">private</span> StringRedisTemplate stringRedisTemplate;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 间隔2秒，通过stringRedisTemplate对象向redis消息队列chat频道发布消息</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="meta">@Scheduled</span>(fixedDelay = <span class="number">2000</span>)</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMessage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    stringRedisTemplate.convertAndSend(<span class="string">"chat"</span>, String.valueOf(Math.random()));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="消息处理器POJO"><a href="#消息处理器POJO" class="headerlink" title="消息处理器POJO"></a>消息处理器POJO</h3><ul><li><strong><code>@Component</code>: 自动注入，在 <code>RedisConfig</code> 中不用再写 <code>@Bean</code> 注入 <code>MessageReceiver</code></strong><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MessageReceiver</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 接收消息方法</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receiverMessage</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"MessageReceiver收到一条新消息："</span> + message);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="4-设置消息发布者、消息处理者POJO、redis消息监听容器以及redis监听器注入IOC容器"><a href="#4-设置消息发布者、消息处理者POJO、redis消息监听容器以及redis监听器注入IOC容器" class="headerlink" title="4.设置消息发布者、消息处理者POJO、redis消息监听容器以及redis监听器注入IOC容器"></a>4.设置消息发布者、消息处理者POJO、redis消息监听容器以及redis监听器注入IOC容器</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * redis配置</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 段誉</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2019-03-25 9:59</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span><span class="comment">//相当于xml中的beans</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Bean</span></span><br><span class="line">  <span class="function">RedisMessageListenerContainer <span class="title">container</span><span class="params">(RedisConnectionFactory connectionFactory,</span></span></span><br><span class="line"><span class="function"><span class="params">                                          MessageListenerAdapter listenerAdapter)</span> </span>&#123;</span><br><span class="line">    RedisMessageListenerContainer container = <span class="keyword">new</span> RedisMessageListenerContainer();</span><br><span class="line">    container.setConnectionFactory(connectionFactory);</span><br><span class="line">    <span class="comment">//订阅了一个叫chat的通道</span></span><br><span class="line">    container.addMessageListener(listenerAdapter, <span class="keyword">new</span> PatternTopic(<span class="string">"chat"</span>));</span><br><span class="line">    <span class="keyword">return</span> container;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 消息监听器适配器，绑定消息处理器，利用反射技术调用消息处理器的业务方法</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> receiver</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="meta">@Bean</span></span><br><span class="line">  <span class="function">MessageListenerAdapter <span class="title">listenerAdapter</span><span class="params">(MessageReceiver receiver)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//给messageListenerAdapter 传入一个消息接受的处理器，利用反射的方法调用“receiveMessage”</span></span><br><span class="line">    <span class="comment">//不填defaultListenerMethod默认调用handleMessage</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> MessageListenerAdapter(receiver, <span class="string">"receiverMessage"</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 读取内容的template</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="meta">@Bean</span></span><br><span class="line">  <span class="function">StringRedisTemplate <span class="title">template</span><span class="params">(RedisConnectionFactory connectionFactory)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> StringRedisTemplate(connectionFactory);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-启动项目查看控制台"><a href="#5-启动项目查看控制台" class="headerlink" title="5.启动项目查看控制台"></a>5.启动项目查看控制台</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">MessageReceiver收到一条新消息：0.7372683821918483</span><br><span class="line">MessageReceiver收到一条新消息：0.800095651812774</span><br></pre></td></tr></table></figure><p>配置成功</p><h2 id="6-如何配置多个监听通道"><a href="#6-如何配置多个监听通道" class="headerlink" title="6.如何配置多个监听通道"></a>6.如何配置多个监听通道</h2><h3 id="方式1：一个监听器订阅多个通道"><a href="#方式1：一个监听器订阅多个通道" class="headerlink" title="方式1：一个监听器订阅多个通道"></a>方式1：一个监听器订阅多个通道</h3><p>1.监听容器配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function">RedisMessageListenerContainer <span class="title">container</span><span class="params">(RedisConnectionFactory connectionFactory,</span></span></span><br><span class="line"><span class="function"><span class="params">                                        MessageListenerAdapter listenerAdapter)</span> </span>&#123;</span><br><span class="line">  RedisMessageListenerContainer container = <span class="keyword">new</span> RedisMessageListenerContainer();</span><br><span class="line">  container.setConnectionFactory(connectionFactory);</span><br><span class="line">  <span class="comment">//订阅了一个叫chat的通道</span></span><br><span class="line">  container.addMessageListener(listenerAdapter, <span class="keyword">new</span> PatternTopic(<span class="string">"chat"</span>));</span><br><span class="line">  </span><br><span class="line">  container.addMessageListener(listenerAdapter, <span class="keyword">new</span> PatternTopic(<span class="string">"chat1"</span>));</span><br><span class="line">  <span class="keyword">return</span> container;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.添加一个新的消息发布者</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableScheduling</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MessageSender</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Autowired</span></span><br><span class="line">  <span class="keyword">private</span> StringRedisTemplate stringRedisTemplate;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 间隔2秒，通过stringRedisTemplate对象向redis消息队列chat1频道发布消息</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="meta">@Scheduled</span>(fixedDelay = <span class="number">2000</span>)</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMessage1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    stringRedisTemplate.convertAndSend(<span class="string">"chat1"</span>, String.valueOf(Math.random()));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Scheduled</span>(fixedDelay = <span class="number">2000</span>)</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMessage2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    stringRedisTemplate.convertAndSend(<span class="string">"chat2"</span>, String.valueOf(System.currentTimeMillis()));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.启动项目查看控制台打印</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">MessageReceiver收到一条新消息：0.9988032526665156</span><br><span class="line">MessageReceiver收到一条新消息：来自chat1的消息0.5760191019007642</span><br><span class="line">MessageReceiver收到一条新消息：0.37241454741448377</span><br><span class="line">MessageReceiver收到一条新消息：来自chat1的消息0.639498468451238</span><br></pre></td></tr></table></figure><p>说明配置成功</p><h3 id="方式2：配置多个监听器监听不同的通道"><a href="#方式2：配置多个监听器监听不同的通道" class="headerlink" title="方式2：配置多个监听器监听不同的通道"></a>方式2：配置多个监听器监听不同的通道</h3><h4 id="1-注入一个新的bean，名字要和之前不一样，调用-MessageReceiver-的-receiverMessage2-方法。"><a href="#1-注入一个新的bean，名字要和之前不一样，调用-MessageReceiver-的-receiverMessage2-方法。" class="headerlink" title="1.注入一个新的bean，名字要和之前不一样，调用 MessageReceiver 的 receiverMessage2 方法。"></a>1.注入一个新的bean，名字要和之前不一样，调用 <code>MessageReceiver</code> 的 <code>receiverMessage2</code> 方法。</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function">MessageListenerAdapter <span class="title">listenerAdapter2</span><span class="params">(MessageReceiver receiver)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> MessageListenerAdapter(receiver, <span class="string">"receiverMessage2"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>这里也可以自己新注入一个新的 <code>Receiver</code> 叫 <code>MessageReceiver2</code><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MessageReceiver2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 接收消息方法</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receiverMessage</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"MessageReceiver收到一条新消息："</span> + message);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function">MessageListenerAdapter <span class="title">listenerAdapter2</span><span class="params">(MessageReceiver2 receiver)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> MessageListenerAdapter(receiver, <span class="string">"receiverMessage"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="2-配置监听容器，这里参数命名要和上边bean注入的方法名一致"><a href="#2-配置监听容器，这里参数命名要和上边bean注入的方法名一致" class="headerlink" title="2.配置监听容器，这里参数命名要和上边bean注入的方法名一致"></a>2.配置监听容器，<strong>这里参数命名要和上边bean注入的方法名一致</strong></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function">RedisMessageListenerContainer <span class="title">container</span><span class="params">(RedisConnectionFactory connectionFactory,</span></span></span><br><span class="line"><span class="function"><span class="params">                                        MessageListenerAdapter listenerAdapter1,</span></span></span><br><span class="line"><span class="function"><span class="params">                                        MessageListenerAdapter listenerAdapter2)</span> </span>&#123;</span><br><span class="line">  RedisMessageListenerContainer container = <span class="keyword">new</span> RedisMessageListenerContainer();</span><br><span class="line">  container.setConnectionFactory(connectionFactory);</span><br><span class="line">  <span class="comment">//订阅了一个叫chat的通道</span></span><br><span class="line">  container.addMessageListener(listenerAdapter1, <span class="keyword">new</span> PatternTopic(<span class="string">"chat"</span>));</span><br><span class="line">  container.addMessageListener(listenerAdapter2, <span class="keyword">new</span> PatternTopic(<span class="string">"chat1"</span>));</span><br><span class="line">  <span class="keyword">return</span> container;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-添加一个新的消息发布者"><a href="#3-添加一个新的消息发布者" class="headerlink" title="3.添加一个新的消息发布者"></a>3.添加一个新的消息发布者</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//开启定时器功能</span></span><br><span class="line"><span class="meta">@EnableScheduling</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MessageSender</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Autowired</span></span><br><span class="line">  <span class="keyword">private</span> StringRedisTemplate stringRedisTemplate;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 间隔2秒，通过stringRedisTemplate对象向redis消息队列chat1频道发布消息</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="meta">@Scheduled</span>(fixedDelay = <span class="number">2000</span>)</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMessage1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    stringRedisTemplate.convertAndSend(<span class="string">"chat1"</span>, String.valueOf(Math.random()));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Scheduled</span>(fixedDelay = <span class="number">2000</span>)</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMessage2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    stringRedisTemplate.convertAndSend(<span class="string">"chat2"</span>, String.valueOf(System.currentTimeMillis()));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-启动项目打印日志如下"><a href="#4-启动项目打印日志如下" class="headerlink" title="4.启动项目打印日志如下"></a>4.启动项目打印日志如下</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">收到一条chat2新消息：1555564092816</span><br><span class="line">收到一条chat1新消息：0.257614690680789</span><br><span class="line">收到一条chat2新消息：1555564094830</span><br><span class="line">收到一条chat1新消息：0.3996585101720651</span><br><span class="line">收到一条chat2新消息：1555564096833</span><br><span class="line">收到一条chat1新消息：0.6767629866464419</span><br><span class="line">收到一条chat2新消息：1555564098836</span><br><span class="line">收到一条chat1新消息：0.14106474791507906</span><br></pre></td></tr></table></figure><p>配置成功</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> Spring </category>
          
          <category> SpringBoot </category>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 订阅发布者模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>windows下安装redis后启动占用c盘大量空间解决办法</title>
      <link href="/posts/b7f6a97c.html"/>
      <url>/posts/b7f6a97c.html</url>
      
        <content type="html"><![CDATA[<p>Windows版Redis启动后，会在C盘自动创建一个很大的缓存文件，<code>C:\Users\{你的用户名}\AppData\Local\Redis\RedisQFolk_****.dat</code>，一个大概就有7G左右，如果系统异常关闭，还会再新建一个差不多大小的缓存文件，之前的不会自动删除掉，会导致硬盘占用量越来越大。<br>我们可以通过自定义路径即可将其转移到其他分区，并限制其大小。</p><h2 id="解决办法如下："><a href="#解决办法如下：" class="headerlink" title="解决办法如下："></a>解决办法如下：</h2><p>找到redis启动时用到的配置文件redis.windows.conf，然后打开，添加配置，如果存在则修改</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 指定生成的文件最大为4G</span><br><span class="line">maxheap 4294967296</span><br><span class="line"># 指定文件生成到D盘的MyRedisSwap目录下</span><br><span class="line">heapdir D:\MyRedisSwap\</span><br></pre></td></tr></table></figure><ul><li><strong>注意:需要在D盘创建过MyRedisSwap文件夹后redis才能启动，中间要有空格，maxheap单位是byte，修改好后重启即可</strong></li></ul><p>启动前：<br><img src="https://img-blog.csdnimg.cn/20190323144926477.png" alt="在这里插入图片描述"><br>启动后：<br><img src="https://img-blog.csdnimg.cn/20190323144949998.png" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> DB </category>
          
          <category> NoSQL </category>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 占空间 </tag>
            
            <tag> Windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot项目中访问controller接口报Creation of SecureRandom instance for session ID generation using</title>
      <link href="/posts/56379dd4.html"/>
      <url>/posts/56379dd4.html</url>
      
        <content type="html"><![CDATA[<h2 id="bug原因"><a href="#bug原因" class="headerlink" title="bug原因"></a>bug原因</h2><p>今天测试人员在测试的时候发现获取图形验证码接口在访问时候加载速度非常慢，要一两分钟才能加载出来，看日志的时候发现报了下边的一段警告日志：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2019-01-24 09:36:33.654 [http-nio-8080-exec-5] WARN org.apache.catalina.util.SessionIdGeneratorBase:180 - Creation of SecureRandom instance for session ID generation using [SHA1PRNG] took [106,771] milliseconds.</span><br><span class="line">2019-01-24 09:36:33.656 [http-nio-8080-exec-3] WARN org.apache.catalina.util.SessionIdGeneratorBase:180 - Creation of SecureRandom instance for session ID generation using [SHA1PRNG] took [26,105] milliseconds.</span><br></pre></td></tr></table></figure><p>通过搜索发现原因如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">linux默认的SecureRandom实现方式是非常慢的NativePRNG，而在Windows上的默认实现是SHA1PRNG，你也可以在Linux上指定使用该方式。</span><br><span class="line"></span><br><span class="line">……NativePRNG会不断从操作系统获取熵（从&#x2F;dev&#x2F;urandom读取），其它PRNG则不会获取这些额外的熵。</span><br><span class="line"></span><br><span class="line">AESCounterRNG差不多比SHA1PRNG快的十倍，而如果我没记错，SHA1PRNG比NativePRNG快两到三倍</span><br><span class="line"></span><br><span class="line">SecureRandom是java用来获取高级随机数的实现,而访问获取图形验证码接口速度很慢的原因就是因为在linux上项目生成随机数的时候使用的是最慢的NativePRNG导致的</span><br></pre></td></tr></table></figure><h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><ol><li><p>在 JVM 环境中解决（我在项目中使用的是这种方式）<br>打开$JAVA_PATH/jre/lib/security/java.security这个文件找到修改该<code>securerandom.source</code>的值</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">修改前</span><br><span class="line">securerandom.source&#x3D;file:&#x2F;dev&#x2F;random</span><br><span class="line"></span><br><span class="line">修改后</span><br><span class="line">securerandom.source&#x3D;file:&#x2F;dev&#x2F;.&#x2F;urandom</span><br></pre></td></tr></table></figure><p> 如果为SpringBoot项目可以在执行jar启动命令中添加配置</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">修改前</span><br><span class="line">java -jar pc.jar</span><br><span class="line"></span><br><span class="line">修改后</span><br><span class="line">java -jar -Djava.security.egd&#x3D;file:&#x2F;dev&#x2F;.&#x2F;urandom pc.jar</span><br></pre></td></tr></table></figure></li><li><p>在Tomcat环境中解决</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">可以通过配置 JRE 使用非阻塞的 Entropy Source：</span><br><span class="line">在 catalina.sh 中加入这么一行：-Djava.security.egd&#x3D;file:&#x2F;dev&#x2F;.&#x2F;urandom 即可。</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> Spring </category>
          
          <category> SpringBoot </category>
          
          <category> BUG </category>
          
          <category> 警告 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SessionIdGeneratorBase </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring项目logback配置多环境日志输出</title>
      <link href="/posts/5f5c7dc7.html"/>
      <url>/posts/5f5c7dc7.html</url>
      
        <content type="html"><![CDATA[<h2 id="SpringBoot项目"><a href="#SpringBoot项目" class="headerlink" title="SpringBoot项目"></a>SpringBoot项目</h2><h3 id="1-区分线上线下环境配置"><a href="#1-区分线上线下环境配置" class="headerlink" title="1.区分线上线下环境配置"></a>1.区分线上线下环境配置</h3><p>maven项目：在pom.xml文件中的dependencies标签前添加如下代码<br> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">profiles</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--除了dev、pro还可以再添加多个配置--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>dev<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--设置默认为dev环境--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">activation</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">activeByDefault</span>&gt;</span>true<span class="tag">&lt;/<span class="name">activeByDefault</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">activation</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--标签中的值根据自己的项目环境名去添加，标签名可以自定义，能写多个--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">profileActive</span>&gt;</span>dev<span class="tag">&lt;/<span class="name">profileActive</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">id</span>&gt;</span>pro<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">profileActive</span>&gt;</span>prod<span class="tag">&lt;/<span class="name">profileActive</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">profiles</span>&gt;</span></span><br></pre></td></tr></table></figure><br> pom文件配置后可以在application配置文件中通过@profileActive@方式拿到profileActive的值<br> <figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"> #区分springboot是线上还是线下环境</span></span><br><span class="line"><span class="meta">spring.profiles.active</span>=<span class="string">@profileActive@</span></span><br></pre></td></tr></table></figure></p><h3 id="2-在logback中通过如下方式进行区分环境"><a href="#2-在logback中通过如下方式进行区分环境" class="headerlink" title="2.在logback中通过如下方式进行区分环境"></a>2.在logback中通过如下方式进行区分环境</h3><p> 可以根据不同的环境设置不同的日志输出路径<br> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">springProfile</span> <span class="attr">name</span>=<span class="string">"prod"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"LOG_HOME"</span> <span class="attr">value</span>=<span class="string">"/opt/myapp/logs/mengmeng-admin"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">springProfile</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">springProfile</span> <span class="attr">name</span>=<span class="string">"dev"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"LOG_HOME"</span> <span class="attr">value</span>=<span class="string">"/opt/myapp/logs/mengmeng-admin-dev"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">springProfile</span>&gt;</span></span><br></pre></td></tr></table></figure></p><blockquote><p>如果参照这个配置后启动报 <code>Logback configuration error detected:</code> 错误<br>请参考这篇博客解决 <a href="https://blog.csdn.net/qq_33430083/article/details/91360771" target="_blank" rel="noopener">https://blog.csdn.net/qq_33430083/article/details/91360771</a></p></blockquote><h2 id="SpringMVC项目"><a href="#SpringMVC项目" class="headerlink" title="SpringMVC项目"></a>SpringMVC项目</h2><h3 id="1-区分线上线下环境配置-1"><a href="#1-区分线上线下环境配置-1" class="headerlink" title="1.区分线上线下环境配置"></a>1.区分线上线下环境配置</h3><p> 同springboot一样<br> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">profiles</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--除了dev、pro还可以再添加多个配置--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>dev<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--设置默认为dev环境--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">activation</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">activeByDefault</span>&gt;</span>true<span class="tag">&lt;/<span class="name">activeByDefault</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">activation</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--标签中的值根据自己的项目环境名去添加，标签名可以自定义，能写多个--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">profileActive</span>&gt;</span>devlopment<span class="tag">&lt;/<span class="name">profileActive</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">id</span>&gt;</span>pro<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">profileActive</span>&gt;</span>production<span class="tag">&lt;/<span class="name">profileActive</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">profiles</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h3 id="2-在pom文件中引入maven-war-plugin插件，这样作是为了在编译时，web-xml文件能识别-profileActive"><a href="#2-在pom文件中引入maven-war-plugin插件，这样作是为了在编译时，web-xml文件能识别-profileActive" class="headerlink" title="2.在pom文件中引入maven-war-plugin插件，这样作是为了在编译时，web.xml文件能识别${profileActive}"></a>2.在pom文件中引入<code>maven-war-plugin</code>插件，这样作是为了在编译时，web.xml文件能识别${profileActive}</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-war-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">webResources</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/webapp<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>true<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">webResources</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-在web-xml文件中修改spring-profiles-default配置，没有则添加"><a href="#3-在web-xml文件中修改spring-profiles-default配置，没有则添加" class="headerlink" title="3.在web.xml文件中修改spring.profiles.default配置，没有则添加"></a>3.在web.xml文件中修改spring.profiles.default配置，没有则添加</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>spring.profiles.default<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- profileActive就是在pom配置的参数名 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>$&#123;profileActive&#125;<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="4-创建一个监听器，继承ContextLoaderListener"><a href="#4-创建一个监听器，继承ContextLoaderListener" class="headerlink" title="4.创建一个监听器，继承ContextLoaderListener"></a>4.创建一个监听器，继承ContextLoaderListener</h3><p>通过监听器获取到web.xml中<code>spring.profiles.default</code>的值，存入系统属性中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取项目开发环境监听器</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 段誉</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2018-09-19 16:56</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">XyyContextLoaderListener</span> <span class="keyword">extends</span> <span class="title">ContextLoaderListener</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextInitialized</span><span class="params">(ServletContextEvent event)</span> </span>&#123;</span><br><span class="line">    String attribute = event.getServletContext().getInitParameter(<span class="string">"spring.profiles.default"</span>);</span><br><span class="line">    System.setProperty(<span class="string">"DEV_MODEL"</span>, attribute);</span><br><span class="line">    <span class="keyword">super</span>.contextInitialized(event);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在web.xml中添加监听器配置，在配置spring.profiles.default标签的后边添加</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>com.weijian.xiaoyingying.listener.XyyContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="5-引入logback使用if判断需要的依赖"><a href="#5-引入logback使用if判断需要的依赖" class="headerlink" title="5.引入logback使用if判断需要的依赖"></a>5.引入logback使用if判断需要的依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.codehaus.janino<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>janino<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.codehaus.janino/commons-compiler --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.codehaus.janino<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-compiler<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="6-在logback中使用if判断区分环境"><a href="#6-在logback中使用if判断区分环境" class="headerlink" title="6.在logback中使用if判断区分环境"></a>6.在logback中使用if判断区分环境</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">condition</span>=<span class="string">'property("DEV_MODEL").contains("production")'</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">then</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"LOG_HOME"</span> <span class="attr">value</span>=<span class="string">"/opt/myapp/logs/mjsadmin-pro"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">then</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">else</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"LOG_HOME"</span> <span class="attr">value</span>=<span class="string">"/opt/myapp/logs/mjsadmin-dev"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">else</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="配置后没有生效的原因"><a href="#配置后没有生效的原因" class="headerlink" title="配置后没有生效的原因"></a>配置后没有生效的原因</h3><ul><li><strong>有些项目可能因为配置的原因导致logback初始化执行在了<code>ContextLoaderListener</code> 监听器之前导致配置没有生效</strong><h2 id="如果SpringMVC按照上述配置无法成功解决办法"><a href="#如果SpringMVC按照上述配置无法成功解决办法" class="headerlink" title="如果SpringMVC按照上述配置无法成功解决办法"></a>如果SpringMVC按照上述配置无法成功解决办法</h2><h3 id="1-引入logback与spring整合的依赖设置后可以自定义logback-xml的文件名-路径"><a href="#1-引入logback与spring整合的依赖设置后可以自定义logback-xml的文件名-路径" class="headerlink" title="1.引入logback与spring整合的依赖设置后可以自定义logback.xml的文件名/路径"></a>1.引入logback与spring整合的依赖设置后可以自定义logback.xml的文件名/路径</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.logback-extensions<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logback-ext-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="2-将logback-xml文件的名字修改，比如叫logback-aaa-xml"><a href="#2-将logback-xml文件的名字修改，比如叫logback-aaa-xml" class="headerlink" title="2.将logback.xml文件的名字修改，比如叫logback-aaa.xml"></a>2.将logback.xml文件的名字修改，比如叫logback-aaa.xml</h3><h3 id="3-在web-xml中配置logback配置文件初始化（注：要写在spring配置的上边）"><a href="#3-在web-xml中配置logback配置文件初始化（注：要写在spring配置的上边）" class="headerlink" title="3.在web.xml中配置logback配置文件初始化（注：要写在spring配置的上边）"></a>3.在web.xml中配置logback配置文件初始化（注：要写在spring配置的上边）</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>logbackConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:logback-aaa.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="4-将之前配置的监听器改成继承LogbackConfigListener，配置logback文件初始化的监听器"><a href="#4-将之前配置的监听器改成继承LogbackConfigListener，配置logback文件初始化的监听器" class="headerlink" title="4.将之前配置的监听器改成继承LogbackConfigListener，配置logback文件初始化的监听器"></a>4.将之前配置的监听器改成继承LogbackConfigListener，配置logback文件初始化的监听器</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 项目开发/生产环境监听器</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 段誉</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2019-02-21 10:28</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ErpContextLoaderListener</span> <span class="keyword">extends</span> <span class="title">LogbackConfigListener</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextInitialized</span><span class="params">(ServletContextEvent event)</span> </span>&#123;</span><br><span class="line">    String attribute = event.getServletContext().getInitParameter(<span class="string">"spring.profiles.default"</span>);</span><br><span class="line">    System.setProperty(<span class="string">"DEV_MODEL"</span>, attribute);</span><br><span class="line">    <span class="keyword">super</span>.contextInitialized(event);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> Spring </category>
          
          <category> SpringBoot </category>
          
          <category> SpringMVC </category>
          
          <category> logback </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 区分项目环境 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springboot项目中使用redis对数据进行解析报Invalid numeric value: Leading zeroes not allowed错误</title>
      <link href="/posts/5b6de3c3.html"/>
      <url>/posts/5b6de3c3.html</url>
      
        <content type="html"><![CDATA[<h2 id="错误分析"><a href="#错误分析" class="headerlink" title="错误分析"></a>错误分析</h2><p>在使用redis获取发送的短信验证码，偶尔会报如下错误信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2019</span>-<span class="number">01</span>-<span class="number">15</span> <span class="number">10</span>:<span class="number">32</span>:<span class="number">15.104</span> [http-nio-<span class="number">8080</span>-exec-<span class="number">10</span>] WARN  org.springframework.web.servlet.PageNotFound:<span class="number">1176</span> - No mapping found f lowed</span><br><span class="line"> at [Source: [B@<span class="number">2836</span>aebe; line: <span class="number">1</span>, column: <span class="number">2</span>]; nested exception is com.fasterxml.jackson.core.JsonParseException: Invalid numeric value: Leading zeroes not allowed</span><br><span class="line"> at [Source: [B@<span class="number">2836</span>aebe; line: <span class="number">1</span>, column: <span class="number">2</span>]</span><br><span class="line"> at org.springframework.data.redis.serializer.Jackson2JsonRedisSerializer.deserialize(Jackson2JsonRedisSerializer.java:<span class="number">73</span>)</span><br><span class="line"> at org.springframework.data.redis.core.AbstractOperations.deserializeValue(AbstractOperations.java:<span class="number">318</span>)</span><br><span class="line"> at org.springframework.data.redis.core.AbstractOperations$ValueDeserializingRedisCallback.doInRedis(AbstractOperations.java:<span class="number">58</span>)</span><br><span class="line"> at org.springframework.data.redis.core.RedisTemplate.execute(RedisTemplate.java:<span class="number">207</span>)</span><br><span class="line"> at org.springframework.data.redis.core.RedisTemplate.execute(RedisTemplate.java:<span class="number">169</span>)</span><br></pre></td></tr></table></figure><p>通过看日志发现是因为使用的jackson解析redis中存储的数据，会把<strong>纯数字</strong>的短信验证码当作是<strong>数字类型</strong>来解析，之所以偶尔会报错是因为生成的随机数验证码中可能会<strong>以0开头</strong>，导致jackson认为这是一个<strong>无效的数字</strong>才报的错，然后使用<code>RedisTemplate&lt;String, String&gt;</code>当作字符串的方式获取短信验证码仍然不行，还是使用的jackson解析短信验证码，检测redis的配置发现是因为<strong>项目中指定的redisTemplate的数据解析方式为jackson解析</strong><br><img src="https://img-blog.csdnimg.cn/20190323135041422.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMzNDMwMDgz,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="解决办法："><a href="#解决办法：" class="headerlink" title="解决办法："></a>解决办法：</h2><p>再配置一个StringRedisTemplate的redis模板：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span>(name = <span class="string">"stringRedisTemplate"</span>)</span><br><span class="line"> <span class="function"><span class="keyword">public</span> StringRedisTemplate <span class="title">stringRedisTemplate</span><span class="params">(RedisConnectionFactory</span></span></span><br><span class="line"><span class="function"><span class="params">   redisConnectionFactory)</span></span>&#123;</span><br><span class="line">     <span class="keyword">return</span> <span class="keyword">new</span> StringRedisTemplate(redisConnectionFactory);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>使用方法：<br><img src="https://img-blog.csdnimg.cn/2019032313532944.png" alt="在这里插入图片描述"></p><ul><li>在获取短信验证码的时候stringRedisTemplate来获取，这样就会把短信验证码通过字符串的方式解析，以0开头也不会报解析错误的问题</li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> Spring </category>
          
          <category> SpringBoot </category>
          
          <category> BUG </category>
          
          <category> Redis </category>
          
          <category> 异常 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JsonParseException </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringMVC 拦截器学习</title>
      <link href="/posts/421b140d.html"/>
      <url>/posts/421b140d.html</url>
      
        <content type="html"><![CDATA[<h2 id="demo地址"><a href="#demo地址" class="headerlink" title="demo地址"></a>demo地址</h2><blockquote><p><a href="https://gitee.com/fengzxia/spring-mvc-interceptor-learn" target="_blank" rel="noopener">https://gitee.com/fengzxia/spring-mvc-interceptor-learn</a></p></blockquote><h2 id="常见应用场景"><a href="#常见应用场景" class="headerlink" title="常见应用场景"></a>常见应用场景</h2><ol><li>日志记录:记录请求信息的日志，以便进行信息监控、信息统计、计算PV(Page View)等。</li><li>权限检查:如登录检测，进入处理器检测是否登录，如果没有直接返回到登录页面。</li><li>性能监控:有时候系统在某段时间莫名其妙的慢，可以通过拦截器在进入处理器之前记录开始时间，在处理完后记录结束时间，从而得到该请求的处理时间（如果有反向代理，如apache可以自动记录）。</li><li>通用行为:读取cookie得到用户信息并将用户对象放入请求，从而方便后续流程使用，还可以提取Locale、Theme信息等，只要是多个处理器(Controller)都需要的即可使用拦截器实现。</li><li>OpenSessionInView(在视图中打开会话):如Hibernate，在进入处理器打开Session，在完成后关闭Session。</li></ol><p>需要用到的jar，版本号可以根据自己项目中spring的版本号来些，我这里是<code>5.0.0.RELEASE</code>版本</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="拦截器接口如下"><a href="#拦截器接口如下" class="headerlink" title="拦截器接口如下"></a>拦截器接口如下</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.springframework.web.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.lang.Nullable;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.method.HandlerMethod;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">HandlerInterceptor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">default</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler,</span></span></span><br><span class="line"><span class="function"><span class="params">@Nullable ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler,</span></span></span><br><span class="line"><span class="function"><span class="params">@Nullable Exception ex)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>拦截器一共有3个回调方法:</p><ol><li><strong>perHandle</strong>:预处理回调方法，实现处理器的预处理（如登录检测、ip白名单拦截），第三个参数为响应的处理器；<br>返回值:true表示继续流程（如调用下一个拦截器或处理器）；<br>false表示中断（如登录检测失败，ip不在白名单），不会继续调用其他的拦截器或者处理器，此时需要通过response来产生响应；</li><li><strong>postHandle</strong>:后处理回调方法，实现处理器的后处理（但是在渲染视图之前），此时我们可以通过modelAndView(模型和视图对象)对模型数据进行处理或对视图进行处理，modelAndView也可能为null。</li><li><strong>afterCompletion</strong>:整个请求处理完毕回调方法，即在视图渲染完毕时回调，如性能监控中我们可以在次记录结束时间并输出消耗时间，还可以进行一些资源清理，类似try-catch-finally中的finally，但仅调用处理器执行链中<strong>perHandle返回true的拦截器afterCompletion</strong></li></ol><h3 id="拦截器适配器"><a href="#拦截器适配器" class="headerlink" title="拦截器适配器"></a>拦截器适配器</h3><p>有时候我们可能只需要实现三个回调方法中的某一个，如果实现<code>HandlerInterceptor</code>接口的话，三个方法必须实现，不管你需不需要，此时spring提供了一个<code>HandlerInterceptorAdapter</code>适配器(一种适配器设计模式的实现)，允许我们只实现需要的回调方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.springframework.web.servlet.handler;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.lang.Nullable;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.AsyncHandlerInterceptor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.ModelAndView;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">HandlerInterceptorAdapter</span> <span class="keyword">implements</span> <span class="title">AsyncHandlerInterceptor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler,</span></span></span><br><span class="line"><span class="function"><span class="params">@Nullable ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler,</span></span></span><br><span class="line"><span class="function"><span class="params">@Nullable Exception ex)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterConcurrentHandlingStarted</span><span class="params">(HttpServletRequest request, HttpServletResponse response,</span></span></span><br><span class="line"><span class="function"><span class="params">Object handler)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="运行流程图"><a href="#运行流程图" class="headerlink" title="运行流程图"></a>运行流程图</h2><p><img src="https://img-blog.csdnimg.cn/20190321135648982.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMzNDMwMDgz,size_16,color_FFFFFF,t_70" alt="正常流程" title="正常流程"><br>1-1 正常流程<br><br><img src="https://img-blog.csdnimg.cn/20190321135739106.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMzNDMwMDgz,size_16,color_FFFFFF,t_70" alt="中断流程" title="中断流程"><br>1-2 中断流程  </p><p>中断流程中，比如是HandlerInterceptor2中断的流程（preHandle返回false），此处仅调用它之前拦截器的preHandle返回true的afterCompletion方法。  </p><p>DispatcherServlet内部的工作流程</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//doDispatch方法  </span></span><br><span class="line"><span class="comment">//1、处理器拦截器的预处理（正序执行）  </span></span><br><span class="line">HandlerInterceptor[] interceptors = mappedHandler.getInterceptors();  </span><br><span class="line"><span class="keyword">if</span> (interceptors != <span class="keyword">null</span>) &#123;  </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; interceptors.length; i++) &#123;  </span><br><span class="line">    HandlerInterceptor interceptor = interceptors[i];  </span><br><span class="line">        <span class="keyword">if</span> (!interceptor.preHandle(processedRequest, response, mappedHandler.getHandler())) &#123;  </span><br><span class="line">            <span class="comment">//1.1、失败时触发afterCompletion的调用  </span></span><br><span class="line">            triggerAfterCompletion(mappedHandler, interceptorIndex, processedRequest, response, <span class="keyword">null</span>);  </span><br><span class="line">            <span class="keyword">return</span>;  </span><br><span class="line">        &#125;  </span><br><span class="line">        interceptorIndex = i;<span class="comment">//1.2、记录当前预处理成功的索引  </span></span><br><span class="line">  &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="comment">//2、处理器适配器调用我们的处理器  </span></span><br><span class="line">mv = ha.handle(processedRequest, response, mappedHandler.getHandler());  </span><br><span class="line"><span class="comment">//当我们返回null或没有返回逻辑视图名时的默认视图名翻译（详解4.15.5 RequestToViewNameTranslator）  </span></span><br><span class="line"><span class="keyword">if</span> (mv != <span class="keyword">null</span> &amp;&amp; !mv.hasView()) &#123;  </span><br><span class="line">    mv.setViewName(getDefaultViewName(request));  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="comment">//3、处理器拦截器的后处理（逆序）  </span></span><br><span class="line"><span class="keyword">if</span> (interceptors != <span class="keyword">null</span>) &#123;  </span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = interceptors.length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;  </span><br><span class="line">    HandlerInterceptor interceptor = interceptors[i];  </span><br><span class="line">    interceptor.postHandle(processedRequest, response, mappedHandler.getHandler(), mv);  </span><br><span class="line">  &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="comment">//4、视图的渲染  </span></span><br><span class="line"><span class="keyword">if</span> (mv != <span class="keyword">null</span> &amp;&amp; !mv.wasCleared()) &#123;  </span><br><span class="line">  render(mv, processedRequest, response);  </span><br><span class="line">  <span class="keyword">if</span> (errorView) &#123;  </span><br><span class="line">      WebUtils.clearErrorRequestAttributes(request);  </span><br><span class="line">  &#125;  </span><br><span class="line">  <span class="comment">//5、触发整个请求处理完毕回调方法afterCompletion  </span></span><br><span class="line">  triggerAfterCompletion(mappedHandler, interceptorIndex, processedRequest, response, <span class="keyword">null</span>); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>注:以上是流程的简化代码，中间省略了部分代码，不完整</li></ul><h2 id="正常流程"><a href="#正常流程" class="headerlink" title="正常流程"></a>正常流程</h2><h3 id="1-拦截器实现"><a href="#1-拦截器实现" class="headerlink" title="1.拦截器实现"></a>1.拦截器实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lx.interceptor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.ModelAndView;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.handler.HandlerInterceptorAdapter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 拦截器</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 段誉</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2019-03-21 9:03</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyHandlerInterceptor1</span> <span class="keyword">extends</span> <span class="title">HandlerInterceptorAdapter</span> </span>&#123;<span class="comment">////此处一般继承HandlerInterceptorAdapter适配器即可</span></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response,</span></span></span><br><span class="line"><span class="function"><span class="params">                           Object handler)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"--------------------------MyHandlerInterceptor1.preHandle"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler</span></span></span><br><span class="line"><span class="function"><span class="params">          , ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"--------------------------MyHandlerInterceptor1.postHandle"</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response,</span></span></span><br><span class="line"><span class="function"><span class="params">                              Object handler, Exception ex)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"--------------------------MyHandlerInterceptor1.afterCompletion"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上是MyHandlerInterceptor1实现，MyHandlerInterceptor2同理，只是输出内容为<code>MyHandlerInterceptor2</code>。</p><h3 id="2-控制器"><a href="#2-控制器" class="headerlink" title="2.控制器"></a>2.控制器</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lx.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 段誉</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2019-03-20 15:29</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IndexController</span> </span>&#123;</span><br><span class="line">  <span class="meta">@GetMapping</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">index</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"IndexController.index"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"/index"</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-springMVC配置文件"><a href="#3-springMVC配置文件" class="headerlink" title="3.springMVC配置文件"></a>3.springMVC配置文件</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:interceptors</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">"/**"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"com.lx.interceptor.MyHandlerInterceptor1"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">"/**"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;mvc:exclude-mapping path="/index/**"/&gt;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"com.lx.interceptor.MyHandlerInterceptor2"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:interceptors</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><code>mvc:mapping</code>指定拦截器链接</li><li><code>mvc:exclude-mapping</code>设置不过滤的链接</li><li>上边拦截器设置的顺序就是拦截器执行的顺序</li></ul><h3 id="4-启动测试服务"><a href="#4-启动测试服务" class="headerlink" title="4.启动测试服务"></a>4.启动测试服务</h3><p><a href="http://localhost:8080" target="_blank" rel="noopener">http://localhost:8080</a><br>控制台输出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">--------------------------MyHandlerInterceptor1.preHandle</span><br><span class="line">--------------------------MyHandlerInterceptor2.preHandle</span><br><span class="line">IndexController.index</span><br><span class="line">--------------------------MyHandlerInterceptor2.postHandle</span><br><span class="line">--------------------------MyHandlerInterceptor1.postHandle</span><br><span class="line">--------------------------MyHandlerInterceptor2.afterCompletion</span><br><span class="line">--------------------------MyHandlerInterceptor1.afterCompletion</span><br></pre></td></tr></table></figure><p>与图1-1执行顺序一样，验证<code>afterCompletion</code>是否在页面加载完后执行可以在该回调方法内设置断点，然后查看页面。<br>想要查看中断流程效果可以将MyHandlerInterceptor1或MyHandlerInterceptor2的preHandle返回值设置成false查看</p><h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><h3 id="性能监控"><a href="#性能监控" class="headerlink" title="性能监控"></a>性能监控</h3><ol><li>实现分析<ol><li>在进入处理器之前记录开始时间，即在拦截器的preHandle记录开始时间;</li><li>在结束请求处理之后记录结束时间，即在afterCompletion记录结束时间，并用(结束时间-开始时间)得到这次请求的处理时间。</li><li>因为拦截器是单例，因此不管用户请求多少次都只有一个拦截器实现，即线程不安全，所以需要用到ThreadLocal，它是线程绑定的遍历，提供一个局部变量(一个线程一个ThreadLocal，A线程的ThreadLocal只能看到A线程的ThreadLocal，不能看到B线程的ThreadLocal)。</li></ol></li><li>代码实现<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lx.interceptor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.core.NamedThreadLocal;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.handler.HandlerInterceptorAdapter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 性能监控</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 段誉</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2019-03-21 13:37</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PerformanceMonitorInterceptor</span> <span class="keyword">extends</span> <span class="title">HandlerInterceptorAdapter</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> NamedThreadLocal&lt;Long&gt; startTimeThreadLocal = <span class="keyword">new</span> NamedThreadLocal&lt;&gt;(<span class="string">"Performance-Monitor-Start-Time"</span>);</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response,</span></span></span><br><span class="line"><span class="function"><span class="params">                           Object handler)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">//将接口请求时间绑定到当前线程</span></span><br><span class="line">    startTimeThreadLocal.set(System.currentTimeMillis());</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response,</span></span></span><br><span class="line"><span class="function"><span class="params">                              Object handler, Exception ex)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">//结束时间</span></span><br><span class="line">    <span class="keyword">long</span> endTime = System.currentTimeMillis();</span><br><span class="line">    <span class="comment">//得到线程的开始时间</span></span><br><span class="line">    Long startTime = startTimeThreadLocal.get();</span><br><span class="line">    <span class="comment">//消耗的时间</span></span><br><span class="line">    <span class="keyword">long</span> consumeTime = endTime - startTime;</span><br><span class="line">    System.out.println(String.format(<span class="string">"[%s]消耗的时间为[]毫秒"</span>, request.getRequestURI(), consumeTime));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ul><li>NamedThreadLocal：Spring提供的一个命名的ThreadLocal实现。  </li><li>在测试时需要把stopWatchHandlerInterceptor放在拦截器链的第一个，这样得到的时间才是比较准确的。 </li></ul><h2 id="转载"><a href="#转载" class="headerlink" title="转载"></a>转载</h2><blockquote><p>参考自开涛的博客:<a href="https://jinnianshilongnian.iteye.com/blog/1670856" target="_blank" rel="noopener">第五章 处理器拦截器详解——跟着开涛学SpringMVC</a> 学习编写的demo，加深了自己对aop的了解</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> Spring </category>
          
          <category> SpringMVC </category>
          
          <category> 转载 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 拦截器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>idea设置代码根据屏幕的大小自适应换行</title>
      <link href="/posts/3628c68c.html"/>
      <url>/posts/3628c68c.html</url>
      
        <content type="html"><![CDATA[<h1 id="有两种设置方式"><a href="#有两种设置方式" class="headerlink" title="有两种设置方式"></a>有两种设置方式</h1><h2 id="1-对单个文件"><a href="#1-对单个文件" class="headerlink" title="1.对单个文件"></a>1.对单个文件</h2><p>直接在通知栏设置<code>View &gt; Active Editor &gt; Use Soft Wraps</code><br><img src="https://img-blog.csdnimg.cn/20190319192059152.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMzNDMwMDgz,size_16,color_FFFFFF,t_70" alt=""></p><h2 id="2-设置全局的自动换行"><a href="#2-设置全局的自动换行" class="headerlink" title="2.设置全局的自动换行"></a>2.设置全局的自动换行</h2><p>打开设置，依次按照下图找到<code>File &gt; Settings &gt; Editor &gt; General &gt; Soft Wraos</code>然后勾选<code>Use soft wraps in editor</code><br><img src="https://img-blog.csdnimg.cn/20190319192319540.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMzNDMwMDgz,size_16,color_FFFFFF,t_70" alt=""><br><img src="https://img-blog.csdnimg.cn/20190319192443471.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMzNDMwMDgz,size_16,color_FFFFFF,t_70" alt=""></p><h2 id="3-效果"><a href="#3-效果" class="headerlink" title="3.效果"></a>3.效果</h2><p><img src="https://img-blog.csdnimg.cn/20190319192906699.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> idea </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 自动换行 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring项目Ajax请求跨域问题解决</title>
      <link href="/posts/15228925.html"/>
      <url>/posts/15228925.html</url>
      
        <content type="html"><![CDATA[<h2 id="什么是跨域"><a href="#什么是跨域" class="headerlink" title="什么是跨域"></a>什么是跨域</h2><p>简单的说即为浏览器限制访问A站点下的js代码对B站点下的url进行ajax请求。比如说，前端域名是<code>www.abc.com</code>，那么在当前环境中运行的js代码，出于安全考虑，访问<code>www.xyz.com</code>域名下的资源，是受到限制的。现代浏览器默认都会基于安全原因而阻止跨域的ajax请求，这是现代浏览器中必备的功能。</p><h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><p>有根据spring的版本不同有不同的解决办法：</p><ol><li><p>在spring的4.2版本以后支持CORS（跨域资源共享），只需要在类或者方法上加入<code>@CrossOrigin</code>注解来实现：</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@CrossOrigin</span>(origins = <span class="string">"http://www,xxx.com"</span>;, maxAge = <span class="number">3600</span>) </span><br><span class="line"> </span><br><span class="line"><span class="meta">@RestController</span> <span class="meta">@RequestMapping</span>(<span class="string">"/account"</span>) </span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountController</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/&#123;id&#125;"</span>) </span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> Account <span class="title">retrieve</span><span class="params">(@PathVariable Long id)</span> </span>&#123; <span class="comment">// ... &#125;</span></span><br><span class="line"> </span><br><span class="line">    <span class="meta">@RequestMapping</span>(method = RequestMethod.DELETE, path = <span class="string">"/&#123;id&#125;"</span>)</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(@PathVariable Long id)</span> </span>&#123; <span class="comment">// ... &#125; </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> <code>maxAge</code> 表明在3600秒内，不需要再发送预检验请求，添加<code>@CrossOrigin</code>注解后，不需要在ajax请求上有任何改动即可正常发出请求接收数据。</p><p> 在Spring4.2中除了在controller的类或方法上设置外，还可以设置全局配置：</p><ol><li>定义一个继承自WebMvcConfigurerAdapter的类 <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CorsConfigurerAdapter</span> <span class="keyword">extends</span> <span class="title">WebMvcConfigurerAdapter</span></span>&#123;</span><br><span class="line">     <span class="meta">@Override</span> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addCorsMappings</span><span class="params">(CorsRegistry registry)</span> </span>&#123; </span><br><span class="line">        registry.addMapping(<span class="string">"/api/*"</span>).allowedOrigins(<span class="string">"*"</span>).allowedMethods(<span class="string">"GET"</span>, <span class="string">"PUT"</span>, <span class="string">"DELETE"</span>, <span class="string">"POST"</span>);  </span><br><span class="line">    &#125; </span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>将该类注入到容器中<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"com.lemo.web.config.CorsConfigurerAdapter"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol></li></ol></li><li><p>在spring的4.2版本之前，可以通过自定义一个拦截器，给请求加上相应的相应头来处理</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyCorsFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123;&#125;</span><br><span class="line"> </span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse    servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">     HttpServletResponse response = (HttpServletResponse) servletResponse;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">     String origin = (String) servletRequest.getRemoteHost()+<span class="string">":"</span>+servletRequest.getRemotePort();</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">     response.setHeader(<span class="string">"Access-Control-Allow-Origin"</span>, <span class="string">"*"</span>); <span class="comment">//表明它允许任意连接发起跨域请求，*表示所有网站，可以把*替换为具体的网站</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">     response.setHeader(<span class="string">"Access-Control-Allow-Methods"</span>, <span class="string">"POST, GET, OPTIONS, DELETE"</span>); <span class="comment">//表明它允许GET、POST、OPTIONS、DELETE的外域请求</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">     response.setHeader(<span class="string">"Access-Control-Max-Age"</span>, <span class="string">"3600"</span>); <span class="comment">//表明在3600秒内，不需要再发送预检验请求</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">     response.setHeader(<span class="string">"Access-Control-Allow-Headers"</span>, <span class="string">"x-requested-with,Authorization"</span>); <span class="comment">//表明它允许跨域请求包含content-type头</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">     response.setHeader(<span class="string">"Access-Control-Allow-Credentials"</span>,<span class="string">"true"</span>); <span class="comment">//设置跨域ajax请求时是否带cookie的设置</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">     filterChain.doFilter(servletRequest, servletResponse);</span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>web.xml</code>中配置使拦截器生效，配置完后即可生效</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">  <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>cors<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">  <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>com.leimo.filter.myeCORSFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>cors<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> Spring </category>
          
          <category> Web </category>
          
          <category> Ajax </category>
          
          <category> BUG </category>
          
          <category> 跨域 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 跨域 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java使用System.arraycopy()实现数组之间的复制</title>
      <link href="/posts/e8b6833a.html"/>
      <url>/posts/e8b6833a.html</url>
      
        <content type="html"><![CDATA[<p>System提供了函数<code>arraycopy()</code>,将指定源数组中的数组从指定位置复制到目标数组的指定位置。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> src 源数组</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> srcPos 拷贝的起始位置</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> dest 要拷贝进的数组</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> destPos 拷贝的位置起始下标</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> length 拷贝的数组长度</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">arraycopy</span><span class="params">(Object src, <span class="keyword">int</span> srcPos, Object dest, <span class="keyword">int</span> destPos, <span class="keyword">int</span> length)</span></span>;</span><br></pre></td></tr></table></figure><p>使用方法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stringTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="comment">//源数组</span></span><br><span class="line">  String[] str1 = &#123;<span class="string">"零"</span>, <span class="string">"壹"</span>, <span class="string">"贰"</span>, <span class="string">"叁"</span>, <span class="string">"肆"</span>, <span class="string">"伍"</span>, <span class="string">"陆"</span>, <span class="string">"柒"</span>, <span class="string">"捌"</span>, <span class="string">"玖"</span>&#125;;</span><br><span class="line">  <span class="comment">//要拷贝的目标数组</span></span><br><span class="line">  String[] str2 = &#123;<span class="string">"一"</span>, <span class="string">"二"</span>, <span class="string">"三"</span>, <span class="string">"四"</span>, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>&#125;;</span><br><span class="line"> </span><br><span class="line">  System.arraycopy(str1, <span class="number">5</span>, str2, <span class="number">4</span>, <span class="number">3</span>);</span><br><span class="line">  <span class="keyword">for</span> (String str:str2) &#123;</span><br><span class="line">    System.out.print(str);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如上代码返回的结果为： </p><figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">一二三四伍陆柒</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> 基础 </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
