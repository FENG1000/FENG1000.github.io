<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Hexo发布博客方法</title>
      <link href="/2019/12/19/2019-12-19-Hexo%E5%8F%91%E5%B8%83%E5%8D%9A%E5%AE%A2%E6%96%B9%E6%B3%95/"/>
      <url>/2019/12/19/2019-12-19-Hexo%E5%8F%91%E5%B8%83%E5%8D%9A%E5%AE%A2%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h2 id="一、创建博客"><a href="#一、创建博客" class="headerlink" title="一、创建博客"></a>一、创建博客</h2><p>你可以执行下列命令来创建一篇新文章或者新的页面。</p><figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new [layout] &lt;title&gt;</span><br></pre></td></tr></table></figure><p>您可以在命令中指定文章的布局（layout），默认为 <code>post</code>，可以通过修改 <code>_config.yml</code> 中的 <code>default_layout</code> 参数来指定默认布局。</p><h3 id="布局（Layout）"><a href="#布局（Layout）" class="headerlink" title="布局（Layout）"></a>布局（Layout）</h3><p>Hexo 有三种默认布局：<code>post</code>、<code>page</code> 和 <code>draft</code>。在创建者三种不同类型的文件时，它们将会被保存到不同的路径；而您自定义的其他布局和 <code>post</code> 相同，都将储存到 <code>source/_posts</code> 文件夹。</p><table><thead><tr><th>布局</th><th>路径</th></tr></thead><tbody><tr><td><code>post</code></td><td><code>source/_posts</code></td></tr><tr><td><code>page</code></td><td><code>source</code></td></tr><tr><td><code>draft</code></td><td><code>source/_drafts</code></td></tr></tbody></table><blockquote><h3 id="不要处理我的文章"><a href="#不要处理我的文章" class="headerlink" title="不要处理我的文章"></a>不要处理我的文章</h3><p>如果你不想你的文章被处理，你可以将 Front-Matter 中的<code>layout:</code> 设为 <code>false</code> 。</p></blockquote><h3 id="文件名称"><a href="#文件名称" class="headerlink" title="文件名称"></a>文件名称</h3><p>Hexo 默认以标题做为文件名称，但您可编辑 <code>new_post_name</code> 参数来改变默认的文件名称，举例来说，设为 <code>:year-:month-:day-:title.md</code> 可让您更方便的通过日期来管理文章。</p><table><thead><tr><th>变量</th><th>描述</th></tr></thead><tbody><tr><td><code>:title</code></td><td>标题（小写，空格将会被替换为短杠）</td></tr><tr><td><code>:year</code></td><td>建立的年份，比如， 2015</td></tr><tr><td><code>:month</code></td><td>建立的月份（有前导零），比如， <code>04</code></td></tr><tr><td><code>:i_month</code></td><td>建立的月份（无前导零），比如， <code>4</code></td></tr><tr><td><code>:day</code></td><td>建立的日期（有前导零），比如， <code>07</code></td></tr><tr><td><code>:i_day</code></td><td>建立的日期（无前导零），比如， <code>7</code></td></tr></tbody></table><h3 id="草稿"><a href="#草稿" class="headerlink" title="草稿"></a>草稿</h3><p>刚刚提到了 Hexo 的一种特殊布局：<code>draft</code>，这种布局在建立时会被保存到 <code>source/_drafts</code> 文件夹，您可通过 <code>publish</code> 命令将草稿移动到 <code>source/_posts</code> 文件夹，该命令的使用方式与 <code>new</code> 十分类似，您也可在命令中指定 <code>layout</code> 来指定布局。</p><figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo publish [layout] &lt;title&gt;</span><br></pre></td></tr></table></figure><p>草稿默认不会显示在页面中，您可在执行时加上 <code>--draft</code> 参数，或是把 <code>render_drafts</code> 参数设为 <code>true</code> 来预览草稿。</p><h3 id="模版（Scaffold）"><a href="#模版（Scaffold）" class="headerlink" title="模版（Scaffold）"></a>模版（Scaffold）</h3><p>在新建文章时，Hexo 会根据 <code>scaffolds</code> 文件夹内相对应的文件来建立文件，例如：</p><figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new photo "My Gallery"</span><br></pre></td></tr></table></figure><p>在执行这行指令时，Hexo 会尝试在 <code>scaffolds</code> 文件夹中寻找 <code>photo.md</code>，并根据其内容建立文章，以下是您可以在模版中使用的变量：</p><table><thead><tr><th>变量</th><th>描述</th></tr></thead><tbody><tr><td>layout</td><td>布局</td></tr><tr><td>title</td><td>标题</td></tr><tr><td>date</td><td>文件建立日期</td></tr></tbody></table><h2 id="二、Front-matter"><a href="#二、Front-matter" class="headerlink" title="二、Front-matter"></a>二、Front-matter</h2><p>Front-matter 是文件最上方以 <code>---</code> 分隔的区域，用于指定个别文件的变量，举例来说：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">Hello</span> <span class="string">World</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2013</span><span class="string">/7/13</span> <span class="number">20</span><span class="string">:46:25</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure><p>以下是预先定义的参数，您可在模板中使用这些参数值并加以利用。</p><table><thead><tr><th>参数</th><th>描述</th><th>默认值</th></tr></thead><tbody><tr><td>layout</td><td>布局</td><td></td></tr><tr><td>title</td><td>标题</td><td>文章的文件名</td></tr><tr><td>date</td><td>建立日期</td><td>文件建立日期</td></tr><tr><td>updated</td><td>更新日期</td><td>文件更新日期</td></tr><tr><td>comments</td><td>开启文章的评论功能</td><td>true</td></tr><tr><td>tags</td><td>标签（不适用于分页）</td><td></td></tr><tr><td>categories</td><td>分类（不适用于分页）</td><td></td></tr><tr><td>permalink</td><td>覆盖文章网址</td><td></td></tr><tr><td>keywords</td><td>仅用于 meta 标签和 Open Graph 的关键词（不推荐使用）</td><td></td></tr></tbody></table><h3 id="分类和标签"><a href="#分类和标签" class="headerlink" title="分类和标签"></a>分类和标签</h3><p>只有文章支持分类和标签，您可以在 Front-matter 中设置。在其他系统中，分类和标签听起来很接近，但是在 Hexo 中两者有着明显的差别：分类具有顺序性和层次性，也就是说 <code>Foo, Bar</code> 不等于 <code>Bar, Foo</code>；而标签没有顺序和层次。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">categories:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">Diary</span></span><br><span class="line"><span class="attr">tags:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">PS3</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">Games</span></span><br></pre></td></tr></table></figure><blockquote><h3 id="分类方法的分歧"><a href="#分类方法的分歧" class="headerlink" title="分类方法的分歧"></a>分类方法的分歧</h3><p>如果您有过使用 WordPress 的经验，就很容易误解 Hexo 的分类方式。WordPress 支持对一篇文章设置多个分类，而且这些分类可以是同级的，也可以是父子分类。但是 Hexo 不支持指定多个同级分类。下面的指定方法：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">categories:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">Diary</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">Life</span></span><br></pre></td></tr></table></figure><p>会使分类 <code>Life</code> 成为 <code>Diary</code> 的子分类，而不是并列分类。因此，有必要为您的文章选择尽可能准确的分类。</p><p>如果你需要为文章添加多个分类，可以尝试以下 list 中的方法。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">categories:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">[Diary,</span> <span class="string">PlayStation]</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">[Diary,</span> <span class="string">Games]</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">[Life]</span></span><br></pre></td></tr></table></figure><p>此时这篇文章同时包括三个分类： <code>PlayStation</code> 和 <code>Games</code> 分别都是父分类 <code>Diary</code> 的子分类，同时 <code>Life</code> 是一个没有子分类的分类。</p></blockquote><h3 id="JSON-Front-matter"><a href="#JSON-Front-matter" class="headerlink" title="JSON Front-matter"></a>JSON Front-matter</h3><p>除了 YAML 外，你也可以使用 JSON 来编写 Front-matter，只要将 — 代换成 ;;; 即可。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">"title": "Hello World",</span><br><span class="line">"date": "2013/7/13 20:46:25"</span><br><span class="line">;;;</span><br></pre></td></tr></table></figure><h2 id="三、本地启动预览"><a href="#三、本地启动预览" class="headerlink" title="三、本地启动预览"></a>三、本地启动预览</h2><h3 id="hexo-server"><a href="#hexo-server" class="headerlink" title="hexo-server"></a>hexo-server</h3><p>Hexo 3.0 把服务器独立成了个别模块，您必须先安装 <a href="https://github.com/hexojs/hexo-server" target="_blank" rel="noopener">hexo-server</a> 才能使用。</p><figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-server --save</span><br></pre></td></tr></table></figure><p>安装完成后，输入以下命令以启动服务器，您的网站会在 <code>http://localhost:4000</code> 下启动。在服务器启动期间，Hexo 会监视文件变动并自动更新，您无须重启服务器。</p><figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo server</span><br></pre></td></tr></table></figure><p>如果您想要更改端口，或是在执行时遇到了 <code>EADDRINUSE</code> 错误，可以在执行时使用 -p 选项指定其他端口，如下：</p><figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo server -p 5000</span><br></pre></td></tr></table></figure><h4 id="静态模式"><a href="#静态模式" class="headerlink" title="静态模式"></a>静态模式</h4><p>在静态模式下，服务器只处理 <code>public</code> 文件夹内的文件，而不会处理文件变动，在执行时，您应该先自行执行 <code>hexo generate</code>，此模式通常用于生产环境（production mode）下。</p><figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo server -s</span><br></pre></td></tr></table></figure><h4 id="自定义-IP"><a href="#自定义-IP" class="headerlink" title="自定义 IP"></a>自定义 IP</h4><p>服务器默认运行在 <code>0.0.0.0</code>，您可以覆盖默认的 IP 设置，如下：</p><figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo server -i 192.168.1.1</span><br></pre></td></tr></table></figure><p>指定这个参数后，您就只能通过该IP才能访问站点。例如，对于一台使用无线网络的笔记本电脑，除了指向本机的<code>127.0.0.1</code>外，通常还有一个<code>192.168.*.*</code>的局域网IP，如果像上面那样使用<code>-i</code>参数，就不能用<code>127.0.0.1</code>来访问站点了。对于有公网IP的主机，如果您指定一个局域网IP作为<code>-i</code>参数的值，那么就无法通过公网来访问站点。</p><h3 id="生成文件"><a href="#生成文件" class="headerlink" title="生成文件"></a>生成文件</h3><p>使用 Hexo 生成静态文件快速而且简单。</p><figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo generate</span><br></pre></td></tr></table></figure><h4 id="监视文件变动"><a href="#监视文件变动" class="headerlink" title="监视文件变动"></a>监视文件变动</h4><p>Hexo 能够监视文件变动并立即重新生成静态文件，在生成时会比对文件的 SHA1 checksum，只有变动的文件才会写入。</p><figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo generate --watch</span><br></pre></td></tr></table></figure><h4 id="完成后部署"><a href="#完成后部署" class="headerlink" title="完成后部署"></a>完成后部署</h4><p>您可执行下列的其中一个命令，让 Hexo 在生成完毕后自动部署网站，两个命令的作用是相同的。</p><figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo generate --deploy</span><br><span class="line">hexo deploy --generate</span><br></pre></td></tr></table></figure><blockquote><h4 id="简写"><a href="#简写" class="headerlink" title="简写"></a>简写</h4><p>上面两个命令可以简写为</p><figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo g -d</span><br><span class="line">hexo d -g</span><br></pre></td></tr></table></figure></blockquote><h2 id="四、部署到GitHub-码云等Git开源平台"><a href="#四、部署到GitHub-码云等Git开源平台" class="headerlink" title="四、部署到GitHub/码云等Git开源平台"></a>四、部署到GitHub/码云等Git开源平台</h2><p>Hexo 提供了快速方便的一键部署功能，让您只需一条命令就能将网站部署到服务器上。</p><figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo deploy</span><br></pre></td></tr></table></figure><p>在开始之前，您必须先在 <code>_config.yml</code> 中修改参数，一个正确的部署配置中至少要有 <code>type</code> 参数，例如：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br></pre></td></tr></table></figure><p>您可同时使用多个 deployer，Hexo 会依照顺序执行每个 deployer。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">type:</span> <span class="string">heroku</span></span><br><span class="line">  <span class="attr">repo:</span></span><br></pre></td></tr></table></figure><p>请参阅<a href="https://hexo.io/plugins/" target="_blank" rel="noopener">插件</a>列表以获取更多部署插件。</p><ol><li>安装 hexo-deployer-git。 <figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure></li><li>修改配置。 <figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">&lt;repository</span> <span class="string">url&gt;</span> <span class="comment">#https://bitbucket.org/JohnSmith/johnsmith.bitbucket.io</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">[branch]</span></span><br><span class="line">  <span class="attr">message:</span> <span class="string">[message]</span></span><br></pre></td></tr></table></figure><table><thead><tr><th>参数</th><th>描述</th><th>默认</th></tr></thead><tbody><tr><td><code>repo</code></td><td>库（Repository）地址</td><td></td></tr><tr><td><code>branch</code></td><td>分支名称</td><td>gh-pages (GitHub)、coding-pages (Coding.net)、master (others)</td></tr><tr><td><code>message</code></td><td>自定义提交信息</td><td>Site updated: {{ now('YYYY-MM-DD HH:mm:ss') }})</td></tr><tr><td><code>token</code></td><td>用于与仓库进行身份验证的可选令牌值。 带$的前缀以从环境变量读取令牌</td><td></td></tr></tbody></table></li></ol><blockquote><h3 id="碰到一些问题的解决办法"><a href="#碰到一些问题的解决办法" class="headerlink" title="碰到一些问题的解决办法"></a>碰到一些问题的解决办法</h3><p><a href="https://hexo.io/zh-cn/docs/troubleshooting.html" target="_blank" rel="noopener">https://hexo.io/zh-cn/docs/troubleshooting.html</a></p></blockquote><h2 id="五、结束"><a href="#五、结束" class="headerlink" title="五、结束"></a>五、结束</h2><p>学习了Github Pages的使用，通过Hexo部署的方法学习</p><blockquote><p>主要参考<a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">https://hexo.io/zh-cn/docs/</a>来写的</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 自建博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>spring-boot集成redis实现消息发布订阅模式，以及多个订阅模式的实现</title>
      <link href="/2019/03/23/2019-03-28-spring-boot%E9%9B%86%E6%88%90redis%E5%AE%9E%E7%8E%B0%E6%B6%88%E6%81%AF%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85%E6%A8%A1%E5%BC%8F%EF%BC%8C%E4%BB%A5%E5%8F%8A%E5%A4%9A%E4%B8%AA%E8%AE%A2%E9%98%85%E6%A8%A1%E5%BC%8F%E7%9A%84%E5%AE%9E%E7%8E%B0/"/>
      <url>/2019/03/23/2019-03-28-spring-boot%E9%9B%86%E6%88%90redis%E5%AE%9E%E7%8E%B0%E6%B6%88%E6%81%AF%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85%E6%A8%A1%E5%BC%8F%EF%BC%8C%E4%BB%A5%E5%8F%8A%E5%A4%9A%E4%B8%AA%E8%AE%A2%E9%98%85%E6%A8%A1%E5%BC%8F%E7%9A%84%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<ul><li><strong>demo地址</strong><blockquote><p><a href="https://gitee.com/fengzxia/springboot-redis-queue" target="_blank" rel="noopener">https://gitee.com/fengzxia/springboot-redis-queue</a></p></blockquote><h2 id="1-需要的依赖"><a href="#1-需要的依赖" class="headerlink" title="1.需要的依赖"></a>1.需要的依赖</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">  &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;spring-boot-starter&lt;&#x2F;artifactId&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">  &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;spring-boot-starter-data-redis&lt;&#x2F;artifactId&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure><h2 id="2-配置redis以及连接池"><a href="#2-配置redis以及连接池" class="headerlink" title="2.配置redis以及连接池"></a>2.配置redis以及连接池</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># redis</span><br><span class="line">spring:</span><br><span class="line">  redis:</span><br><span class="line">    host: 127.0.0.1</span><br><span class="line">    port: 6379</span><br><span class="line">#    password:</span><br><span class="line">    database: 1</span><br><span class="line">    timeout: 5000</span><br><span class="line">    jedis:</span><br><span class="line">      pool:</span><br><span class="line">        max-active: 8</span><br><span class="line">        max-wait: 1</span><br><span class="line">        max-idle: 500</span><br><span class="line">        min-idle: 0</span><br></pre></td></tr></table></figure><h2 id="3-创建消息的发布者和消息处理者类"><a href="#3-创建消息的发布者和消息处理者类" class="headerlink" title="3.创建消息的发布者和消息处理者类"></a>3.创建消息的发布者和消息处理者类</h2><h3 id="消息发布者"><a href="#消息发布者" class="headerlink" title="消息发布者"></a>消息发布者</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableScheduling</span><span class="comment">//开启定时器功能</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MessageSender</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Autowired</span></span><br><span class="line">  <span class="keyword">private</span> StringRedisTemplate stringRedisTemplate;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 间隔2秒，通过stringRedisTemplate对象向redis消息队列chat频道发布消息</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="meta">@Scheduled</span>(fixedDelay = <span class="number">2000</span>)</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMessage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    stringRedisTemplate.convertAndSend(<span class="string">"chat"</span>, String.valueOf(Math.random()));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="消息处理器POJO"><a href="#消息处理器POJO" class="headerlink" title="消息处理器POJO"></a>消息处理器POJO</h3><ul><li><strong><code>@Component</code>: 自动注入，在 <code>RedisConfig</code> 中不用再写 <code>@Bean</code> 注入 <code>MessageReceiver</code></strong><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MessageReceiver</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 接收消息方法</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receiverMessage</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"MessageReceiver收到一条新消息："</span> + message);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="4-设置消息发布者、消息处理者POJO、redis消息监听容器以及redis监听器注入IOC容器"><a href="#4-设置消息发布者、消息处理者POJO、redis消息监听容器以及redis监听器注入IOC容器" class="headerlink" title="4.设置消息发布者、消息处理者POJO、redis消息监听容器以及redis监听器注入IOC容器"></a>4.设置消息发布者、消息处理者POJO、redis消息监听容器以及redis监听器注入IOC容器</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * redis配置</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 段誉</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2019-03-25 9:59</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span><span class="comment">//相当于xml中的beans</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Bean</span></span><br><span class="line">  <span class="function">RedisMessageListenerContainer <span class="title">container</span><span class="params">(RedisConnectionFactory connectionFactory,</span></span></span><br><span class="line"><span class="function"><span class="params">                                          MessageListenerAdapter listenerAdapter)</span> </span>&#123;</span><br><span class="line">    RedisMessageListenerContainer container = <span class="keyword">new</span> RedisMessageListenerContainer();</span><br><span class="line">    container.setConnectionFactory(connectionFactory);</span><br><span class="line">    <span class="comment">//订阅了一个叫chat的通道</span></span><br><span class="line">    container.addMessageListener(listenerAdapter, <span class="keyword">new</span> PatternTopic(<span class="string">"chat"</span>));</span><br><span class="line">    <span class="keyword">return</span> container;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 消息监听器适配器，绑定消息处理器，利用反射技术调用消息处理器的业务方法</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> receiver</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="meta">@Bean</span></span><br><span class="line">  <span class="function">MessageListenerAdapter <span class="title">listenerAdapter</span><span class="params">(MessageReceiver receiver)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//给messageListenerAdapter 传入一个消息接受的处理器，利用反射的方法调用“receiveMessage”</span></span><br><span class="line">    <span class="comment">//不填defaultListenerMethod默认调用handleMessage</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> MessageListenerAdapter(receiver, <span class="string">"receiverMessage"</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 读取内容的template</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="meta">@Bean</span></span><br><span class="line">  <span class="function">StringRedisTemplate <span class="title">template</span><span class="params">(RedisConnectionFactory connectionFactory)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> StringRedisTemplate(connectionFactory);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-启动项目查看控制台"><a href="#5-启动项目查看控制台" class="headerlink" title="5.启动项目查看控制台"></a>5.启动项目查看控制台</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">MessageReceiver收到一条新消息：0.7372683821918483</span><br><span class="line">MessageReceiver收到一条新消息：0.800095651812774</span><br></pre></td></tr></table></figure><p>配置成功</p><h2 id="6-如何配置多个监听通道"><a href="#6-如何配置多个监听通道" class="headerlink" title="6.如何配置多个监听通道"></a>6.如何配置多个监听通道</h2><h3 id="方式1：一个监听器订阅多个通道"><a href="#方式1：一个监听器订阅多个通道" class="headerlink" title="方式1：一个监听器订阅多个通道"></a>方式1：一个监听器订阅多个通道</h3><p>1.监听容器配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function">RedisMessageListenerContainer <span class="title">container</span><span class="params">(RedisConnectionFactory connectionFactory,</span></span></span><br><span class="line"><span class="function"><span class="params">                                        MessageListenerAdapter listenerAdapter)</span> </span>&#123;</span><br><span class="line">  RedisMessageListenerContainer container = <span class="keyword">new</span> RedisMessageListenerContainer();</span><br><span class="line">  container.setConnectionFactory(connectionFactory);</span><br><span class="line">  <span class="comment">//订阅了一个叫chat的通道</span></span><br><span class="line">  container.addMessageListener(listenerAdapter, <span class="keyword">new</span> PatternTopic(<span class="string">"chat"</span>));</span><br><span class="line">  </span><br><span class="line">  container.addMessageListener(listenerAdapter, <span class="keyword">new</span> PatternTopic(<span class="string">"chat1"</span>));</span><br><span class="line">  <span class="keyword">return</span> container;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.添加一个新的消息发布者</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableScheduling</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MessageSender</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Autowired</span></span><br><span class="line">  <span class="keyword">private</span> StringRedisTemplate stringRedisTemplate;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 间隔2秒，通过stringRedisTemplate对象向redis消息队列chat1频道发布消息</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="meta">@Scheduled</span>(fixedDelay = <span class="number">2000</span>)</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMessage1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    stringRedisTemplate.convertAndSend(<span class="string">"chat1"</span>, String.valueOf(Math.random()));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Scheduled</span>(fixedDelay = <span class="number">2000</span>)</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMessage2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    stringRedisTemplate.convertAndSend(<span class="string">"chat2"</span>, String.valueOf(System.currentTimeMillis()));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.启动项目查看控制台打印</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">MessageReceiver收到一条新消息：0.9988032526665156</span><br><span class="line">MessageReceiver收到一条新消息：来自chat1的消息0.5760191019007642</span><br><span class="line">MessageReceiver收到一条新消息：0.37241454741448377</span><br><span class="line">MessageReceiver收到一条新消息：来自chat1的消息0.639498468451238</span><br></pre></td></tr></table></figure><p>说明配置成功</p><h3 id="方式2：配置多个监听器监听不同的通道"><a href="#方式2：配置多个监听器监听不同的通道" class="headerlink" title="方式2：配置多个监听器监听不同的通道"></a>方式2：配置多个监听器监听不同的通道</h3><h4 id="1-注入一个新的bean，名字要和之前不一样，调用-MessageReceiver-的-receiverMessage2-方法。"><a href="#1-注入一个新的bean，名字要和之前不一样，调用-MessageReceiver-的-receiverMessage2-方法。" class="headerlink" title="1.注入一个新的bean，名字要和之前不一样，调用 MessageReceiver 的 receiverMessage2 方法。"></a>1.注入一个新的bean，名字要和之前不一样，调用 <code>MessageReceiver</code> 的 <code>receiverMessage2</code> 方法。</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function">MessageListenerAdapter <span class="title">listenerAdapter2</span><span class="params">(MessageReceiver receiver)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> MessageListenerAdapter(receiver, <span class="string">"receiverMessage2"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>这里也可以自己新注入一个新的 <code>Receiver</code> 叫 <code>MessageReceiver2</code><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MessageReceiver2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 接收消息方法</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receiverMessage</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"MessageReceiver收到一条新消息："</span> + message);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function">MessageListenerAdapter <span class="title">listenerAdapter2</span><span class="params">(MessageReceiver2 receiver)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> MessageListenerAdapter(receiver, <span class="string">"receiverMessage"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="2-配置监听容器，这里参数命名要和上边bean注入的方法名一致"><a href="#2-配置监听容器，这里参数命名要和上边bean注入的方法名一致" class="headerlink" title="2.配置监听容器，这里参数命名要和上边bean注入的方法名一致"></a>2.配置监听容器，<strong>这里参数命名要和上边bean注入的方法名一致</strong></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function">RedisMessageListenerContainer <span class="title">container</span><span class="params">(RedisConnectionFactory connectionFactory,</span></span></span><br><span class="line"><span class="function"><span class="params">                                        MessageListenerAdapter listenerAdapter1,</span></span></span><br><span class="line"><span class="function"><span class="params">                                        MessageListenerAdapter listenerAdapter2)</span> </span>&#123;</span><br><span class="line">  RedisMessageListenerContainer container = <span class="keyword">new</span> RedisMessageListenerContainer();</span><br><span class="line">  container.setConnectionFactory(connectionFactory);</span><br><span class="line">  <span class="comment">//订阅了一个叫chat的通道</span></span><br><span class="line">  container.addMessageListener(listenerAdapter1, <span class="keyword">new</span> PatternTopic(<span class="string">"chat"</span>));</span><br><span class="line">  container.addMessageListener(listenerAdapter2, <span class="keyword">new</span> PatternTopic(<span class="string">"chat1"</span>));</span><br><span class="line">  <span class="keyword">return</span> container;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-添加一个新的消息发布者"><a href="#3-添加一个新的消息发布者" class="headerlink" title="3.添加一个新的消息发布者"></a>3.添加一个新的消息发布者</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//开启定时器功能</span></span><br><span class="line"><span class="meta">@EnableScheduling</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MessageSender</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Autowired</span></span><br><span class="line">  <span class="keyword">private</span> StringRedisTemplate stringRedisTemplate;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 间隔2秒，通过stringRedisTemplate对象向redis消息队列chat1频道发布消息</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="meta">@Scheduled</span>(fixedDelay = <span class="number">2000</span>)</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMessage1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    stringRedisTemplate.convertAndSend(<span class="string">"chat1"</span>, String.valueOf(Math.random()));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Scheduled</span>(fixedDelay = <span class="number">2000</span>)</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMessage2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    stringRedisTemplate.convertAndSend(<span class="string">"chat2"</span>, String.valueOf(System.currentTimeMillis()));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-启动项目打印日志如下"><a href="#4-启动项目打印日志如下" class="headerlink" title="4.启动项目打印日志如下"></a>4.启动项目打印日志如下</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">收到一条chat2新消息：1555564092816</span><br><span class="line">收到一条chat1新消息：0.257614690680789</span><br><span class="line">收到一条chat2新消息：1555564094830</span><br><span class="line">收到一条chat1新消息：0.3996585101720651</span><br><span class="line">收到一条chat2新消息：1555564096833</span><br><span class="line">收到一条chat1新消息：0.6767629866464419</span><br><span class="line">收到一条chat2新消息：1555564098836</span><br><span class="line">收到一条chat1新消息：0.14106474791507906</span><br></pre></td></tr></table></figure><p>配置成功</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> Spring </category>
          
          <category> SpringBoot </category>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 订阅发布者模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>windows下安装redis后启动占用c盘大量空间解决办法</title>
      <link href="/2019/03/23/2019-03-23-windows%E4%B8%8B%E5%AE%89%E8%A3%85redis%E5%90%8E%E5%90%AF%E5%8A%A8%E5%8D%A0%E7%94%A8c%E7%9B%98%E5%A4%A7%E9%87%8F%E7%A9%BA%E9%97%B4%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/"/>
      <url>/2019/03/23/2019-03-23-windows%E4%B8%8B%E5%AE%89%E8%A3%85redis%E5%90%8E%E5%90%AF%E5%8A%A8%E5%8D%A0%E7%94%A8c%E7%9B%98%E5%A4%A7%E9%87%8F%E7%A9%BA%E9%97%B4%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>Windows版Redis启动后，会在C盘自动创建一个很大的缓存文件，<code>C:\Users\{你的用户名}\AppData\Local\Redis\RedisQFolk_****.dat</code>，一个大概就有7G左右，如果系统异常关闭，还会再新建一个差不多大小的缓存文件，之前的不会自动删除掉，会导致硬盘占用量越来越大。<br>我们可以通过自定义路径即可将其转移到其他分区，并限制其大小。</p><h2 id="解决办法如下："><a href="#解决办法如下：" class="headerlink" title="解决办法如下："></a>解决办法如下：</h2><p>找到redis启动时用到的配置文件redis.windows.conf，然后打开，添加配置，如果存在则修改</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 指定生成的文件最大为4G</span><br><span class="line">maxheap 4294967296</span><br><span class="line"># 指定文件生成到D盘的MyRedisSwap目录下</span><br><span class="line">heapdir D:\MyRedisSwap\</span><br></pre></td></tr></table></figure><ul><li><strong>注意:需要在D盘创建过MyRedisSwap文件夹后redis才能启动，中间要有空格，maxheap单位是byte，修改好后重启即可</strong></li></ul><p>启动前：<br><img src="https://img-blog.csdnimg.cn/20190323144926477.png" alt="在这里插入图片描述"><br>启动后：<br><img src="https://img-blog.csdnimg.cn/20190323144949998.png" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> DB </category>
          
          <category> NoSQL </category>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 占空间 </tag>
            
            <tag> Windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot项目中访问controller接口报Creation of SecureRandom instance for session ID generation using</title>
      <link href="/2019/03/23/2019-03-23-SpringBoot%E9%A1%B9%E7%9B%AE%E4%B8%AD%E8%AE%BF%E9%97%AEcontroller%E6%8E%A5%E5%8F%A3%E6%8A%A5Creation-of-SecureRandom-instance-for-session-ID-generation-using/"/>
      <url>/2019/03/23/2019-03-23-SpringBoot%E9%A1%B9%E7%9B%AE%E4%B8%AD%E8%AE%BF%E9%97%AEcontroller%E6%8E%A5%E5%8F%A3%E6%8A%A5Creation-of-SecureRandom-instance-for-session-ID-generation-using/</url>
      
        <content type="html"><![CDATA[<h2 id="bug原因"><a href="#bug原因" class="headerlink" title="bug原因"></a>bug原因</h2><p>今天测试人员在测试的时候发现获取图形验证码接口在访问时候加载速度非常慢，要一两分钟才能加载出来，看日志的时候发现报了下边的一段警告日志：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2019-01-24 09:36:33.654 [http-nio-8080-exec-5] WARN org.apache.catalina.util.SessionIdGeneratorBase:180 - Creation of SecureRandom instance for session ID generation using [SHA1PRNG] took [106,771] milliseconds.</span><br><span class="line">2019-01-24 09:36:33.656 [http-nio-8080-exec-3] WARN org.apache.catalina.util.SessionIdGeneratorBase:180 - Creation of SecureRandom instance for session ID generation using [SHA1PRNG] took [26,105] milliseconds.</span><br></pre></td></tr></table></figure><p>通过搜索发现原因如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">linux默认的SecureRandom实现方式是非常慢的NativePRNG，而在Windows上的默认实现是SHA1PRNG，你也可以在Linux上指定使用该方式。</span><br><span class="line"></span><br><span class="line">……NativePRNG会不断从操作系统获取熵（从&#x2F;dev&#x2F;urandom读取），其它PRNG则不会获取这些额外的熵。</span><br><span class="line"></span><br><span class="line">AESCounterRNG差不多比SHA1PRNG快的十倍，而如果我没记错，SHA1PRNG比NativePRNG快两到三倍</span><br><span class="line"></span><br><span class="line">SecureRandom是java用来获取高级随机数的实现,而访问获取图形验证码接口速度很慢的原因就是因为在linux上项目生成随机数的时候使用的是最慢的NativePRNG导致的</span><br></pre></td></tr></table></figure><h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><ol><li><p>在 JVM 环境中解决（我在项目中使用的是这种方式）<br>打开$JAVA_PATH/jre/lib/security/java.security这个文件找到修改该<code>securerandom.source</code>的值</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">修改前</span><br><span class="line">securerandom.source&#x3D;file:&#x2F;dev&#x2F;random</span><br><span class="line"></span><br><span class="line">修改后</span><br><span class="line">securerandom.source&#x3D;file:&#x2F;dev&#x2F;.&#x2F;urandom</span><br></pre></td></tr></table></figure><p> 如果为SpringBoot项目可以在执行jar启动命令中添加配置</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">修改前</span><br><span class="line">java -jar pc.jar</span><br><span class="line"></span><br><span class="line">修改后</span><br><span class="line">java -jar -Djava.security.egd&#x3D;file:&#x2F;dev&#x2F;.&#x2F;urandom pc.jar</span><br></pre></td></tr></table></figure></li><li><p>在Tomcat环境中解决</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">可以通过配置 JRE 使用非阻塞的 Entropy Source：</span><br><span class="line">在 catalina.sh 中加入这么一行：-Djava.security.egd&#x3D;file:&#x2F;dev&#x2F;.&#x2F;urandom 即可。</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> Spring </category>
          
          <category> SpringBoot </category>
          
          <category> BUG </category>
          
          <category> 警告 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SessionIdGeneratorBase </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring项目logback配置多环境日志输出</title>
      <link href="/2019/03/23/2019-03-23-Spring%E9%A1%B9%E7%9B%AElogback%E9%85%8D%E7%BD%AE%E5%A4%9A%E7%8E%AF%E5%A2%83%E6%97%A5%E5%BF%97%E8%BE%93%E5%87%BA/"/>
      <url>/2019/03/23/2019-03-23-Spring%E9%A1%B9%E7%9B%AElogback%E9%85%8D%E7%BD%AE%E5%A4%9A%E7%8E%AF%E5%A2%83%E6%97%A5%E5%BF%97%E8%BE%93%E5%87%BA/</url>
      
        <content type="html"><![CDATA[<h2 id="SpringBoot项目"><a href="#SpringBoot项目" class="headerlink" title="SpringBoot项目"></a>SpringBoot项目</h2><h3 id="1-区分线上线下环境配置"><a href="#1-区分线上线下环境配置" class="headerlink" title="1.区分线上线下环境配置"></a>1.区分线上线下环境配置</h3><p>maven项目：在pom.xml文件中的dependencies标签前添加如下代码<br> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">profiles</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--除了dev、pro还可以再添加多个配置--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>dev<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--设置默认为dev环境--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">activation</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">activeByDefault</span>&gt;</span>true<span class="tag">&lt;/<span class="name">activeByDefault</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">activation</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--标签中的值根据自己的项目环境名去添加，标签名可以自定义，能写多个--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">profileActive</span>&gt;</span>dev<span class="tag">&lt;/<span class="name">profileActive</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">id</span>&gt;</span>pro<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">profileActive</span>&gt;</span>prod<span class="tag">&lt;/<span class="name">profileActive</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">profiles</span>&gt;</span></span><br></pre></td></tr></table></figure><br> pom文件配置后可以在application配置文件中通过@profileActive@方式拿到profileActive的值<br> <figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"> #区分springboot是线上还是线下环境</span></span><br><span class="line"><span class="meta">spring.profiles.active</span>=<span class="string">@profileActive@</span></span><br></pre></td></tr></table></figure></p><h3 id="2-在logback中通过如下方式进行区分环境"><a href="#2-在logback中通过如下方式进行区分环境" class="headerlink" title="2.在logback中通过如下方式进行区分环境"></a>2.在logback中通过如下方式进行区分环境</h3><p> 可以根据不同的环境设置不同的日志输出路径<br> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">springProfile</span> <span class="attr">name</span>=<span class="string">"prod"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"LOG_HOME"</span> <span class="attr">value</span>=<span class="string">"/opt/myapp/logs/mengmeng-admin"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">springProfile</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">springProfile</span> <span class="attr">name</span>=<span class="string">"dev"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"LOG_HOME"</span> <span class="attr">value</span>=<span class="string">"/opt/myapp/logs/mengmeng-admin-dev"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">springProfile</span>&gt;</span></span><br></pre></td></tr></table></figure></p><blockquote><p>如果参照这个配置后启动报 <code>Logback configuration error detected:</code> 错误<br>请参考这篇博客解决 <a href="https://blog.csdn.net/qq_33430083/article/details/91360771" target="_blank" rel="noopener">https://blog.csdn.net/qq_33430083/article/details/91360771</a></p></blockquote><h2 id="SpringMVC项目"><a href="#SpringMVC项目" class="headerlink" title="SpringMVC项目"></a>SpringMVC项目</h2><h3 id="1-区分线上线下环境配置-1"><a href="#1-区分线上线下环境配置-1" class="headerlink" title="1.区分线上线下环境配置"></a>1.区分线上线下环境配置</h3><p> 同springboot一样<br> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">profiles</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--除了dev、pro还可以再添加多个配置--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>dev<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--设置默认为dev环境--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">activation</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">activeByDefault</span>&gt;</span>true<span class="tag">&lt;/<span class="name">activeByDefault</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">activation</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--标签中的值根据自己的项目环境名去添加，标签名可以自定义，能写多个--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">profileActive</span>&gt;</span>devlopment<span class="tag">&lt;/<span class="name">profileActive</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">id</span>&gt;</span>pro<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">profileActive</span>&gt;</span>production<span class="tag">&lt;/<span class="name">profileActive</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">profiles</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h3 id="2-在pom文件中引入maven-war-plugin插件，这样作是为了在编译时，web-xml文件能识别-profileActive"><a href="#2-在pom文件中引入maven-war-plugin插件，这样作是为了在编译时，web-xml文件能识别-profileActive" class="headerlink" title="2.在pom文件中引入maven-war-plugin插件，这样作是为了在编译时，web.xml文件能识别${profileActive}"></a>2.在pom文件中引入<code>maven-war-plugin</code>插件，这样作是为了在编译时，web.xml文件能识别${profileActive}</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-war-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">webResources</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/webapp<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>true<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">webResources</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-在web-xml文件中修改spring-profiles-default配置，没有则添加"><a href="#3-在web-xml文件中修改spring-profiles-default配置，没有则添加" class="headerlink" title="3.在web.xml文件中修改spring.profiles.default配置，没有则添加"></a>3.在web.xml文件中修改spring.profiles.default配置，没有则添加</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>spring.profiles.default<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- profileActive就是在pom配置的参数名 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>$&#123;profileActive&#125;<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="4-创建一个监听器，继承ContextLoaderListener"><a href="#4-创建一个监听器，继承ContextLoaderListener" class="headerlink" title="4.创建一个监听器，继承ContextLoaderListener"></a>4.创建一个监听器，继承ContextLoaderListener</h3><p>通过监听器获取到web.xml中<code>spring.profiles.default</code>的值，存入系统属性中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取项目开发环境监听器</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 段誉</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2018-09-19 16:56</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">XyyContextLoaderListener</span> <span class="keyword">extends</span> <span class="title">ContextLoaderListener</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextInitialized</span><span class="params">(ServletContextEvent event)</span> </span>&#123;</span><br><span class="line">    String attribute = event.getServletContext().getInitParameter(<span class="string">"spring.profiles.default"</span>);</span><br><span class="line">    System.setProperty(<span class="string">"DEV_MODEL"</span>, attribute);</span><br><span class="line">    <span class="keyword">super</span>.contextInitialized(event);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在web.xml中添加监听器配置，在配置spring.profiles.default标签的后边添加</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>com.weijian.xiaoyingying.listener.XyyContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="5-引入logback使用if判断需要的依赖"><a href="#5-引入logback使用if判断需要的依赖" class="headerlink" title="5.引入logback使用if判断需要的依赖"></a>5.引入logback使用if判断需要的依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.codehaus.janino<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>janino<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.codehaus.janino/commons-compiler --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.codehaus.janino<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-compiler<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="6-在logback中使用if判断区分环境"><a href="#6-在logback中使用if判断区分环境" class="headerlink" title="6.在logback中使用if判断区分环境"></a>6.在logback中使用if判断区分环境</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">condition</span>=<span class="string">'property("DEV_MODEL").contains("production")'</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">then</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"LOG_HOME"</span> <span class="attr">value</span>=<span class="string">"/opt/myapp/logs/mjsadmin-pro"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">then</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">else</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"LOG_HOME"</span> <span class="attr">value</span>=<span class="string">"/opt/myapp/logs/mjsadmin-dev"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">else</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="配置后没有生效的原因"><a href="#配置后没有生效的原因" class="headerlink" title="配置后没有生效的原因"></a>配置后没有生效的原因</h3><ul><li><strong>有些项目可能因为配置的原因导致logback初始化执行在了<code>ContextLoaderListener</code> 监听器之前导致配置没有生效</strong><h2 id="如果SpringMVC按照上述配置无法成功解决办法"><a href="#如果SpringMVC按照上述配置无法成功解决办法" class="headerlink" title="如果SpringMVC按照上述配置无法成功解决办法"></a>如果SpringMVC按照上述配置无法成功解决办法</h2><h3 id="1-引入logback与spring整合的依赖设置后可以自定义logback-xml的文件名-路径"><a href="#1-引入logback与spring整合的依赖设置后可以自定义logback-xml的文件名-路径" class="headerlink" title="1.引入logback与spring整合的依赖设置后可以自定义logback.xml的文件名/路径"></a>1.引入logback与spring整合的依赖设置后可以自定义logback.xml的文件名/路径</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.logback-extensions<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logback-ext-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="2-将logback-xml文件的名字修改，比如叫logback-aaa-xml"><a href="#2-将logback-xml文件的名字修改，比如叫logback-aaa-xml" class="headerlink" title="2.将logback.xml文件的名字修改，比如叫logback-aaa.xml"></a>2.将logback.xml文件的名字修改，比如叫logback-aaa.xml</h3><h3 id="3-在web-xml中配置logback配置文件初始化（注：要写在spring配置的上边）"><a href="#3-在web-xml中配置logback配置文件初始化（注：要写在spring配置的上边）" class="headerlink" title="3.在web.xml中配置logback配置文件初始化（注：要写在spring配置的上边）"></a>3.在web.xml中配置logback配置文件初始化（注：要写在spring配置的上边）</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>logbackConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:logback-aaa.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="4-将之前配置的监听器改成继承LogbackConfigListener，配置logback文件初始化的监听器"><a href="#4-将之前配置的监听器改成继承LogbackConfigListener，配置logback文件初始化的监听器" class="headerlink" title="4.将之前配置的监听器改成继承LogbackConfigListener，配置logback文件初始化的监听器"></a>4.将之前配置的监听器改成继承LogbackConfigListener，配置logback文件初始化的监听器</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 项目开发/生产环境监听器</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 段誉</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2019-02-21 10:28</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ErpContextLoaderListener</span> <span class="keyword">extends</span> <span class="title">LogbackConfigListener</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextInitialized</span><span class="params">(ServletContextEvent event)</span> </span>&#123;</span><br><span class="line">    String attribute = event.getServletContext().getInitParameter(<span class="string">"spring.profiles.default"</span>);</span><br><span class="line">    System.setProperty(<span class="string">"DEV_MODEL"</span>, attribute);</span><br><span class="line">    <span class="keyword">super</span>.contextInitialized(event);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> Spring </category>
          
          <category> SpringBoot </category>
          
          <category> SpringMVC </category>
          
          <category> logback </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 区分项目环境 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springboot项目中使用redis对数据进行解析报Invalid numeric value: Leading zeroes not allowed错误</title>
      <link href="/2019/03/23/2019-03-23-springboot%E9%A1%B9%E7%9B%AE%E4%B8%AD%E4%BD%BF%E7%94%A8redis%E5%AF%B9%E6%95%B0%E6%8D%AE%E8%BF%9B%E8%A1%8C%E8%A7%A3%E6%9E%90%E6%8A%A5Invalid-numeric-value-Leading-zeroes-not-allowed%E9%94%99%E8%AF%AF/"/>
      <url>/2019/03/23/2019-03-23-springboot%E9%A1%B9%E7%9B%AE%E4%B8%AD%E4%BD%BF%E7%94%A8redis%E5%AF%B9%E6%95%B0%E6%8D%AE%E8%BF%9B%E8%A1%8C%E8%A7%A3%E6%9E%90%E6%8A%A5Invalid-numeric-value-Leading-zeroes-not-allowed%E9%94%99%E8%AF%AF/</url>
      
        <content type="html"><![CDATA[<h2 id="错误分析"><a href="#错误分析" class="headerlink" title="错误分析"></a>错误分析</h2><p>在使用redis获取发送的短信验证码，偶尔会报如下错误信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2019</span>-<span class="number">01</span>-<span class="number">15</span> <span class="number">10</span>:<span class="number">32</span>:<span class="number">15.104</span> [http-nio-<span class="number">8080</span>-exec-<span class="number">10</span>] WARN  org.springframework.web.servlet.PageNotFound:<span class="number">1176</span> - No mapping found f lowed</span><br><span class="line"> at [Source: [B@<span class="number">2836</span>aebe; line: <span class="number">1</span>, column: <span class="number">2</span>]; nested exception is com.fasterxml.jackson.core.JsonParseException: Invalid numeric value: Leading zeroes not allowed</span><br><span class="line"> at [Source: [B@<span class="number">2836</span>aebe; line: <span class="number">1</span>, column: <span class="number">2</span>]</span><br><span class="line"> at org.springframework.data.redis.serializer.Jackson2JsonRedisSerializer.deserialize(Jackson2JsonRedisSerializer.java:<span class="number">73</span>)</span><br><span class="line"> at org.springframework.data.redis.core.AbstractOperations.deserializeValue(AbstractOperations.java:<span class="number">318</span>)</span><br><span class="line"> at org.springframework.data.redis.core.AbstractOperations$ValueDeserializingRedisCallback.doInRedis(AbstractOperations.java:<span class="number">58</span>)</span><br><span class="line"> at org.springframework.data.redis.core.RedisTemplate.execute(RedisTemplate.java:<span class="number">207</span>)</span><br><span class="line"> at org.springframework.data.redis.core.RedisTemplate.execute(RedisTemplate.java:<span class="number">169</span>)</span><br></pre></td></tr></table></figure><p>通过看日志发现是因为使用的jackson解析redis中存储的数据，会把<strong>纯数字</strong>的短信验证码当作是<strong>数字类型</strong>来解析，之所以偶尔会报错是因为生成的随机数验证码中可能会<strong>以0开头</strong>，导致jackson认为这是一个<strong>无效的数字</strong>才报的错，然后使用<code>RedisTemplate&lt;String, String&gt;</code>当作字符串的方式获取短信验证码仍然不行，还是使用的jackson解析短信验证码，检测redis的配置发现是因为<strong>项目中指定的redisTemplate的数据解析方式为jackson解析</strong><br><img src="https://img-blog.csdnimg.cn/20190323135041422.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMzNDMwMDgz,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="解决办法："><a href="#解决办法：" class="headerlink" title="解决办法："></a>解决办法：</h2><p>再配置一个StringRedisTemplate的redis模板：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span>(name = <span class="string">"stringRedisTemplate"</span>)</span><br><span class="line"> <span class="function"><span class="keyword">public</span> StringRedisTemplate <span class="title">stringRedisTemplate</span><span class="params">(RedisConnectionFactory</span></span></span><br><span class="line"><span class="function"><span class="params">   redisConnectionFactory)</span></span>&#123;</span><br><span class="line">     <span class="keyword">return</span> <span class="keyword">new</span> StringRedisTemplate(redisConnectionFactory);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>使用方法：<br><img src="https://img-blog.csdnimg.cn/2019032313532944.png" alt="在这里插入图片描述"></p><ul><li>在获取短信验证码的时候stringRedisTemplate来获取，这样就会把短信验证码通过字符串的方式解析，以0开头也不会报解析错误的问题</li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> Spring </category>
          
          <category> SpringBoot </category>
          
          <category> BUG </category>
          
          <category> Redis </category>
          
          <category> 异常 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JsonParseException </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringMVC 拦截器学习</title>
      <link href="/2019/03/21/2019-03-21-SpringMVC-%E6%8B%A6%E6%88%AA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
      <url>/2019/03/21/2019-03-21-SpringMVC-%E6%8B%A6%E6%88%AA%E5%99%A8%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="demo地址"><a href="#demo地址" class="headerlink" title="demo地址"></a>demo地址</h2><blockquote><p><a href="https://gitee.com/fengzxia/spring-mvc-interceptor-learn" target="_blank" rel="noopener">https://gitee.com/fengzxia/spring-mvc-interceptor-learn</a></p></blockquote><h2 id="常见应用场景"><a href="#常见应用场景" class="headerlink" title="常见应用场景"></a>常见应用场景</h2><ol><li>日志记录:记录请求信息的日志，以便进行信息监控、信息统计、计算PV(Page View)等。</li><li>权限检查:如登录检测，进入处理器检测是否登录，如果没有直接返回到登录页面。</li><li>性能监控:有时候系统在某段时间莫名其妙的慢，可以通过拦截器在进入处理器之前记录开始时间，在处理完后记录结束时间，从而得到该请求的处理时间（如果有反向代理，如apache可以自动记录）。</li><li>通用行为:读取cookie得到用户信息并将用户对象放入请求，从而方便后续流程使用，还可以提取Locale、Theme信息等，只要是多个处理器(Controller)都需要的即可使用拦截器实现。</li><li>OpenSessionInView(在视图中打开会话):如Hibernate，在进入处理器打开Session，在完成后关闭Session。</li></ol><p>需要用到的jar，版本号可以根据自己项目中spring的版本号来些，我这里是<code>5.0.0.RELEASE</code>版本</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="拦截器接口如下"><a href="#拦截器接口如下" class="headerlink" title="拦截器接口如下"></a>拦截器接口如下</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.springframework.web.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.lang.Nullable;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.method.HandlerMethod;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">HandlerInterceptor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">default</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler,</span></span></span><br><span class="line"><span class="function"><span class="params">@Nullable ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler,</span></span></span><br><span class="line"><span class="function"><span class="params">@Nullable Exception ex)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>拦截器一共有3个回调方法:</p><ol><li><strong>perHandle</strong>:预处理回调方法，实现处理器的预处理（如登录检测、ip白名单拦截），第三个参数为响应的处理器；<br>返回值:true表示继续流程（如调用下一个拦截器或处理器）；<br>false表示中断（如登录检测失败，ip不在白名单），不会继续调用其他的拦截器或者处理器，此时需要通过response来产生响应；</li><li><strong>postHandle</strong>:后处理回调方法，实现处理器的后处理（但是在渲染视图之前），此时我们可以通过modelAndView(模型和视图对象)对模型数据进行处理或对视图进行处理，modelAndView也可能为null。</li><li><strong>afterCompletion</strong>:整个请求处理完毕回调方法，即在视图渲染完毕时回调，如性能监控中我们可以在次记录结束时间并输出消耗时间，还可以进行一些资源清理，类似try-catch-finally中的finally，但仅调用处理器执行链中<strong>perHandle返回true的拦截器afterCompletion</strong></li></ol><h3 id="拦截器适配器"><a href="#拦截器适配器" class="headerlink" title="拦截器适配器"></a>拦截器适配器</h3><p>有时候我们可能只需要实现三个回调方法中的某一个，如果实现<code>HandlerInterceptor</code>接口的话，三个方法必须实现，不管你需不需要，此时spring提供了一个<code>HandlerInterceptorAdapter</code>适配器(一种适配器设计模式的实现)，允许我们只实现需要的回调方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.springframework.web.servlet.handler;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.lang.Nullable;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.AsyncHandlerInterceptor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.ModelAndView;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">HandlerInterceptorAdapter</span> <span class="keyword">implements</span> <span class="title">AsyncHandlerInterceptor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler,</span></span></span><br><span class="line"><span class="function"><span class="params">@Nullable ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler,</span></span></span><br><span class="line"><span class="function"><span class="params">@Nullable Exception ex)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterConcurrentHandlingStarted</span><span class="params">(HttpServletRequest request, HttpServletResponse response,</span></span></span><br><span class="line"><span class="function"><span class="params">Object handler)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="运行流程图"><a href="#运行流程图" class="headerlink" title="运行流程图"></a>运行流程图</h2><p><img src="https://img-blog.csdnimg.cn/20190321135648982.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMzNDMwMDgz,size_16,color_FFFFFF,t_70" alt="正常流程" title="正常流程"><br>1-1 正常流程<br><br><img src="https://img-blog.csdnimg.cn/20190321135739106.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMzNDMwMDgz,size_16,color_FFFFFF,t_70" alt="中断流程" title="中断流程"><br>1-2 中断流程  </p><p>中断流程中，比如是HandlerInterceptor2中断的流程（preHandle返回false），此处仅调用它之前拦截器的preHandle返回true的afterCompletion方法。  </p><p>DispatcherServlet内部的工作流程</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//doDispatch方法  </span></span><br><span class="line"><span class="comment">//1、处理器拦截器的预处理（正序执行）  </span></span><br><span class="line">HandlerInterceptor[] interceptors = mappedHandler.getInterceptors();  </span><br><span class="line"><span class="keyword">if</span> (interceptors != <span class="keyword">null</span>) &#123;  </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; interceptors.length; i++) &#123;  </span><br><span class="line">    HandlerInterceptor interceptor = interceptors[i];  </span><br><span class="line">        <span class="keyword">if</span> (!interceptor.preHandle(processedRequest, response, mappedHandler.getHandler())) &#123;  </span><br><span class="line">            <span class="comment">//1.1、失败时触发afterCompletion的调用  </span></span><br><span class="line">            triggerAfterCompletion(mappedHandler, interceptorIndex, processedRequest, response, <span class="keyword">null</span>);  </span><br><span class="line">            <span class="keyword">return</span>;  </span><br><span class="line">        &#125;  </span><br><span class="line">        interceptorIndex = i;<span class="comment">//1.2、记录当前预处理成功的索引  </span></span><br><span class="line">  &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="comment">//2、处理器适配器调用我们的处理器  </span></span><br><span class="line">mv = ha.handle(processedRequest, response, mappedHandler.getHandler());  </span><br><span class="line"><span class="comment">//当我们返回null或没有返回逻辑视图名时的默认视图名翻译（详解4.15.5 RequestToViewNameTranslator）  </span></span><br><span class="line"><span class="keyword">if</span> (mv != <span class="keyword">null</span> &amp;&amp; !mv.hasView()) &#123;  </span><br><span class="line">    mv.setViewName(getDefaultViewName(request));  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="comment">//3、处理器拦截器的后处理（逆序）  </span></span><br><span class="line"><span class="keyword">if</span> (interceptors != <span class="keyword">null</span>) &#123;  </span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = interceptors.length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;  </span><br><span class="line">    HandlerInterceptor interceptor = interceptors[i];  </span><br><span class="line">    interceptor.postHandle(processedRequest, response, mappedHandler.getHandler(), mv);  </span><br><span class="line">  &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="comment">//4、视图的渲染  </span></span><br><span class="line"><span class="keyword">if</span> (mv != <span class="keyword">null</span> &amp;&amp; !mv.wasCleared()) &#123;  </span><br><span class="line">  render(mv, processedRequest, response);  </span><br><span class="line">  <span class="keyword">if</span> (errorView) &#123;  </span><br><span class="line">      WebUtils.clearErrorRequestAttributes(request);  </span><br><span class="line">  &#125;  </span><br><span class="line">  <span class="comment">//5、触发整个请求处理完毕回调方法afterCompletion  </span></span><br><span class="line">  triggerAfterCompletion(mappedHandler, interceptorIndex, processedRequest, response, <span class="keyword">null</span>); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>注:以上是流程的简化代码，中间省略了部分代码，不完整</li></ul><h2 id="正常流程"><a href="#正常流程" class="headerlink" title="正常流程"></a>正常流程</h2><h3 id="1-拦截器实现"><a href="#1-拦截器实现" class="headerlink" title="1.拦截器实现"></a>1.拦截器实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lx.interceptor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.ModelAndView;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.handler.HandlerInterceptorAdapter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 拦截器</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 段誉</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2019-03-21 9:03</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyHandlerInterceptor1</span> <span class="keyword">extends</span> <span class="title">HandlerInterceptorAdapter</span> </span>&#123;<span class="comment">////此处一般继承HandlerInterceptorAdapter适配器即可</span></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response,</span></span></span><br><span class="line"><span class="function"><span class="params">                           Object handler)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"--------------------------MyHandlerInterceptor1.preHandle"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler</span></span></span><br><span class="line"><span class="function"><span class="params">          , ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"--------------------------MyHandlerInterceptor1.postHandle"</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response,</span></span></span><br><span class="line"><span class="function"><span class="params">                              Object handler, Exception ex)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"--------------------------MyHandlerInterceptor1.afterCompletion"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上是MyHandlerInterceptor1实现，MyHandlerInterceptor2同理，只是输出内容为<code>MyHandlerInterceptor2</code>。</p><h3 id="2-控制器"><a href="#2-控制器" class="headerlink" title="2.控制器"></a>2.控制器</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lx.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 段誉</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2019-03-20 15:29</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IndexController</span> </span>&#123;</span><br><span class="line">  <span class="meta">@GetMapping</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">index</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"IndexController.index"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"/index"</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-springMVC配置文件"><a href="#3-springMVC配置文件" class="headerlink" title="3.springMVC配置文件"></a>3.springMVC配置文件</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:interceptors</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">"/**"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"com.lx.interceptor.MyHandlerInterceptor1"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">"/**"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;mvc:exclude-mapping path="/index/**"/&gt;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"com.lx.interceptor.MyHandlerInterceptor2"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:interceptors</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><code>mvc:mapping</code>指定拦截器链接</li><li><code>mvc:exclude-mapping</code>设置不过滤的链接</li><li>上边拦截器设置的顺序就是拦截器执行的顺序</li></ul><h3 id="4-启动测试服务"><a href="#4-启动测试服务" class="headerlink" title="4.启动测试服务"></a>4.启动测试服务</h3><p><a href="http://localhost:8080" target="_blank" rel="noopener">http://localhost:8080</a><br>控制台输出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">--------------------------MyHandlerInterceptor1.preHandle</span><br><span class="line">--------------------------MyHandlerInterceptor2.preHandle</span><br><span class="line">IndexController.index</span><br><span class="line">--------------------------MyHandlerInterceptor2.postHandle</span><br><span class="line">--------------------------MyHandlerInterceptor1.postHandle</span><br><span class="line">--------------------------MyHandlerInterceptor2.afterCompletion</span><br><span class="line">--------------------------MyHandlerInterceptor1.afterCompletion</span><br></pre></td></tr></table></figure><p>与图1-1执行顺序一样，验证<code>afterCompletion</code>是否在页面加载完后执行可以在该回调方法内设置断点，然后查看页面。<br>想要查看中断流程效果可以将MyHandlerInterceptor1或MyHandlerInterceptor2的preHandle返回值设置成false查看</p><h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><h3 id="性能监控"><a href="#性能监控" class="headerlink" title="性能监控"></a>性能监控</h3><ol><li>实现分析<ol><li>在进入处理器之前记录开始时间，即在拦截器的preHandle记录开始时间;</li><li>在结束请求处理之后记录结束时间，即在afterCompletion记录结束时间，并用(结束时间-开始时间)得到这次请求的处理时间。</li><li>因为拦截器是单例，因此不管用户请求多少次都只有一个拦截器实现，即线程不安全，所以需要用到ThreadLocal，它是线程绑定的遍历，提供一个局部变量(一个线程一个ThreadLocal，A线程的ThreadLocal只能看到A线程的ThreadLocal，不能看到B线程的ThreadLocal)。</li></ol></li><li>代码实现<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lx.interceptor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.core.NamedThreadLocal;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.handler.HandlerInterceptorAdapter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 性能监控</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 段誉</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2019-03-21 13:37</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PerformanceMonitorInterceptor</span> <span class="keyword">extends</span> <span class="title">HandlerInterceptorAdapter</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> NamedThreadLocal&lt;Long&gt; startTimeThreadLocal = <span class="keyword">new</span> NamedThreadLocal&lt;&gt;(<span class="string">"Performance-Monitor-Start-Time"</span>);</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response,</span></span></span><br><span class="line"><span class="function"><span class="params">                           Object handler)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">//将接口请求时间绑定到当前线程</span></span><br><span class="line">    startTimeThreadLocal.set(System.currentTimeMillis());</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response,</span></span></span><br><span class="line"><span class="function"><span class="params">                              Object handler, Exception ex)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">//结束时间</span></span><br><span class="line">    <span class="keyword">long</span> endTime = System.currentTimeMillis();</span><br><span class="line">    <span class="comment">//得到线程的开始时间</span></span><br><span class="line">    Long startTime = startTimeThreadLocal.get();</span><br><span class="line">    <span class="comment">//消耗的时间</span></span><br><span class="line">    <span class="keyword">long</span> consumeTime = endTime - startTime;</span><br><span class="line">    System.out.println(String.format(<span class="string">"[%s]消耗的时间为[]毫秒"</span>, request.getRequestURI(), consumeTime));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ul><li>NamedThreadLocal：Spring提供的一个命名的ThreadLocal实现。  </li><li>在测试时需要把stopWatchHandlerInterceptor放在拦截器链的第一个，这样得到的时间才是比较准确的。 </li></ul><h2 id="转载"><a href="#转载" class="headerlink" title="转载"></a>转载</h2><blockquote><p>参考自开涛的博客:<a href="https://jinnianshilongnian.iteye.com/blog/1670856" target="_blank" rel="noopener">第五章 处理器拦截器详解——跟着开涛学SpringMVC</a> 学习编写的demo，加深了自己对aop的了解</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> Spring </category>
          
          <category> SpringMVC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 拦截器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>idea设置代码根据屏幕的大小自适应换行</title>
      <link href="/2019/03/19/2019-03-19-idea%E8%AE%BE%E7%BD%AE%E4%BB%A3%E7%A0%81%E6%A0%B9%E6%8D%AE%E5%B1%8F%E5%B9%95%E7%9A%84%E5%A4%A7%E5%B0%8F%E8%87%AA%E9%80%82%E5%BA%94%E6%8D%A2%E8%A1%8C/"/>
      <url>/2019/03/19/2019-03-19-idea%E8%AE%BE%E7%BD%AE%E4%BB%A3%E7%A0%81%E6%A0%B9%E6%8D%AE%E5%B1%8F%E5%B9%95%E7%9A%84%E5%A4%A7%E5%B0%8F%E8%87%AA%E9%80%82%E5%BA%94%E6%8D%A2%E8%A1%8C/</url>
      
        <content type="html"><![CDATA[<h1 id="有两种设置方式"><a href="#有两种设置方式" class="headerlink" title="有两种设置方式"></a>有两种设置方式</h1><h2 id="1-对单个文件"><a href="#1-对单个文件" class="headerlink" title="1.对单个文件"></a>1.对单个文件</h2><p>直接在通知栏设置<code>View &gt; Active Editor &gt; Use Soft Wraps</code><br><img src="https://img-blog.csdnimg.cn/20190319192059152.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMzNDMwMDgz,size_16,color_FFFFFF,t_70" alt=""></p><h2 id="2-设置全局的自动换行"><a href="#2-设置全局的自动换行" class="headerlink" title="2.设置全局的自动换行"></a>2.设置全局的自动换行</h2><p>打开设置，依次按照下图找到<code>File &gt; Settings &gt; Editor &gt; General &gt; Soft Wraos</code>然后勾选<code>Use soft wraps in editor</code><br><img src="https://img-blog.csdnimg.cn/20190319192319540.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMzNDMwMDgz,size_16,color_FFFFFF,t_70" alt=""><br><img src="https://img-blog.csdnimg.cn/20190319192443471.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMzNDMwMDgz,size_16,color_FFFFFF,t_70" alt=""></p><h2 id="3-效果"><a href="#3-效果" class="headerlink" title="3.效果"></a>3.效果</h2><p><img src="https://img-blog.csdnimg.cn/20190319192906699.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> idea </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 自动换行 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring项目Ajax请求跨域问题解决</title>
      <link href="/2019/02/23/2019-02-23-Spring%E9%A1%B9%E7%9B%AEAjax%E8%AF%B7%E6%B1%82%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/"/>
      <url>/2019/02/23/2019-02-23-Spring%E9%A1%B9%E7%9B%AEAjax%E8%AF%B7%E6%B1%82%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是跨域"><a href="#什么是跨域" class="headerlink" title="什么是跨域"></a>什么是跨域</h2><p>简单的说即为浏览器限制访问A站点下的js代码对B站点下的url进行ajax请求。比如说，前端域名是<code>www.abc.com</code>，那么在当前环境中运行的js代码，出于安全考虑，访问<code>www.xyz.com</code>域名下的资源，是受到限制的。现代浏览器默认都会基于安全原因而阻止跨域的ajax请求，这是现代浏览器中必备的功能。</p><h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><p>有根据spring的版本不同有不同的解决办法：</p><ol><li><p>在spring的4.2版本以后支持CORS（跨域资源共享），只需要在类或者方法上加入<code>@CrossOrigin</code>注解来实现：</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@CrossOrigin</span>(origins = <span class="string">"http://www,xxx.com"</span>;, maxAge = <span class="number">3600</span>) </span><br><span class="line"> </span><br><span class="line"><span class="meta">@RestController</span> <span class="meta">@RequestMapping</span>(<span class="string">"/account"</span>) </span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountController</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/&#123;id&#125;"</span>) </span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> Account <span class="title">retrieve</span><span class="params">(@PathVariable Long id)</span> </span>&#123; <span class="comment">// ... &#125;</span></span><br><span class="line"> </span><br><span class="line">    <span class="meta">@RequestMapping</span>(method = RequestMethod.DELETE, path = <span class="string">"/&#123;id&#125;"</span>)</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(@PathVariable Long id)</span> </span>&#123; <span class="comment">// ... &#125; </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> <code>maxAge</code> 表明在3600秒内，不需要再发送预检验请求，添加<code>@CrossOrigin</code>注解后，不需要在ajax请求上有任何改动即可正常发出请求接收数据。</p><p> 在Spring4.2中除了在controller的类或方法上设置外，还可以设置全局配置：</p><ol><li>定义一个继承自WebMvcConfigurerAdapter的类 <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CorsConfigurerAdapter</span> <span class="keyword">extends</span> <span class="title">WebMvcConfigurerAdapter</span></span>&#123;</span><br><span class="line">     <span class="meta">@Override</span> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addCorsMappings</span><span class="params">(CorsRegistry registry)</span> </span>&#123; </span><br><span class="line">        registry.addMapping(<span class="string">"/api/*"</span>).allowedOrigins(<span class="string">"*"</span>).allowedMethods(<span class="string">"GET"</span>, <span class="string">"PUT"</span>, <span class="string">"DELETE"</span>, <span class="string">"POST"</span>);  </span><br><span class="line">    &#125; </span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>将该类注入到容器中<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"com.lemo.web.config.CorsConfigurerAdapter"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol></li></ol></li><li><p>在spring的4.2版本之前，可以通过自定义一个拦截器，给请求加上相应的相应头来处理</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyCorsFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123;&#125;</span><br><span class="line"> </span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse    servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">     HttpServletResponse response = (HttpServletResponse) servletResponse;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">     String origin = (String) servletRequest.getRemoteHost()+<span class="string">":"</span>+servletRequest.getRemotePort();</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">     response.setHeader(<span class="string">"Access-Control-Allow-Origin"</span>, <span class="string">"*"</span>); <span class="comment">//表明它允许任意连接发起跨域请求，*表示所有网站，可以把*替换为具体的网站</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">     response.setHeader(<span class="string">"Access-Control-Allow-Methods"</span>, <span class="string">"POST, GET, OPTIONS, DELETE"</span>); <span class="comment">//表明它允许GET、POST、OPTIONS、DELETE的外域请求</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">     response.setHeader(<span class="string">"Access-Control-Max-Age"</span>, <span class="string">"3600"</span>); <span class="comment">//表明在3600秒内，不需要再发送预检验请求</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">     response.setHeader(<span class="string">"Access-Control-Allow-Headers"</span>, <span class="string">"x-requested-with,Authorization"</span>); <span class="comment">//表明它允许跨域请求包含content-type头</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">     response.setHeader(<span class="string">"Access-Control-Allow-Credentials"</span>,<span class="string">"true"</span>); <span class="comment">//设置跨域ajax请求时是否带cookie的设置</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">     filterChain.doFilter(servletRequest, servletResponse);</span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>web.xml</code>中配置使拦截器生效，配置完后即可生效</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">  <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>cors<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">  <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>com.leimo.filter.myeCORSFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>cors<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> Spring </category>
          
          <category> Web </category>
          
          <category> BUG </category>
          
          <category> Ajax </category>
          
          <category> 跨域 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 跨域 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java使用System.arraycopy()实现数组之间的复制</title>
      <link href="/2019/02/23/2019-02-23-Java%E4%BD%BF%E7%94%A8System-arraycopy-%E5%AE%9E%E7%8E%B0%E6%95%B0%E7%BB%84%E4%B9%8B%E9%97%B4%E7%9A%84%E5%A4%8D%E5%88%B6/"/>
      <url>/2019/02/23/2019-02-23-Java%E4%BD%BF%E7%94%A8System-arraycopy-%E5%AE%9E%E7%8E%B0%E6%95%B0%E7%BB%84%E4%B9%8B%E9%97%B4%E7%9A%84%E5%A4%8D%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<p>System提供了函数<code>arraycopy()</code>,将指定源数组中的数组从指定位置复制到目标数组的指定位置。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> src 源数组</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> srcPos 拷贝的起始位置</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> dest 要拷贝进的数组</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> destPos 拷贝的位置起始下标</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> length 拷贝的数组长度</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">arraycopy</span><span class="params">(Object src, <span class="keyword">int</span> srcPos, Object dest, <span class="keyword">int</span> destPos, <span class="keyword">int</span> length)</span></span>;</span><br></pre></td></tr></table></figure><p>使用方法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stringTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="comment">//源数组</span></span><br><span class="line">  String[] str1 = &#123;<span class="string">"零"</span>, <span class="string">"壹"</span>, <span class="string">"贰"</span>, <span class="string">"叁"</span>, <span class="string">"肆"</span>, <span class="string">"伍"</span>, <span class="string">"陆"</span>, <span class="string">"柒"</span>, <span class="string">"捌"</span>, <span class="string">"玖"</span>&#125;;</span><br><span class="line">  <span class="comment">//要拷贝的目标数组</span></span><br><span class="line">  String[] str2 = &#123;<span class="string">"一"</span>, <span class="string">"二"</span>, <span class="string">"三"</span>, <span class="string">"四"</span>, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>&#125;;</span><br><span class="line"> </span><br><span class="line">  System.arraycopy(str1, <span class="number">5</span>, str2, <span class="number">4</span>, <span class="number">3</span>);</span><br><span class="line">  <span class="keyword">for</span> (String str:str2) &#123;</span><br><span class="line">    System.out.print(str);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如上代码返回的结果为： </p><figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">一二三四伍陆柒</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> 基础 </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
